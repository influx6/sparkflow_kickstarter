// Generated by dart2js, the Dart to JavaScript compiler version: 1.5.1.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
(function($) {
function dart(){ this.x = 0 }var A = new dart;
delete A.x;
var B = new dart;
delete B.x;
var C = new dart;
delete C.x;
var D = new dart;
delete D.x;
var E = new dart;
delete E.x;
var F = new dart;
delete F.x;
var G = new dart;
delete G.x;
var H = new dart;
delete H.x;
var J = new dart;
delete J.x;
var K = new dart;
delete K.x;
var L = new dart;
delete L.x;
var M = new dart;
delete M.x;
var N = new dart;
delete N.x;
var O = new dart;
delete O.x;
var P = new dart;
delete P.x;
var Q = new dart;
delete Q.x;
var R = new dart;
delete R.x;
var S = new dart;
delete S.x;
var T = new dart;
delete T.x;
var U = new dart;
delete U.x;
var V = new dart;
delete V.x;
var W = new dart;
delete W.x;
var X = new dart;
delete X.x;
var Y = new dart;
delete Y.x;
var Z = new dart;
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
(function(reflectionData) {
  "use strict";
  function map(x) {
    x = {x: x};
    delete x.x;
    return x;
  }
  function processStatics(descriptor) {
    for (var property in descriptor) {
      if (!hasOwnProperty.call(descriptor, property))
        continue;
      if (property === "^")
        continue;
      var element = descriptor[property];
      var firstChar = property.substring(0, 1);
      var previousProperty;
      if (firstChar === "+") {
        mangledGlobalNames[previousProperty] = property.substring(1);
        var flag = descriptor[property];
        if (flag > 0)
          descriptor[previousProperty].$reflectable = flag;
        if (element && element.length)
          init.typeInformation[previousProperty] = element;
      } else if (firstChar === "@") {
        property = property.substring(1);
        $[property]["@"] = element;
      } else if (firstChar === "*") {
        globalObject[previousProperty].$defaultValues = element;
        var optionalMethods = descriptor.$methodsWithOptionalArguments;
        if (!optionalMethods) {
          descriptor.$methodsWithOptionalArguments = optionalMethods = {};
        }
        optionalMethods[property] = previousProperty;
      } else if (typeof element === "function") {
        globalObject[previousProperty = property] = element;
        functions.push(property);
        init.globalFunctions[property] = element;
      } else if (element.constructor === Array) {
        addStubs(globalObject, element, property, true, descriptor, functions);
      } else {
        previousProperty = property;
        var newDesc = {};
        var previousProp;
        for (var prop in element) {
          if (!hasOwnProperty.call(element, prop))
            continue;
          firstChar = prop.substring(0, 1);
          if (prop === "static") {
            processStatics(init.statics[property] = element[prop]);
          } else if (firstChar === "+") {
            mangledNames[previousProp] = prop.substring(1);
            var flag = element[prop];
            if (flag > 0)
              element[previousProp].$reflectable = flag;
          } else if (firstChar === "@" && prop !== "@") {
            newDesc[prop.substring(1)]["@"] = element[prop];
          } else if (firstChar === "*") {
            newDesc[previousProp].$defaultValues = element[prop];
            var optionalMethods = newDesc.$methodsWithOptionalArguments;
            if (!optionalMethods) {
              newDesc.$methodsWithOptionalArguments = optionalMethods = {};
            }
            optionalMethods[prop] = previousProp;
          } else {
            var elem = element[prop];
            if (prop !== "^" && elem != null && elem.constructor === Array && prop !== "<>") {
              addStubs(newDesc, elem, prop, false, element, []);
            } else {
              newDesc[previousProp = prop] = elem;
            }
          }
        }
        $$[property] = [globalObject, newDesc];
        classes.push(property);
      }
    }
  }
  function addStubs(descriptor, array, name, isStatic, originalDescriptor, functions) {
    var f, funcs = [originalDescriptor[name] = descriptor[name] = f = array[0]];
    f.$stubName = name;
    functions.push(name);
    for (var index = 0; index < array.length; index += 2) {
      f = array[index + 1];
      if (typeof f != "function")
        break;
      f.$stubName = array[index + 2];
      funcs.push(f);
      if (f.$stubName) {
        originalDescriptor[f.$stubName] = descriptor[f.$stubName] = f;
        functions.push(f.$stubName);
      }
    }
    for (var i = 0; i < funcs.length; index++, i++) {
      funcs[i].$callName = array[index + 1];
    }
    var getterStubName = array[++index];
    array = array.slice(++index);
    var requiredParameterInfo = array[0];
    var requiredParameterCount = requiredParameterInfo >> 1;
    var isAccessor = (requiredParameterInfo & 1) === 1;
    var isSetter = requiredParameterInfo === 3;
    var isGetter = requiredParameterInfo === 1;
    var optionalParameterInfo = array[1];
    var optionalParameterCount = optionalParameterInfo >> 1;
    var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
    var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
    var functionTypeIndex = array[2];
    var unmangledNameIndex = 2 * optionalParameterCount + requiredParameterCount + 3;
    var isReflectable = array.length > unmangledNameIndex;
    if (getterStubName) {
      f = tearOff(funcs, array, isStatic, name, isIntercepted);
      descriptor[name].$getter = f;
      f.$getterStub = true;
      if (isStatic)
        init.globalFunctions[name] = f;
      originalDescriptor[getterStubName] = descriptor[getterStubName] = f;
      funcs.push(f);
      if (getterStubName)
        functions.push(getterStubName);
      f.$stubName = getterStubName;
      f.$callName = null;
      if (isIntercepted)
        init.interceptedNames[getterStubName] = true;
    }
    if (isReflectable) {
      for (var i = 0; i < funcs.length; i++) {
        funcs[i].$reflectable = 1;
        funcs[i].$reflectionInfo = array;
      }
      var mangledNames = isStatic ? init.mangledGlobalNames : init.mangledNames;
      var unmangledName = array[unmangledNameIndex];
      var reflectionName = unmangledName;
      if (getterStubName)
        mangledNames[getterStubName] = reflectionName;
      if (isSetter) {
        reflectionName += "=";
      } else if (!isGetter) {
        reflectionName += ":" + requiredParameterCount + ":" + optionalParameterCount;
      }
      mangledNames[name] = reflectionName;
      funcs[0].$reflectionName = reflectionName;
      funcs[0].$metadataIndex = unmangledNameIndex + 1;
      if (optionalParameterCount)
        descriptor[unmangledName + "*"] = funcs[0];
    }
  }
  function tearOffGetterNoCsp(funcs, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(x) {" + "if (c === null) c = H.closureFromTearOff(" + "this, funcs, reflectionInfo, false, [x], name);" + "return new c(this, funcs[0], x, name);" + "}")(funcs, reflectionInfo, name, H, null) : new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = H.closureFromTearOff(" + "this, funcs, reflectionInfo, false, [], name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, reflectionInfo, name, H, null);
  }
  function tearOffGetterCsp(funcs, reflectionInfo, name, isIntercepted) {
    var cache = null;
    return isIntercepted ? function(x) {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [x], name);
      return new cache(this, funcs[0], x, name);
    } : function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [], name);
      return new cache(this, funcs[0], null, name);
    };
  }
  function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
    var cache;
    return isStatic ? function() {
      if (cache === void 0)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
      return cache;
    } : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
  }
  var functionCounter = 0;
  var tearOffGetter = typeof dart_precompiled == "function" ? tearOffGetterCsp : tearOffGetterNoCsp;
  if (!init.libraries)
    init.libraries = [];
  if (!init.mangledNames)
    init.mangledNames = map();
  if (!init.mangledGlobalNames)
    init.mangledGlobalNames = map();
  if (!init.statics)
    init.statics = map();
  if (!init.typeInformation)
    init.typeInformation = map();
  if (!init.globalFunctions)
    init.globalFunctions = map();
  if (!init.interceptedNames)
    init.interceptedNames = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor["^"];
    if (fields instanceof Array)
      fields = fields[0];
    var classes = [];
    var functions = [];
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
  }
})([
["_foreign_helper", "dart:_foreign_helper", , H, {
  "^": "",
  JS_CONST: {
    "^": "Object;code"
  }
}],
["_interceptors", "dart:_interceptors", , J, {
  "^": "",
  getInterceptor: function(object) {
    return void 0;
  },
  makeDispatchRecord: function(interceptor, proto, extension, indexability) {
    return {i: interceptor, p: proto, e: extension, x: indexability};
  },
  getNativeInterceptor: function(object) {
    var record, proto, objectProto, interceptor;
    record = object[init.dispatchPropertyName];
    if (record == null)
      if ($.initNativeDispatchFlag == null) {
        H.initNativeDispatch();
        record = object[init.dispatchPropertyName];
      }
    if (record != null) {
      proto = record.p;
      if (false === proto)
        return record.i;
      if (true === proto)
        return object;
      objectProto = Object.getPrototypeOf(object);
      if (proto === objectProto)
        return record.i;
      if (record.e === objectProto)
        throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
    }
    interceptor = H.lookupAndCacheInterceptor(object);
    if (interceptor == null) {
      proto = Object.getPrototypeOf(object);
      if (proto == null || proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      else
        return C.UnknownJavaScriptObject_methods;
    }
    return interceptor;
  },
  Interceptor: {
    "^": "Object;",
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return H.Primitives_objectToString(receiver);
    },
    noSuchMethod$1: [function(receiver, invocation) {
      throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
    }, "call$1", "get$noSuchMethod", 2, 0, null, 37],
    "%": "ArrayBuffer|CanvasGradient|CanvasPattern|CanvasRenderingContext|CanvasRenderingContext2D|DOMError|FileError|MediaError|MediaKeyError|Navigator|NavigatorUserMediaError|PositionError|SQLError|SVGAnimatedNumberList|SVGAnimatedString"
  },
  JSBool: {
    "^": "Interceptor;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: true
  },
  JSNull: {
    "^": "Interceptor;",
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    }
  },
  JavaScriptObject: {
    "^": "Interceptor;",
    get$hashCode: function(_) {
      return 0;
    }
  },
  PlainJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  UnknownJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  JSArray: {
    "^": "Interceptor;",
    add$1: function(receiver, value) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index < 0 || index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeAt"));
      return receiver.splice(index, 1)[0];
    },
    remove$1: function(receiver, element) {
      var i;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("remove"));
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    addAll$1: function(receiver, collection) {
      var t1;
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        this.add$1(receiver, t1.get$current());
    },
    forEach$1: function(receiver, f) {
      return H.IterableMixinWorkaround_forEach(receiver, f);
    },
    join$1: function(receiver, separator) {
      var t1, list, i, t2;
      t1 = receiver.length;
      list = Array(t1);
      list.fixed$length = init;
      for (i = 0; i < receiver.length; ++i) {
        t2 = H.S(receiver[i]);
        if (i >= t1)
          return H.ioore(list, i);
        list[i] = t2;
      }
      return list.join(separator);
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, receiver.length, 0, null);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
        throw H.wrapException(P.ArgumentError$(newLength));
      if (newLength < 0)
        throw H.wrapException(P.RangeError$value(newLength));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      receiver[index] = value;
    },
    $isJSArray: true,
    $isList: true,
    $asList: null
  },
  JSNumber: {
    "^": "Interceptor;",
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      if (typeof b !== "number")
        throw H.wrapException(P.ArgumentError$(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (this.get$isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    get$isNaN: function(receiver) {
      return isNaN(receiver);
    },
    remainder$1: function(receiver, b) {
      return receiver % b;
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$('' + receiver));
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      return receiver & 0x1FFFFFFF;
    },
    $add: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver - other;
    },
    $tdiv: function(receiver, other) {
      if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
        return receiver / other | 0;
      else
        return this.toInt$0(receiver / other);
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this.toInt$0(receiver / other);
    },
    $shl: function(receiver, other) {
      if (other < 0)
        throw H.wrapException(P.ArgumentError$(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr: function(receiver, other) {
      var t1;
      if (other < 0)
        throw H.wrapException(P.ArgumentError$(other));
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    $xor: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return (receiver ^ other) >>> 0;
    },
    $lt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver < other;
    },
    $gt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver > other;
    },
    $ge: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver >= other;
    },
    $isnum: true,
    static: {"^": "JSNumber__MIN_INT32,JSNumber__MAX_INT32"}
  },
  JSInt: {
    "^": "JSNumber;",
    $isnum: true,
    $is$int: true
  },
  JSDouble: {
    "^": "JSNumber;",
    $isnum: true
  },
  JSString: {
    "^": "Interceptor;",
    codeUnitAt$1: function(receiver, index) {
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index));
      if (index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      return receiver.charCodeAt(index);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    endsWith$1: function(receiver, other) {
      var otherLength, t1;
      otherLength = other.length;
      t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    replaceAll$2: function(receiver, from, to) {
      if (typeof to !== "string")
        H.throwExpression(P.ArgumentError$(to));
      return H.stringReplaceAllUnchecked(receiver, from, to);
    },
    split$1: function(receiver, pattern) {
      return receiver.split(pattern);
    },
    startsWith$2: function(receiver, pattern, index) {
      var endIndex;
      if (index > receiver.length)
        throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern === receiver.substring(index, endIndex);
    },
    startsWith$1: function($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
        H.throwExpression(P.ArgumentError$(endIndex));
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (typeof endIndex !== "number")
        return H.iae(endIndex);
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    toLowerCase$0: function(receiver) {
      return receiver.toLowerCase();
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    compareTo$1: function(receiver, other) {
      var t1;
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $isString: true
  }
}],
["_isolate_helper", "dart:_isolate_helper", , H, {
  "^": "",
  _callInIsolate: function(isolate, $function) {
    var result = isolate.eval$1($function);
    init.globalState.topEventLoop.run$0();
    return result;
  },
  leaveJsAsync: function() {
    --init.globalState.topEventLoop._activeJsAsyncCount;
  },
  startRootIsolate: function(entry, args) {
    var t1, t2, t3, t4, t5, rootContext;
    t1 = {};
    t1.args_0 = args;
    args = args;
    t1.args_0 = args;
    if (args == null) {
      args = [];
      t1.args_0 = args;
      t2 = args;
    } else
      t2 = args;
    if (!J.getInterceptor(t2).$isList)
      throw H.wrapException(P.ArgumentError$("Arguments to main must be a List: " + H.S(t2)));
    t2 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
    t2._Manager$1(entry);
    init.globalState = t2;
    if (init.globalState.isWorker === true)
      return;
    t2 = init.globalState.nextIsolateId++;
    t3 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
    t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
    t5 = new H.RawReceivePortImpl(0, null, false);
    rootContext = new H._IsolateContext(t2, t3, t4, new Isolate(), t5, P.Capability_Capability(), P.Capability_Capability(), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
    t4.add$1(0, 0);
    rootContext._addRegistration$2(0, t5);
    init.globalState.rootContext = rootContext;
    init.globalState.currentContext = rootContext;
    t2 = H.getDynamicRuntimeType();
    t3 = H.buildFunctionType(t2, [t2])._isTest$1(entry);
    if (t3)
      rootContext.eval$1(new H.startRootIsolate_closure(t1, entry));
    else {
      t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(entry);
      if (t2)
        rootContext.eval$1(new H.startRootIsolate_closure0(t1, entry));
      else
        rootContext.eval$1(entry);
    }
    init.globalState.topEventLoop.run$0();
  },
  IsolateNatives_computeThisScript: function() {
    var currentScript = init.currentScript;
    if (currentScript != null)
      return String(currentScript.src);
    if (typeof version == "function" && typeof os == "object" && "system" in os)
      return H.IsolateNatives_computeThisScriptFromTrace();
    if (typeof version == "function" && typeof system == "function")
      return thisFilename();
    if (init.globalState.isWorker === true)
      return H.IsolateNatives_computeThisScriptFromTrace();
    return;
  },
  IsolateNatives_computeThisScriptFromTrace: function() {
    var stack, matches;
    stack = new Error().stack;
    if (stack == null) {
      stack = function() {
        try {
          throw new Error();
        } catch (e) {
          return e.stack;
        }

      }();
      if (stack == null)
        throw H.wrapException(P.UnsupportedError$("No stack trace"));
    }
    matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
    if (matches != null)
      return matches[1];
    matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
    if (matches != null)
      return matches[1];
    throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + H.S(stack) + "\""));
  },
  IsolateNatives__processWorkerMessage: [function(sender, e) {
    var msg, t1, functionName, entryPoint, args, message, isSpawnUri, startPaused, replyTo, t2, t3, t4, context, replyPort;
    msg = H._deserializeMessage(e.data);
    t1 = J.getInterceptor$asx(msg);
    switch (t1.$index(msg, "command")) {
      case "start":
        init.globalState.currentManagerId = t1.$index(msg, "id");
        functionName = t1.$index(msg, "functionName");
        entryPoint = functionName == null ? init.globalState.entry : init.globalFunctions[functionName]();
        args = t1.$index(msg, "args");
        message = H._deserializeMessage(t1.$index(msg, "msg"));
        isSpawnUri = t1.$index(msg, "isSpawnUri");
        startPaused = t1.$index(msg, "startPaused");
        replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
        t1 = init.globalState.nextIsolateId++;
        t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
        t4 = new H.RawReceivePortImpl(0, null, false);
        context = new H._IsolateContext(t1, t2, t3, new Isolate(), t4, P.Capability_Capability(), P.Capability_Capability(), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
        t3.add$1(0, 0);
        context._addRegistration$2(0, t4);
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, startPaused, replyTo), "worker-start"));
        init.globalState.currentContext = context;
        init.globalState.topEventLoop.run$0();
        break;
      case "spawn-worker":
        replyPort = t1.$index(msg, "replyPort");
        H.IsolateNatives_spawn(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "args"), t1.$index(msg, "msg"), false, t1.$index(msg, "isSpawnUri"), t1.$index(msg, "startPaused")).then$2$onError(new H.IsolateNatives__processWorkerMessage_closure0(replyPort), new H.IsolateNatives__processWorkerMessage_closure1(replyPort));
        break;
      case "message":
        if (t1.$index(msg, "port") != null)
          J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
        init.globalState.topEventLoop.run$0();
        break;
      case "close":
        init.globalState.managers.remove$1(0, $.get$IsolateNatives_workerIds().$index(0, sender));
        sender.terminate();
        init.globalState.topEventLoop.run$0();
        break;
      case "log":
        H.IsolateNatives__log(t1.$index(msg, "msg"));
        break;
      case "print":
        if (init.globalState.isWorker === true) {
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "print", "msg", msg], null, null));
          t1.toString;
          self.postMessage(t2);
        } else
          P.print(t1.$index(msg, "msg"));
        break;
      case "error":
        throw H.wrapException(t1.$index(msg, "msg"));
    }
  }, "call$2", "IsolateNatives__processWorkerMessage$closure", 4, 0, null, 0, 1],
  IsolateNatives__log: function(msg) {
    var trace, t1, t2, exception;
    if (init.globalState.isWorker === true) {
      t1 = init.globalState.mainManager;
      t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "log", "msg", msg], null, null));
      t1.toString;
      self.postMessage(t2);
    } else
      try {
        $.get$globalThis().console.log(msg);
      } catch (exception) {
        H.unwrapException(exception);
        trace = new H._StackTrace(exception, null);
        throw H.wrapException(P.Exception_Exception(trace));
      }

  },
  IsolateNatives_spawn: function(functionName, uri, args, message, isLight, isSpawnUri, startPaused) {
    var port, completer, signalReply, t1, t2, worker;
    if (uri != null && J.endsWith$1$s(uri, ".dart"))
      uri = J.$add$ns(uri, ".js");
    port = P.ReceivePort_ReceivePort();
    completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
    port.get$first(port).then$1(new H.IsolateNatives_spawn_closure(completer));
    signalReply = new H._NativeJsSendPort(port._rawPort, init.globalState.currentContext.id);
    if (init.globalState.supportsWorkers === true && !isLight)
      if (init.globalState.isWorker === true) {
        t1 = init.globalState.mainManager;
        t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "spawn-worker", "functionName", functionName, "args", args, "msg", message, "uri", uri, "isSpawnUri", isSpawnUri, "startPaused", startPaused, "replyPort", signalReply], null, null));
        t1.toString;
        self.postMessage(t2);
      } else {
        if (uri == null)
          uri = $.get$IsolateNatives_thisScript();
        worker = new Worker(uri);
        worker.onerror = function(f, u, c) {
          return function(e) {
            return f(e, u, c);
          };
        }(H.IsolateNatives_workerOnError, uri, new H.IsolateNatives_spawn_closure0(completer));
        worker.onmessage = function(f, a) {
          return function(e) {
            e.onerror = null;
            return f(a, e);
          };
        }(H.IsolateNatives__processWorkerMessage, worker);
        t1 = init.globalState.nextManagerId++;
        $.get$IsolateNatives_workerIds().$indexSet(0, worker, t1);
        init.globalState.managers.$indexSet(0, t1, worker);
        worker.postMessage(H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "start", "id", t1, "replyTo", H._serializeMessage(signalReply), "args", args, "msg", H._serializeMessage(message), "isSpawnUri", isSpawnUri, "startPaused", startPaused, "functionName", functionName], null, null)));
      }
    else
      H.IsolateNatives__startNonWorker(functionName, uri, args, message, isSpawnUri, startPaused, signalReply);
    return completer.future;
  },
  IsolateNatives__startNonWorker: function(functionName, uri, args, message, isSpawnUri, startPaused, replyPort) {
    var t1, t2, t3, t4, t5, t6;
    t1 = {};
    t1.args_0 = args;
    t1.message_1 = message;
    if (uri != null)
      throw H.wrapException(P.UnsupportedError$("Currently spawnUri is not supported without web workers."));
    t1.message_1 = H._serializeMessage(message);
    t1.args_0 = H._serializeMessage(t1.args_0);
    t2 = init.globalState.topEventLoop;
    t3 = init.globalState.nextIsolateId++;
    t4 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
    t5 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
    t6 = new H.RawReceivePortImpl(0, null, false);
    t4 = new H._IsolateContext(t3, t4, t5, new Isolate(), t6, P.Capability_Capability(), P.Capability_Capability(), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
    t5.add$1(0, 0);
    t4._addRegistration$2(0, t6);
    t2.events._add$1(new H._IsolateEvent(t4, new H.IsolateNatives__startNonWorker_closure(t1, functionName, isSpawnUri, startPaused, replyPort), "nonworker start"));
  },
  IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, startPaused, replyTo) {
    var context, t1, t2, t3;
    context = init.globalState.currentContext;
    t1 = context.id;
    $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t1);
    $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t1);
    t1 = context.controlPort;
    t2 = init.globalState.currentContext.id;
    t3 = context.pauseCapability;
    J.send$1$x(replyTo, ["spawned", new H._NativeJsSendPort(t1, t2), t3, context.terminateCapability]);
    t2 = new H.IsolateNatives__startIsolate_runStartFunction(topLevel, args, message, isSpawnUri, context);
    if (startPaused === true) {
      context.addPause$2(t3, t3);
      init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, t2, "start isolate"));
    } else
      t2.call$0();
  },
  IsolateNatives_workerOnError: [function($event, uri, onError) {
    var message;
    $event.preventDefault();
    message = $event.message;
    onError.call$1(message == null ? "Error spawning worker for " + H.S(uri) : "Error spawning worker for " + H.S(uri) + " (" + message + ")");
    return true;
  }, "call$3", "IsolateNatives_workerOnError$closure", 6, 0, null, 2, 3, 4],
  _serializeMessage: function(message) {
    var t1;
    if (init.globalState.supportsWorkers === true) {
      t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    } else {
      t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    }
  },
  _deserializeMessage: function(message) {
    if (init.globalState.supportsWorkers === true)
      return new H._JsDeserializer(null).deserialize$1(message);
    else
      return message;
  },
  _MessageTraverser_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  _Deserializer_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  startRootIsolate_closure: {
    "^": "Closure:38;box_0,entry_1",
    call$0: function() {
      this.entry_1.call$1(this.box_0.args_0);
    }
  },
  startRootIsolate_closure0: {
    "^": "Closure:38;box_0,entry_2",
    call$0: function() {
      this.entry_2.call$2(this.box_0.args_0, null);
    }
  },
  _Manager: {
    "^": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
    _Manager$1: function(entry) {
      var t1, t2, t3, $function;
      t1 = $.get$globalWindow() == null;
      t2 = $.get$globalWorker();
      t3 = t1 && $.get$globalPostMessageDefined() === true;
      this.isWorker = t3;
      if (!t3)
        t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
      else
        t2 = true;
      this.supportsWorkers = t2;
      this.fromCommandLine = t1 && !t3;
      t2 = H._IsolateEvent;
      t3 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [t2]);
      t3.ListQueue$1(null, t2);
      this.topEventLoop = new H._EventLoop(t3, 0);
      this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H._IsolateContext);
      this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, null);
      if (this.isWorker === true) {
        t1 = new H._MainManagerStub();
        this.mainManager = t1;
        $function = function(f, a) {
          return function(e) {
            f(a, e);
          };
        }(H.IsolateNatives__processWorkerMessage, t1);
        $.get$globalThis().onmessage = $function;
        $.get$globalThis().dartPrint = function(object) {
        };
      }
    }
  },
  _IsolateContext: {
    "^": "Object;id>,ports,weakPorts,isolateStatics<,controlPort<,pauseCapability,terminateCapability,initialized?,isPaused<,delayedEvents<,pauseTokens,doneHandlers,_scheduledControlEvents,_isExecutingEvent,errorsAreFatal,errorPorts",
    addPause$2: function(authentification, resume) {
      if (!this.pauseCapability.$eq(0, authentification))
        return;
      if (this.pauseTokens.add$1(0, resume) && !this.isPaused)
        this.isPaused = true;
      this._updateGlobalState$0();
    },
    removePause$1: function(resume) {
      var t1, t2, $event, t3, t4, t5;
      if (!this.isPaused)
        return;
      t1 = this.pauseTokens;
      t1.remove$1(0, resume);
      if (t1._collection$_length === 0) {
        for (t1 = this.delayedEvents; t2 = t1.length, t2 !== 0;) {
          if (0 >= t2)
            return H.ioore(t1, 0);
          $event = t1.pop();
          t2 = init.globalState.topEventLoop.events;
          t3 = t2._head;
          t4 = t2._table;
          t5 = t4.length;
          t3 = (t3 - 1 & t5 - 1) >>> 0;
          t2._head = t3;
          if (t3 < 0 || t3 >= t5)
            return H.ioore(t4, t3);
          t4[t3] = $event;
          if (t3 === t2._tail)
            t2._grow$0();
          ++t2._modificationCount;
        }
        this.isPaused = false;
      }
      this._updateGlobalState$0();
    },
    addDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null) {
        t1 = [];
        this.doneHandlers = t1;
      }
      if (J.contains$1$asx(t1, responsePort))
        return;
      this.doneHandlers.push(responsePort);
    },
    removeDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null)
        return;
      J.remove$1$ax(t1, responsePort);
    },
    setErrorsFatal$2: function(authentification, errorsAreFatal) {
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      this.errorsAreFatal = errorsAreFatal;
    },
    handlePing$2: function(responsePort, pingType) {
      var t1, t2;
      t1 = J.getInterceptor(pingType);
      if (!t1.$eq(pingType, 0))
        t2 = t1.$eq(pingType, 1) && !this._isExecutingEvent;
      else
        t2 = true;
      if (t2) {
        J.send$1$x(responsePort, null);
        return;
      }
      t2 = new H._IsolateContext_handlePing_respond(responsePort);
      if (t1.$eq(pingType, 2)) {
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(this, t2, "ping"));
        return;
      }
      t1 = this._scheduledControlEvents;
      if (t1 == null) {
        t1 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [null]);
        t1.ListQueue$1(null, null);
        this._scheduledControlEvents = t1;
      }
      t1._add$1(t2);
    },
    handleKill$2: function(authentification, priority) {
      var t1, t2;
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      t1 = J.getInterceptor(priority);
      if (!t1.$eq(priority, 0))
        t2 = t1.$eq(priority, 1) && !this._isExecutingEvent;
      else
        t2 = true;
      if (t2) {
        this.kill$0();
        return;
      }
      if (t1.$eq(priority, 2)) {
        t1 = init.globalState.topEventLoop;
        t2 = this.get$kill();
        t1.events._add$1(new H._IsolateEvent(this, t2, "kill"));
        return;
      }
      t1 = this._scheduledControlEvents;
      if (t1 == null) {
        t1 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [null]);
        t1.ListQueue$1(null, null);
        this._scheduledControlEvents = t1;
      }
      t1._add$1(this.get$kill());
    },
    handleUncaughtError$2: function(error, stackTrace) {
      var t1, message, t2;
      t1 = this.errorPorts;
      if (t1._collection$_length === 0) {
        if (this.errorsAreFatal === true && this === init.globalState.rootContext)
          return;
        t1 = $.get$globalThis();
        if (t1.console != null && typeof t1.console.error == "function")
          t1.console.error(error, stackTrace);
        else {
          P.print(error);
          if (stackTrace != null)
            P.print(stackTrace);
        }
        return;
      }
      message = Array(2);
      message.fixed$length = init;
      message[0] = J.toString$0(error);
      message[1] = stackTrace == null ? null : J.toString$0(stackTrace);
      for (t2 = new P.LinkedHashSetIterator(t1, t1._modifications, null, null), t2._cell = t1._first; t2.moveNext$0();)
        J.send$1$x(t2._collection$_current, message);
    },
    eval$1: function(code) {
      var old, result, e, s, exception, t1;
      old = init.globalState.currentContext;
      init.globalState.currentContext = this;
      $ = this.isolateStatics;
      result = null;
      this._isExecutingEvent = true;
      try {
        result = code.call$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this.handleUncaughtError$2(e, s);
        if (this.errorsAreFatal === true) {
          this.kill$0();
          if (this === init.globalState.rootContext)
            throw exception;
        }
      }
 finally {
        this._isExecutingEvent = false;
        init.globalState.currentContext = old;
        if (old != null)
          $ = old.get$isolateStatics();
        if (this._scheduledControlEvents != null)
          for (; t1 = this._scheduledControlEvents, !t1.get$isEmpty(t1);)
            this._scheduledControlEvents.removeFirst$0().call$0();
      }
      return result;
    },
    handleControlMessage$1: function(message) {
      var t1 = J.getInterceptor$asx(message);
      switch (t1.$index(message, 0)) {
        case "pause":
          this.addPause$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "resume":
          this.removePause$1(t1.$index(message, 1));
          break;
        case "add-ondone":
          this.addDoneListener$1(t1.$index(message, 1));
          break;
        case "remove-ondone":
          this.removeDoneListener$1(t1.$index(message, 1));
          break;
        case "set-errors-fatal":
          this.setErrorsFatal$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "ping":
          this.handlePing$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "kill":
          this.handleKill$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "getErrors":
          this.errorPorts.add$1(0, t1.$index(message, 1));
          break;
        case "stopErrors":
          this.errorPorts.remove$1(0, t1.$index(message, 1));
          break;
      }
    },
    lookup$1: function(portId) {
      return this.ports.$index(0, portId);
    },
    _addRegistration$2: function(portId, port) {
      var t1 = this.ports;
      if (t1.containsKey$1(portId))
        throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
      t1.$indexSet(0, portId, port);
    },
    _updateGlobalState$0: function() {
      if (this.ports._collection$_length - this.weakPorts._collection$_length > 0 || this.isPaused || !this.initialized)
        init.globalState.isolates.$indexSet(0, this.id, this);
      else
        this.kill$0();
    },
    kill$0: [function() {
      var t1, t2, t3;
      t1 = this._scheduledControlEvents;
      if (t1 != null)
        t1.clear$0(0);
      for (t1 = this.ports, t2 = t1.get$values(t1), t3 = t2._iterable, t2 = H.setRuntimeTypeInfo(new H.MappedIterator(null, t3.get$iterator(t3), t2._f), [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)]); t2.moveNext$0();)
        t2._current._close$0();
      t1.clear$0(0);
      this.weakPorts.clear$0(0);
      init.globalState.isolates.remove$1(0, this.id);
      this.errorPorts.clear$0(0);
      t1 = this.doneHandlers;
      if (t1 != null) {
        for (t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
          J.send$1$x(t1._current, null);
        this.doneHandlers = null;
      }
    }, "call$0", "get$kill", 0, 0, 12]
  },
  _IsolateContext_handlePing_respond: {
    "^": "Closure:12;responsePort_0",
    call$0: [function() {
      J.send$1$x(this.responsePort_0, null);
    }, "call$0", null, 0, 0, null, "call"]
  },
  _EventLoop: {
    "^": "Object;events,_activeJsAsyncCount",
    dequeue$0: function() {
      var t1 = this.events;
      if (t1._head === t1._tail)
        return;
      return t1.removeFirst$0();
    },
    runIteration$0: function() {
      var $event, t1, t2;
      $event = this.dequeue$0();
      if ($event == null) {
        if (init.globalState.rootContext != null && init.globalState.isolates.containsKey$1(init.globalState.rootContext.id) && init.globalState.fromCommandLine === true && init.globalState.rootContext.ports._collection$_length === 0)
          H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
        t1 = init.globalState;
        if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop._activeJsAsyncCount === 0) {
          t1 = t1.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "close"], null, null));
          t1.toString;
          self.postMessage(t2);
        }
        return false;
      }
      $event.process$0();
      return true;
    },
    _runHelper$0: function() {
      if ($.get$globalWindow() != null)
        new H._EventLoop__runHelper_next(this).call$0();
      else
        for (; this.runIteration$0();)
          ;
    },
    run$0: function() {
      var e, trace, exception, t1, t2;
      if (init.globalState.isWorker !== true)
        this._runHelper$0();
      else
        try {
          this._runHelper$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          trace = new H._StackTrace(exception, null);
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], null, null));
          t1.toString;
          self.postMessage(t2);
        }

    }
  },
  _EventLoop__runHelper_next: {
    "^": "Closure:12;this_0",
    call$0: [function() {
      if (!this.this_0.runIteration$0())
        return;
      P.Timer_Timer(C.Duration_0, this);
    }, "call$0", null, 0, 0, null, "call"]
  },
  _IsolateEvent: {
    "^": "Object;isolate,fn,message",
    process$0: function() {
      var t1 = this.isolate;
      if (t1.get$isPaused() === true) {
        t1.get$delayedEvents().push(this);
        return;
      }
      t1.eval$1(this.fn);
    }
  },
  _MainManagerStub: {
    "^": "Object;"
  },
  IsolateNatives__processWorkerMessage_closure: {
    "^": "Closure:38;entryPoint_0,args_1,message_2,isSpawnUri_3,startPaused_4,replyTo_5",
    call$0: [function() {
      H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.startPaused_4, this.replyTo_5);
    }, "call$0", null, 0, 0, null, "call"]
  },
  IsolateNatives__processWorkerMessage_closure0: {
    "^": "Closure:31;replyPort_6",
    call$1: [function(msg) {
      J.send$1$x(this.replyPort_6, msg);
    }, "call$1", null, 2, 0, null, 39, "call"]
  },
  IsolateNatives__processWorkerMessage_closure1: {
    "^": "Closure:41;replyPort_7",
    call$1: [function(errorMessage) {
      J.send$1$x(this.replyPort_7, ["spawn failed", errorMessage]);
    }, "call$1", null, 2, 0, null, 40, "call"]
  },
  IsolateNatives_spawn_closure: {
    "^": "Closure:31;completer_0",
    call$1: [function(msg) {
      var t1, t2;
      t1 = J.getInterceptor$asx(msg);
      t2 = this.completer_0;
      if (J.$eq(t1.$index(msg, 0), "spawned")) {
        t1 = t2.future;
        if (t1._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t1._asyncComplete$1(msg);
      } else
        t2.completeError$1(t1.$index(msg, 1));
    }, "call$1", null, 2, 0, null, 39, "call"]
  },
  IsolateNatives_spawn_closure0: {
    "^": "Closure:41;completer_1",
    call$1: [function(message) {
      return this.completer_1.completeError$1(message);
    }, "call$1", null, 2, 0, null, 42, "call"]
  },
  IsolateNatives__startNonWorker_closure: {
    "^": "Closure:38;box_0,functionName_1,isSpawnUri_2,startPaused_3,replyPort_4",
    call$0: [function() {
      var t1 = this.box_0;
      H.IsolateNatives__startIsolate(init.globalFunctions[this.functionName_1](), t1.args_0, t1.message_1, this.isSpawnUri_2, this.startPaused_3, this.replyPort_4);
    }, "call$0", null, 0, 0, null, "call"]
  },
  IsolateNatives__startIsolate_runStartFunction: {
    "^": "Closure:12;topLevel_0,args_1,message_2,isSpawnUri_3,context_4",
    call$0: [function() {
      var t1, t2, t3;
      this.context_4.set$initialized(true);
      if (this.isSpawnUri_3 !== true)
        this.topLevel_0.call$1(this.message_2);
      else {
        t1 = this.topLevel_0;
        t2 = H.getDynamicRuntimeType();
        t3 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
        if (t3)
          t1.call$2(this.args_1, this.message_2);
        else {
          t2 = H.buildFunctionType(t2, [t2])._isTest$1(t1);
          if (t2)
            t1.call$1(this.args_1);
          else
            t1.call$0();
        }
      }
    }, "call$0", null, 0, 0, null, "call"]
  },
  _BaseSendPort: {
    "^": "Object;",
    $isSendPort: true,
    $isCapability: true
  },
  _NativeJsSendPort: {
    "^": "_BaseSendPort;_receivePort,_isolateId",
    send$1: function(_, message) {
      var t1, t2, isolate, t3, shouldSerialize;
      t1 = {};
      t2 = this._isolateId;
      isolate = init.globalState.isolates.$index(0, t2);
      if (isolate == null)
        return;
      t3 = this._receivePort;
      if (t3.get$_isClosed())
        return;
      shouldSerialize = init.globalState.currentContext != null && init.globalState.currentContext.id !== t2;
      t1.msg_0 = message;
      if (shouldSerialize)
        t1.msg_0 = H._serializeMessage(message);
      if (isolate.get$controlPort() === t3) {
        isolate.handleControlMessage$1(t1.msg_0);
        return;
      }
      t2 = init.globalState.topEventLoop;
      t3 = "receive " + H.S(message);
      t2.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(t1, this, shouldSerialize), t3));
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
    },
    get$hashCode: function(_) {
      return this._receivePort.get$_id();
    },
    $is_NativeJsSendPort: true,
    $isSendPort: true,
    $isCapability: true
  },
  _NativeJsSendPort_send_closure: {
    "^": "Closure:38;box_0,this_1,shouldSerialize_2",
    call$0: [function() {
      var t1, t2;
      t1 = this.this_1._receivePort;
      if (!t1.get$_isClosed()) {
        if (this.shouldSerialize_2) {
          t2 = this.box_0;
          t2.msg_0 = H._deserializeMessage(t2.msg_0);
        }
        t1.__isolate_helper$_add$1(this.box_0.msg_0);
      }
    }, "call$0", null, 0, 0, null, "call"]
  },
  _WorkerSendPort: {
    "^": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
    send$1: function(_, message) {
      var workerMessage, manager;
      workerMessage = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "message", "port", this, "msg", message], null, null));
      if (init.globalState.isWorker === true) {
        init.globalState.mainManager.toString;
        self.postMessage(workerMessage);
      } else {
        manager = init.globalState.managers.$index(0, this._workerId);
        if (manager != null)
          manager.postMessage(workerMessage);
      }
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = J.$shl$n(this._workerId, 16);
      t2 = J.$shl$n(this._isolateId, 8);
      t3 = this._receivePortId;
      if (typeof t3 !== "number")
        return H.iae(t3);
      return (t1 ^ t2 ^ t3) >>> 0;
    },
    $is_WorkerSendPort: true,
    $isSendPort: true,
    $isCapability: true
  },
  RawReceivePortImpl: {
    "^": "Object;_id<,_handler,_isClosed<",
    _handler$1: function(arg0) {
      return this._handler.call$1(arg0);
    },
    _close$0: function() {
      this._isClosed = true;
      this._handler = null;
    },
    close$0: [function(_) {
      var t1, t2;
      if (this._isClosed)
        return;
      this._isClosed = true;
      this._handler = null;
      t1 = init.globalState.currentContext;
      t2 = this._id;
      t1.ports.remove$1(0, t2);
      t1.weakPorts.remove$1(0, t2);
      t1._updateGlobalState$0();
    }, "call$0", "get$close", 0, 0, 12],
    __isolate_helper$_add$1: function(dataEvent) {
      if (this._isClosed)
        return;
      this._handler$1(dataEvent);
    },
    static: {"^": "RawReceivePortImpl__nextFreeId"}
  },
  ReceivePortImpl: {
    "^": "Stream;_rawPort,_controller",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = this._controller;
      t1.toString;
      return H.setRuntimeTypeInfo(new P._ControllerStream(t1), [null]).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    close$0: [function(_) {
      this._rawPort.close$0(0);
      this._controller.close$0(0);
    }, "call$0", "get$close", 0, 0, 12],
    ReceivePortImpl$fromRawReceivePort$1: function(_rawPort) {
      var t1 = P.StreamController_StreamController(this.get$close(this), null, null, null, true, null);
      this._controller = t1;
      this._rawPort._handler = t1.get$add(t1);
    },
    $asStream: function() {
      return [null];
    }
  },
  _JsSerializer: {
    "^": "_Serializer;_nextFreeRefId,_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return ["sendport", init.globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
      if (!!x.$is_WorkerSendPort)
        return ["sendport", x._workerId, x._isolateId, x._receivePortId];
      throw H.wrapException("Illegal underlying port " + x.toString$0(0));
    },
    visitCapability$1: function(x) {
      if (!!x.$isCapabilityImpl)
        return ["capability", x._id];
      throw H.wrapException("Capability not serializable: " + x.toString$0(0));
    }
  },
  _JsCopier: {
    "^": "_Copier;_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return new H._NativeJsSendPort(x._receivePort, x._isolateId);
      if (!!x.$is_WorkerSendPort)
        return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
      throw H.wrapException("Illegal underlying port " + x.toString$0(0));
    },
    visitCapability$1: function(x) {
      if (!!x.$isCapabilityImpl)
        return new H.CapabilityImpl(x._id);
      throw H.wrapException("Capability not serializable: " + x.toString$0(0));
    }
  },
  _JsDeserializer: {
    "^": "_Deserializer;_deserialized",
    deserializeSendPort$1: function(list) {
      var t1, managerId, isolateId, receivePortId, isolate, receivePort;
      t1 = J.getInterceptor$asx(list);
      managerId = t1.$index(list, 1);
      isolateId = t1.$index(list, 2);
      receivePortId = t1.$index(list, 3);
      if (J.$eq(managerId, init.globalState.currentManagerId)) {
        isolate = init.globalState.isolates.$index(0, isolateId);
        if (isolate == null)
          return;
        receivePort = isolate.lookup$1(receivePortId);
        if (receivePort == null)
          return;
        return new H._NativeJsSendPort(receivePort, isolateId);
      } else
        return new H._WorkerSendPort(managerId, receivePortId, isolateId);
    },
    deserializeCapability$1: function(list) {
      return new H.CapabilityImpl(J.$index$asx(list, 1));
    }
  },
  _JsVisitedMap: {
    "^": "Object;tagged",
    $index: function(_, object) {
      return object.__MessageTraverser__attached_info__;
    },
    $indexSet: function(_, object, info) {
      this.tagged.push(object);
      object.__MessageTraverser__attached_info__ = info;
    },
    reset$0: function(_) {
      this.tagged = [];
    },
    cleanup$0: function() {
      var $length, i, t1;
      for ($length = this.tagged.length, i = 0; i < $length; ++i) {
        t1 = this.tagged;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].__MessageTraverser__attached_info__ = null;
      }
      this.tagged = null;
    }
  },
  _MessageTraverserVisitedMap: {
    "^": "Object;",
    $index: function(_, object) {
      return;
    },
    $indexSet: function(_, object, info) {
    },
    reset$0: function(_) {
    },
    cleanup$0: function() {
    }
  },
  _MessageTraverser: {
    "^": "Object;",
    traverse$1: function(x) {
      var result;
      if (H._MessageTraverser_isPrimitive(x))
        return this.visitPrimitive$1(x);
      this._visited.reset$0(0);
      result = null;
      try {
        result = this._dispatch$1(x);
      } finally {
        this._visited.cleanup$0();
      }
      return result;
    },
    _dispatch$1: function(x) {
      var t1;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return this.visitPrimitive$1(x);
      t1 = J.getInterceptor(x);
      if (!!t1.$isList)
        return this.visitList$1(x);
      if (!!t1.$isMap)
        return this.visitMap$1(x);
      if (!!t1.$isSendPort)
        return this.visitSendPort$1(x);
      if (!!t1.$isCapability)
        return this.visitCapability$1(x);
      return this.visitObject$1(x);
    },
    visitObject$1: function(x) {
      throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
    }
  },
  _Copier: {
    "^": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var copy, t1, len, i;
      copy = this._visited.$index(0, list);
      if (copy != null)
        return copy;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      copy = Array(len);
      copy.fixed$length = init;
      this._visited.$indexSet(0, list, copy);
      for (i = 0; i < len; ++i)
        copy[i] = this._dispatch$1(t1.$index(list, i));
      return copy;
    },
    visitMap$1: function(map) {
      var t1, copy;
      t1 = {};
      copy = this._visited.$index(0, map);
      t1.copy_0 = copy;
      if (copy != null)
        return copy;
      copy = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1.copy_0 = copy;
      this._visited.$indexSet(0, map, copy);
      map.forEach$1(0, new H._Copier_visitMap_closure(t1, this));
      return t1.copy_0;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitCapability$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Copier_visitMap_closure: {
    "^": "Closure:43;box_0,this_1",
    call$2: function(key, val) {
      var t1 = this.this_1;
      J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
    }
  },
  _Serializer: {
    "^": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var copyId, t1;
      copyId = this._visited.$index(0, list);
      if (copyId != null)
        return ["ref", copyId];
      t1 = this._nextFreeRefId++;
      this._visited.$indexSet(0, list, t1);
      return ["list", t1, this._serializeList$1(list)];
    },
    visitMap$1: function(map) {
      var copyId, t1, t2, keys;
      copyId = this._visited.$index(0, map);
      if (copyId != null)
        return ["ref", copyId];
      t1 = this._nextFreeRefId++;
      this._visited.$indexSet(0, map, t1);
      t2 = map.get$keys();
      keys = this._serializeList$1(P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "IterableBase", 0)));
      t2 = map.get$values(map);
      return ["map", t1, keys, this._serializeList$1(P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "IterableBase", 0)))];
    },
    _serializeList$1: function(list) {
      var t1, len, result, i, t2;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      result = [];
      C.JSArray_methods.set$length(result, len);
      for (i = 0; i < len; ++i) {
        t2 = this._dispatch$1(t1.$index(list, i));
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t2;
      }
      return result;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitCapability$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Deserializer: {
    "^": "Object;",
    deserialize$1: function(x) {
      if (H._Deserializer_isPrimitive(x))
        return x;
      this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
      return this._deserializeHelper$1(x);
    },
    _deserializeHelper$1: function(x) {
      var t1, id;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return x;
      t1 = J.getInterceptor$asx(x);
      switch (t1.$index(x, 0)) {
        case "ref":
          id = t1.$index(x, 1);
          return this._deserialized.$index(0, id);
        case "list":
          return this._deserializeList$1(x);
        case "map":
          return this._deserializeMap$1(x);
        case "sendport":
          return this.deserializeSendPort$1(x);
        case "capability":
          return this.deserializeCapability$1(x);
        default:
          return this.deserializeObject$1(x);
      }
    },
    _deserializeList$1: function(x) {
      var t1, id, dartList, len, i;
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      dartList = t1.$index(x, 2);
      this._deserialized.$indexSet(0, id, dartList);
      t1 = J.getInterceptor$asx(dartList);
      len = t1.get$length(dartList);
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i)
        t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
      return dartList;
    },
    _deserializeMap$1: function(x) {
      var result, t1, id, keys, values, len, t2, i;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      this._deserialized.$indexSet(0, id, result);
      keys = t1.$index(x, 2);
      values = t1.$index(x, 3);
      t1 = J.getInterceptor$asx(keys);
      len = t1.get$length(keys);
      if (typeof len !== "number")
        return H.iae(len);
      t2 = J.getInterceptor$asx(values);
      i = 0;
      for (; i < len; ++i)
        result.$indexSet(0, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
      return result;
    },
    deserializeObject$1: function(x) {
      throw H.wrapException("Unexpected serialized object");
    }
  },
  TimerImpl: {
    "^": "Object;_once,_inEventLoop,_handle",
    TimerImpl$2: function(milliseconds, callback) {
      var t1, t2;
      if (milliseconds === 0)
        t1 = $.get$globalThis().setTimeout == null || init.globalState.isWorker === true;
      else
        t1 = false;
      if (t1) {
        this._handle = 1;
        t1 = init.globalState.topEventLoop;
        t2 = init.globalState.currentContext;
        t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
        this._inEventLoop = true;
      } else {
        t1 = $.get$globalThis();
        if (t1.setTimeout != null) {
          ++init.globalState.topEventLoop._activeJsAsyncCount;
          this._handle = t1.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
        } else
          throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
      }
    },
    static: {TimerImpl$: function(milliseconds, callback) {
        var t1 = new H.TimerImpl(true, false, null);
        t1.TimerImpl$2(milliseconds, callback);
        return t1;
      }}
  },
  TimerImpl_internalCallback: {
    "^": "Closure:12;this_0,callback_1",
    call$0: [function() {
      this.this_0._handle = null;
      this.callback_1.call$0();
    }, "call$0", null, 0, 0, null, "call"]
  },
  TimerImpl_internalCallback0: {
    "^": "Closure:12;this_2,callback_3",
    call$0: [function() {
      this.this_2._handle = null;
      H.leaveJsAsync();
      this.callback_3.call$0();
    }, "call$0", null, 0, 0, null, "call"]
  },
  CapabilityImpl: {
    "^": "Object;_id<",
    get$hashCode: function(_) {
      var hash, t1, t2;
      hash = this._id;
      t1 = J.getInterceptor$n(hash);
      t2 = t1.$shr(hash, 0);
      t1 = t1.$tdiv(hash, 4294967296);
      if (typeof t1 !== "number")
        return H.iae(t1);
      hash = t2 ^ t1;
      hash = (~hash >>> 0) + (hash << 15 >>> 0) & 4294967295;
      hash = ((hash ^ hash >>> 12) >>> 0) * 5 & 4294967295;
      hash = ((hash ^ hash >>> 4) >>> 0) * 2057 & 4294967295;
      return (hash ^ hash >>> 16) >>> 0;
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!!J.getInterceptor(other).$isCapabilityImpl) {
        t1 = this._id;
        t2 = other._id;
        return t1 == null ? t2 == null : t1 === t2;
      }
      return false;
    },
    $isCapabilityImpl: true,
    $isCapability: true
  }
}],
["_js_helper", "dart:_js_helper", , H, {
  "^": "",
  isJsIndexable: function(object, record) {
    var result;
    if (record != null) {
      result = record.x;
      if (result != null)
        return result;
    }
    return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
  },
  S: function(value) {
    var res;
    if (typeof value === "string")
      return value;
    if (typeof value === "number") {
      if (value !== 0)
        return "" + value;
    } else if (true === value)
      return "true";
    else if (false === value)
      return "false";
    else if (value == null)
      return "null";
    res = J.toString$0(value);
    if (typeof res !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return res;
  },
  Primitives_objectHashCode: function(object) {
    var hash = object.$identityHash;
    if (hash == null) {
      hash = Math.random() * 0x3fffffff | 0;
      object.$identityHash = hash;
    }
    return hash;
  },
  Primitives_objectTypeName: function(object) {
    var $name, decompiled;
    $name = C.JS_CONST_8ZY(J.getInterceptor(object));
    if ($name === "Object") {
      decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
      if (typeof decompiled === "string")
        $name = /^\w+$/.test(decompiled) ? decompiled : $name;
    }
    if ($name.length > 1 && C.JSString_methods.codeUnitAt$1($name, 0) === 36)
      $name = C.JSString_methods.substring$1($name, 1);
    return ($name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null)).replace(/[^<,> ]+/g, function(m) {
      return init.mangledGlobalNames[m] || m;
    });
  },
  Primitives_objectToString: function(object) {
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Primitives_stringFromCharCode: function(charCode) {
    var bits;
    if (0 <= charCode) {
      if (charCode <= 65535)
        return String.fromCharCode(charCode);
      if (charCode <= 1114111) {
        bits = charCode - 65536;
        return String.fromCharCode((55296 | C.JSInt_methods._shrOtherPositive$1(bits, 10)) >>> 0, 56320 | bits & 1023);
      }
    }
    throw H.wrapException(P.RangeError$range(charCode, 0, 1114111));
  },
  Primitives_lazyAsJsDate: function(receiver) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    return receiver.date;
  },
  Primitives_getProperty: function(object, key) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(P.ArgumentError$(object));
    return object[key];
  },
  Primitives_setProperty: function(object, key, value) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(P.ArgumentError$(object));
    object[key] = value;
  },
  Primitives_functionNoSuchMethod: function($function, positionalArguments, namedArguments) {
    var t1, $arguments, namedArgumentList, t2;
    t1 = {};
    t1.argumentCount_0 = 0;
    $arguments = [];
    namedArgumentList = [];
    if (positionalArguments != null) {
      t2 = J.get$length$asx(positionalArguments);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1.argumentCount_0 = 0 + t2;
      C.JSArray_methods.addAll$1($arguments, positionalArguments);
    }
    t1.names_1 = "";
    if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
      namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, $arguments, namedArgumentList));
    return J.noSuchMethod$1($function, new H.JSInvocationMirror(C.Symbol_call, "call$" + H.S(t1.argumentCount_0) + t1.names_1, 0, $arguments, namedArgumentList, null));
  },
  Primitives_applyFunction: function($function, positionalArguments, namedArguments) {
    var t1, jsFunction, info, t2, defaultArguments, t3, i, index, $arguments, argumentCount;
    t1 = {};
    if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments)) {
      jsFunction = J.getInterceptor($function)["call*"];
      if (jsFunction == null)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      info = H.ReflectionInfo_ReflectionInfo(jsFunction);
      if (info == null || !info.areOptionalParametersNamed)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      positionalArguments = positionalArguments != null ? P.List_List$from(positionalArguments, true, null) : [];
      t2 = info.requiredParameterCount;
      if (t2 !== positionalArguments.length)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      defaultArguments = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t3 = info.optionalParameterCount, i = 0; i < t3; ++i) {
        index = i + t2;
        defaultArguments.$indexSet(0, info.parameterNameInOrder$1(index), init.metadata[info.defaultValueInOrder$1(index)]);
      }
      t1.bad_0 = false;
      namedArguments.forEach$1(0, new H.Primitives_applyFunction_closure(t1, defaultArguments));
      if (t1.bad_0)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      C.JSArray_methods.addAll$1(positionalArguments, defaultArguments.get$values(defaultArguments));
      return jsFunction.apply($function, positionalArguments);
    }
    $arguments = [];
    if (positionalArguments != null) {
      t1 = J.get$length$asx(positionalArguments);
      if (typeof t1 !== "number")
        return H.iae(t1);
      argumentCount = 0 + t1;
      C.JSArray_methods.addAll$1($arguments, positionalArguments);
    } else
      argumentCount = 0;
    jsFunction = $function["call$" + H.S(argumentCount)];
    if (jsFunction == null)
      return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
    return jsFunction.apply($function, $arguments);
  },
  iae: function(argument) {
    throw H.wrapException(P.ArgumentError$(argument));
  },
  ioore: function(receiver, index) {
    if (receiver == null)
      J.get$length$asx(receiver);
    if (typeof index !== "number" || Math.floor(index) !== index)
      H.iae(index);
    throw H.wrapException(P.RangeError$value(index));
  },
  wrapException: function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    return wrapper;
  },
  toStringWrapper: [function() {
    return J.toString$0(this.dartException);
  }, "call$0", "toStringWrapper$closure", 0, 0, null],
  throwExpression: function(ex) {
    throw H.wrapException(ex);
  },
  unwrapException: function(ex) {
    var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
    t1 = new H.unwrapException_saveStackTrace(ex);
    if (ex == null)
      return;
    if (typeof ex !== "object")
      return ex;
    if ("dartException" in ex)
      return t1.call$1(ex.dartException);
    else if (!("message" in ex))
      return ex;
    message = ex.message;
    if ("number" in ex && typeof ex.number == "number") {
      number = ex.number;
      ieErrorCode = number & 65535;
      if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
        switch (ieErrorCode) {
          case 438:
            return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          case 445:
          case 5007:
            t2 = H.S(message) + " (Error " + ieErrorCode + ")";
            return t1.call$1(new H.NullError(t2, null));
        }
    }
    if (ex instanceof TypeError) {
      t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
      t3 = $.get$TypeErrorDecoder_notClosurePattern();
      t4 = $.get$TypeErrorDecoder_nullCallPattern();
      nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
      t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
      t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
      t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
      $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
      t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
      t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
      match = t2.matchTypeError$1(message);
      if (match != null)
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      else {
        match = t3.matchTypeError$1(message);
        if (match != null) {
          match.method = "call";
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        } else {
          match = t4.matchTypeError$1(message);
          if (match == null) {
            match = nullLiteralCall.matchTypeError$1(message);
            if (match == null) {
              match = t5.matchTypeError$1(message);
              if (match == null) {
                match = t6.matchTypeError$1(message);
                if (match == null) {
                  match = t7.matchTypeError$1(message);
                  if (match == null) {
                    match = nullLiteralCall.matchTypeError$1(message);
                    if (match == null) {
                      match = t8.matchTypeError$1(message);
                      if (match == null) {
                        match = t9.matchTypeError$1(message);
                        t2 = match != null;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
          if (t2) {
            t2 = match == null ? null : match.method;
            return t1.call$1(new H.NullError(message, t2));
          }
        }
      }
      t2 = typeof message === "string" ? message : "";
      return t1.call$1(new H.UnknownJsTypeError(t2));
    }
    if (ex instanceof RangeError) {
      if (typeof message === "string" && message.indexOf("call stack") !== -1)
        return new P.StackOverflowError();
      return t1.call$1(new P.ArgumentError(null));
    }
    if (typeof InternalError == "function" && ex instanceof InternalError)
      if (typeof message === "string" && message === "too much recursion")
        return new P.StackOverflowError();
    return ex;
  },
  objectHashCode: function(object) {
    if (object == null || typeof object != 'object')
      return J.get$hashCode$(object);
    else
      return H.Primitives_objectHashCode(object);
  },
  fillLiteralMap: function(keyValuePairs, result) {
    var $length, index, index0, index1;
    $length = keyValuePairs.length;
    for (index = 0; index < $length; index = index1) {
      index0 = index + 1;
      index1 = index0 + 1;
      result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
    }
    return result;
  },
  invokeClosure: [function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
    var t1 = J.getInterceptor(numberOfArguments);
    if (t1.$eq(numberOfArguments, 0))
      return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
    else if (t1.$eq(numberOfArguments, 1))
      return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
    else if (t1.$eq(numberOfArguments, 2))
      return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
    else if (t1.$eq(numberOfArguments, 3))
      return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
    else if (t1.$eq(numberOfArguments, 4))
      return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
    else
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
  }, "call$7", "invokeClosure$closure", 14, 0, null, 5, 6, 7, 8, 9, 10, 11],
  convertDartClosureToJS: function(closure, arity) {
    var $function;
    if (closure == null)
      return;
    $function = closure.$identity;
    if (!!$function)
      return $function;
    $function = function(closure, arity, context, invoke) {
      return function(a1, a2, a3, a4) {
        return invoke(closure, context, arity, a1, a2, a3, a4);
      };
    }(closure, arity, init.globalState.currentContext, H.invokeClosure);
    closure.$identity = $function;
    return $function;
  },
  Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
    var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
    $function = functions[0];
    $function.$stubName;
    callName = $function.$callName;
    $function.$reflectionInfo = reflectionInfo;
    functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
    $prototype = isStatic ? Object.create(new H.TearOffClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
    $prototype.$initialize = $prototype.constructor;
    if (isStatic)
      $constructor = function() {
        this.$initialize();
      };
    else if (typeof dart_precompiled == "function") {
      t1 = function(a, b, c, d) {
        this.$initialize(a, b, c, d);
      };
      $constructor = t1;
    } else {
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      t1 = new Function("a", "b", "c", "d", "this.$initialize(a,b,c,d);" + t1);
      $constructor = t1;
    }
    $prototype.constructor = $constructor;
    $constructor.prototype = $prototype;
    t1 = !isStatic;
    if (t1) {
      isIntercepted = jsArguments.length == 1 && true;
      trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
      trampoline.$reflectionInfo = reflectionInfo;
    } else {
      $prototype.$name = propertyName;
      trampoline = $function;
      isIntercepted = false;
    }
    if (typeof functionType == "number")
      signatureFunction = function(s) {
        return function() {
          return init.metadata[s];
        };
      }(functionType);
    else if (t1 && typeof functionType == "function") {
      getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
      signatureFunction = function(f, r) {
        return function() {
          return f.apply({$receiver: r(this)}, arguments);
        };
      }(functionType, getReceiver);
    } else
      throw H.wrapException("Error in reflectionInfo.");
    $prototype.$signature = signatureFunction;
    $prototype[callName] = trampoline;
    for (t1 = functions.length, i = 1; i < t1; ++i) {
      stub = functions[i];
      stubCallName = stub.$callName;
      if (stubCallName != null) {
        t2 = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
        $prototype[stubCallName] = t2;
      }
    }
    $prototype["call*"] = trampoline;
    return $constructor;
  },
  Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
    var getSelf = H.BoundClosure_selfOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        return function(n, S) {
          return function() {
            return S(this)[n]();
          };
        }(stubName, getSelf);
      case 1:
        return function(n, S) {
          return function(a) {
            return S(this)[n](a);
          };
        }(stubName, getSelf);
      case 2:
        return function(n, S) {
          return function(a, b) {
            return S(this)[n](a, b);
          };
        }(stubName, getSelf);
      case 3:
        return function(n, S) {
          return function(a, b, c) {
            return S(this)[n](a, b, c);
          };
        }(stubName, getSelf);
      case 4:
        return function(n, S) {
          return function(a, b, c, d) {
            return S(this)[n](a, b, c, d);
          };
        }(stubName, getSelf);
      case 5:
        return function(n, S) {
          return function(a, b, c, d, e) {
            return S(this)[n](a, b, c, d, e);
          };
        }(stubName, getSelf);
      default:
        return function(f, s) {
          return function() {
            return f.apply(s(this), arguments);
          };
        }($function, getSelf);
    }
  },
  Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
    var stubName, arity, lookedUpFunction, t1, t2, $arguments;
    if (isIntercepted)
      return H.Closure_forwardInterceptedCallTo(receiver, $function);
    stubName = $function.$stubName;
    arity = $function.length;
    lookedUpFunction = receiver[stubName];
    t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (typeof dart_precompiled == "function" || !t1 || arity >= 27)
      return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
    if (arity === 0) {
      t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t1;
      }
      t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "();";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
    t1 = "return function(" + $arguments + "){return this.";
    t2 = $.BoundClosure_selfFieldNameCache;
    if (t2 == null) {
      t2 = H.BoundClosure_computeFieldNamed("self");
      $.BoundClosure_selfFieldNameCache = t2;
    }
    t2 = t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");";
    t1 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t1, 1);
    return new Function(t2 + H.S(t1) + "}")();
  },
  Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
    var getSelf, getReceiver;
    getSelf = H.BoundClosure_selfOf;
    getReceiver = H.BoundClosure_receiverOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
      case 1:
        return function(n, s, r) {
          return function() {
            return s(this)[n](r(this));
          };
        }($name, getSelf, getReceiver);
      case 2:
        return function(n, s, r) {
          return function(a) {
            return s(this)[n](r(this), a);
          };
        }($name, getSelf, getReceiver);
      case 3:
        return function(n, s, r) {
          return function(a, b) {
            return s(this)[n](r(this), a, b);
          };
        }($name, getSelf, getReceiver);
      case 4:
        return function(n, s, r) {
          return function(a, b, c) {
            return s(this)[n](r(this), a, b, c);
          };
        }($name, getSelf, getReceiver);
      case 5:
        return function(n, s, r) {
          return function(a, b, c, d) {
            return s(this)[n](r(this), a, b, c, d);
          };
        }($name, getSelf, getReceiver);
      case 6:
        return function(n, s, r) {
          return function(a, b, c, d, e) {
            return s(this)[n](r(this), a, b, c, d, e);
          };
        }($name, getSelf, getReceiver);
      default:
        return function(f, s, r, a) {
          return function() {
            a = [r(this)];
            Array.prototype.push.apply(a, arguments);
            return f.apply(s(this), a);
          };
        }($function, getSelf, getReceiver);
    }
  },
  Closure_forwardInterceptedCallTo: function(receiver, $function) {
    var selfField, t1, stubName, arity, isCsp, lookedUpFunction, t2, $arguments;
    selfField = H.BoundClosure_selfFieldName();
    t1 = $.BoundClosure_receiverFieldNameCache;
    if (t1 == null) {
      t1 = H.BoundClosure_computeFieldNamed("receiver");
      $.BoundClosure_receiverFieldNameCache = t1;
    }
    stubName = $function.$stubName;
    arity = $function.length;
    isCsp = typeof dart_precompiled == "function";
    lookedUpFunction = receiver[stubName];
    t2 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (isCsp || !t2 || arity >= 28)
      return H.Closure_cspForwardInterceptedCall(arity, !t2, stubName, $function);
    if (arity === 1) {
      t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
    t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ", " + $arguments + ");";
    t2 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t2, 1);
    return new Function(t1 + H.S(t2) + "}")();
  },
  closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
    functions.fixed$length = init;
    reflectionInfo.fixed$length = init;
    return H.Closure_fromTearOff(receiver, functions, reflectionInfo, !!isStatic, jsArguments, $name);
  },
  throwCyclicInit: function(staticName) {
    throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
  },
  buildFunctionType: function(returnType, parameterTypes, optionalParameterTypes) {
    return new H.RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, null);
  },
  getDynamicRuntimeType: function() {
    return C.C_DynamicRuntimeType;
  },
  createRuntimeType: function($name) {
    return new H.TypeImpl($name, null);
  },
  setRuntimeTypeInfo: function(target, typeInfo) {
    if (target != null)
      target.$builtinTypeInfo = typeInfo;
    return target;
  },
  getRuntimeTypeInfo: function(target) {
    if (target == null)
      return;
    return target.$builtinTypeInfo;
  },
  getRuntimeTypeArguments: function(target, substitutionName) {
    return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
  },
  getRuntimeTypeArgument: function(target, substitutionName, index) {
    var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
    return $arguments == null ? null : $arguments[index];
  },
  getTypeArgumentByIndex: function(target, index) {
    var rti = H.getRuntimeTypeInfo(target);
    return rti == null ? null : rti[index];
  },
  runtimeTypeToString: function(type, onTypeVariable) {
    if (type == null)
      return "dynamic";
    else if (typeof type === "object" && type !== null && type.constructor === Array)
      return type[0].builtin$cls + H.joinArguments(type, 1, onTypeVariable);
    else if (typeof type == "function")
      return type.builtin$cls;
    else if (typeof type === "number" && Math.floor(type) === type)
      return C.JSInt_methods.toString$0(type);
    else
      return;
  },
  joinArguments: function(types, startIndex, onTypeVariable) {
    var buffer, index, firstArgument, allDynamic, argument, str;
    if (types == null)
      return "";
    buffer = P.StringBuffer$("");
    for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
      if (firstArgument)
        firstArgument = false;
      else
        buffer._contents += ", ";
      argument = types[index];
      if (argument != null)
        allDynamic = false;
      str = H.runtimeTypeToString(argument, onTypeVariable);
      buffer._contents += typeof str === "string" ? str : H.S(str);
    }
    return allDynamic ? "" : "<" + H.S(buffer) + ">";
  },
  substitute: function(substitution, $arguments) {
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function") {
      substitution = H.invokeOn(substitution, null, $arguments);
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        $arguments = substitution;
      else if (typeof substitution == "function")
        $arguments = H.invokeOn(substitution, null, $arguments);
    }
    return $arguments;
  },
  areSubtypes: function(s, t) {
    var len, i;
    if (s == null || t == null)
      return true;
    len = s.length;
    for (i = 0; i < len; ++i)
      if (!H.isSubtype(s[i], t[i]))
        return false;
    return true;
  },
  computeSignature: function(signature, context, contextName) {
    return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
  },
  isSubtype: function(s, t) {
    var targetSignatureFunction, t1, typeOfS, t2, typeOfT, $name, substitution;
    if (s === t)
      return true;
    if (s == null || t == null)
      return true;
    if ("func" in t) {
      if (!("func" in s)) {
        if ("$is_" + H.S(t.func) in s)
          return true;
        targetSignatureFunction = s.$signature;
        if (targetSignatureFunction == null)
          return false;
        s = targetSignatureFunction.apply(s, null);
      }
      return H.isFunctionSubtype(s, t);
    }
    if (t.builtin$cls === "Function" && "func" in s)
      return true;
    t1 = typeof s === "object" && s !== null && s.constructor === Array;
    typeOfS = t1 ? s[0] : s;
    t2 = typeof t === "object" && t !== null && t.constructor === Array;
    typeOfT = t2 ? t[0] : t;
    $name = H.runtimeTypeToString(typeOfT, null);
    if (typeOfT !== typeOfS) {
      if (!("$is" + H.S($name) in typeOfS))
        return false;
      substitution = typeOfS["$as" + H.S(H.runtimeTypeToString(typeOfT, null))];
    } else
      substitution = null;
    if (!t1 && substitution == null || !t2)
      return true;
    t1 = t1 ? s.slice(1) : null;
    t2 = t2 ? t.slice(1) : null;
    return H.areSubtypes(H.substitute(substitution, t1), t2);
  },
  areAssignable: function(s, t, allowShorter) {
    var sLength, tLength, i, t1, t2;
    if (t == null && s == null)
      return true;
    if (t == null)
      return allowShorter;
    if (s == null)
      return false;
    sLength = s.length;
    tLength = t.length;
    if (allowShorter) {
      if (sLength < tLength)
        return false;
    } else if (sLength !== tLength)
      return false;
    for (i = 0; i < tLength; ++i) {
      t1 = s[i];
      t2 = t[i];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    return true;
  },
  areAssignableMaps: function(s, t) {
    var t1, names, i, $name, tType, sType;
    if (t == null)
      return true;
    if (s == null)
      return false;
    t1 = Object.getOwnPropertyNames(t);
    t1.fixed$length = init;
    names = t1;
    for (t1 = names.length, i = 0; i < t1; ++i) {
      $name = names[i];
      if (!Object.hasOwnProperty.call(s, $name))
        return false;
      tType = t[$name];
      sType = s[$name];
      if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
        return false;
    }
    return true;
  },
  isFunctionSubtype: function(s, t) {
    var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
    if (!("func" in s))
      return false;
    if ("void" in s) {
      if (!("void" in t) && "ret" in t)
        return false;
    } else if (!("void" in t)) {
      sReturnType = s.ret;
      tReturnType = t.ret;
      if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
        return false;
    }
    sParameterTypes = s.args;
    tParameterTypes = t.args;
    sOptionalParameterTypes = s.opt;
    tOptionalParameterTypes = t.opt;
    sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
    tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
    sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
    tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
    if (sParametersLen > tParametersLen)
      return false;
    if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
      return false;
    if (sParametersLen === tParametersLen) {
      if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
        return false;
      if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
        return false;
    } else {
      for (pos = 0; pos < sParametersLen; ++pos) {
        t1 = sParameterTypes[pos];
        t2 = tParameterTypes[pos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tOptionalParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
    }
    return H.areAssignableMaps(s.named, t.named);
  },
  invokeOn: function($function, receiver, $arguments) {
    return $function.apply(receiver, $arguments);
  },
  toStringForNativeObject: function(obj) {
    var t1 = $.getTagFunction;
    return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
  },
  hashCodeForNativeObject: function(object) {
    return H.Primitives_objectHashCode(object);
  },
  defineProperty: function(obj, property, value) {
    Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
  },
  lookupAndCacheInterceptor: function(obj) {
    var tag, record, interceptor, interceptorClass, mark, t1;
    tag = $.getTagFunction.call$1(obj);
    record = $.dispatchRecordsForInstanceTags[tag];
    if (record != null) {
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    interceptor = $.interceptorsForUncacheableTags[tag];
    if (interceptor != null)
      return interceptor;
    interceptorClass = init.interceptorsByTag[tag];
    if (interceptorClass == null) {
      tag = $.alternateTagFunction.call$2(obj, tag);
      if (tag != null) {
        record = $.dispatchRecordsForInstanceTags[tag];
        if (record != null) {
          Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
          return record.i;
        }
        interceptor = $.interceptorsForUncacheableTags[tag];
        if (interceptor != null)
          return interceptor;
        interceptorClass = init.interceptorsByTag[tag];
      }
    }
    if (interceptorClass == null)
      return;
    interceptor = interceptorClass.prototype;
    mark = tag[0];
    if (mark === "!") {
      record = H.makeLeafDispatchRecord(interceptor);
      $.dispatchRecordsForInstanceTags[tag] = record;
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    if (mark === "~") {
      $.interceptorsForUncacheableTags[tag] = interceptor;
      return interceptor;
    }
    if (mark === "-") {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    }
    if (mark === "+")
      return H.patchInteriorProto(obj, interceptor);
    if (mark === "*")
      throw H.wrapException(P.UnimplementedError$(tag));
    if (init.leafTags[tag] === true) {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    } else
      return H.patchInteriorProto(obj, interceptor);
  },
  patchInteriorProto: function(obj, interceptor) {
    var proto, record;
    proto = Object.getPrototypeOf(obj);
    record = J.makeDispatchRecord(interceptor, proto, null, null);
    Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return interceptor;
  },
  makeLeafDispatchRecord: function(interceptor) {
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  },
  makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
    var interceptor = interceptorClass.prototype;
    if (init.leafTags[tag] === true)
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    else
      return J.makeDispatchRecord(interceptor, proto, null, null);
  },
  initNativeDispatch: function() {
    if (true === $.initNativeDispatchFlag)
      return;
    $.initNativeDispatchFlag = true;
    H.initNativeDispatchContinue();
  },
  initNativeDispatchContinue: function() {
    var map, tags, fun, i, tag, proto, record, interceptorClass;
    $.dispatchRecordsForInstanceTags = Object.create(null);
    $.interceptorsForUncacheableTags = Object.create(null);
    H.initHooks();
    map = init.interceptorsByTag;
    tags = Object.getOwnPropertyNames(map);
    if (typeof window != "undefined") {
      window;
      fun = function() {
      };
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        proto = $.prototypeForTagFunction.call$1(tag);
        if (proto != null) {
          record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
          if (record != null) {
            Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            fun.prototype = proto;
          }
        }
      }
    }
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      if (/^[A-Za-z_]/.test(tag)) {
        interceptorClass = map[tag];
        map["!" + tag] = interceptorClass;
        map["~" + tag] = interceptorClass;
        map["-" + tag] = interceptorClass;
        map["+" + tag] = interceptorClass;
        map["*" + tag] = interceptorClass;
      }
    }
  },
  initHooks: function() {
    var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
    hooks = C.JS_CONST_aQP();
    hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_8ZY), hooks)))))));
    if (typeof dartNativeDispatchHooksTransformer != "undefined") {
      transformers = dartNativeDispatchHooksTransformer;
      if (typeof transformers == "function")
        transformers = [transformers];
      if (transformers.constructor == Array)
        for (i = 0; i < transformers.length; ++i) {
          transformer = transformers[i];
          if (typeof transformer == "function")
            hooks = transformer(hooks) || hooks;
        }
    }
    getTag = hooks.getTag;
    getUnknownTag = hooks.getUnknownTag;
    prototypeForTag = hooks.prototypeForTag;
    $.getTagFunction = new H.initHooks_closure(getTag);
    $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
    $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
  },
  applyHooksTransformer: function(transformer, hooks) {
    return transformer(hooks) || hooks;
  },
  stringReplaceAllUnchecked: function(receiver, from, to) {
    var t1, result, $length, i, t2;
    t1 = typeof to === "string";
    if (!t1)
      H.throwExpression(P.ArgumentError$(to));
    if (from === "")
      if (receiver === "")
        return to;
      else {
        result = P.StringBuffer$("");
        $length = receiver.length;
        result.write$1(to);
        for (i = 0; i < $length; ++i) {
          t2 = receiver[i];
          result._contents += t2;
          result._contents += t1 ? to : H.S(to);
        }
        return result._contents;
      }
    else
      return receiver.replace(new RegExp(from.replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), "\\$&"), 'g'), to.replace(/\$/g, "$$$$"));
  },
  JSInvocationMirror: {
    "^": "Object;__js_helper$_memberName,_internalName,_kind,_arguments,_namedArgumentNames,_namedIndices",
    get$memberName: function() {
      return this.__js_helper$_memberName;
    },
    get$positionalArguments: function() {
      var t1, argumentCount, list, index;
      if (this._kind === 1)
        return C.List_empty;
      t1 = this._arguments;
      argumentCount = t1.length - this._namedArgumentNames.length;
      if (argumentCount === 0)
        return C.List_empty;
      list = [];
      for (index = 0; index < argumentCount; ++index) {
        if (index >= t1.length)
          return H.ioore(t1, index);
        list.push(t1[index]);
      }
      list.immutable$list = true;
      list.fixed$length = true;
      return list;
    },
    get$namedArguments: function() {
      var t1, namedArgumentCount, t2, namedArgumentsStartIndex, map, i, t3, t4;
      if (this._kind !== 0)
        return P.LinkedHashMap_LinkedHashMap$_empty(P.Symbol, null);
      t1 = this._namedArgumentNames;
      namedArgumentCount = t1.length;
      t2 = this._arguments;
      namedArgumentsStartIndex = t2.length - namedArgumentCount;
      if (namedArgumentCount === 0)
        return P.LinkedHashMap_LinkedHashMap$_empty(P.Symbol, null);
      map = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol, null);
      for (i = 0; i < namedArgumentCount; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t3 = t1[i];
        t4 = namedArgumentsStartIndex + i;
        if (t4 < 0 || t4 >= t2.length)
          return H.ioore(t2, t4);
        map.$indexSet(0, new H.Symbol0(t3), t2[t4]);
      }
      return map;
    },
    static: {"^": "JSInvocationMirror_METHOD,JSInvocationMirror_GETTER,JSInvocationMirror_SETTER"}
  },
  ReflectionInfo: {
    "^": "Object;jsFunction,data>,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,cachedSortedIndices",
    parameterName$1: function(parameter) {
      var metadataIndex = this.data[parameter + this.optionalParameterCount + 3];
      return init.metadata[metadataIndex];
    },
    defaultValue$1: function(_, parameter) {
      var t1 = this.requiredParameterCount;
      if (typeof parameter !== "number")
        return parameter.$lt();
      if (parameter < t1)
        return;
      return this.data[3 + parameter - t1];
    },
    defaultValueInOrder$1: function(parameter) {
      var t1 = this.requiredParameterCount;
      if (parameter < t1)
        return;
      if (!this.areOptionalParametersNamed || this.optionalParameterCount === 1)
        return this.defaultValue$1(0, parameter);
      return this.defaultValue$1(0, this.sortedIndex$1(parameter - t1));
    },
    parameterNameInOrder$1: function(parameter) {
      var t1 = this.requiredParameterCount;
      if (parameter < t1)
        return;
      if (!this.areOptionalParametersNamed || this.optionalParameterCount === 1)
        return this.parameterName$1(parameter);
      return this.parameterName$1(this.sortedIndex$1(parameter - t1));
    },
    sortedIndex$1: function(unsortedIndex) {
      var t1, t2, positions, t3, i, index, compare;
      t1 = {};
      if (this.cachedSortedIndices == null) {
        t2 = this.optionalParameterCount;
        this.cachedSortedIndices = Array(t2);
        positions = P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.$int);
        for (t3 = this.requiredParameterCount, i = 0; i < t2; ++i) {
          index = t3 + i;
          positions.$indexSet(0, this.parameterName$1(index), index);
        }
        t1.index_0 = 0;
        t2 = positions.get$keys();
        t2 = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "IterableBase", 0));
        compare = P.Comparable_compare$closure();
        H.Sort__doSort(t2, 0, t2.length - 1, compare);
        H.IterableMixinWorkaround_forEach(t2, new H.ReflectionInfo_sortedIndex_closure(t1, this, positions));
      }
      t1 = this.cachedSortedIndices;
      if (unsortedIndex < 0 || unsortedIndex >= t1.length)
        return H.ioore(t1, unsortedIndex);
      return t1[unsortedIndex];
    },
    static: {"^": "ReflectionInfo_REQUIRED_PARAMETERS_INFO,ReflectionInfo_OPTIONAL_PARAMETERS_INFO,ReflectionInfo_FUNCTION_TYPE_INDEX,ReflectionInfo_FIRST_DEFAULT_ARGUMENT", ReflectionInfo_ReflectionInfo: function(jsFunction) {
        var data, requiredParametersInfo, optionalParametersInfo;
        data = jsFunction.$reflectionInfo;
        if (data == null)
          return;
        data.fixed$length = init;
        data = data;
        requiredParametersInfo = data[0];
        optionalParametersInfo = data[1];
        return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParametersInfo >> 1, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
      }}
  },
  ReflectionInfo_sortedIndex_closure: {
    "^": "Closure:41;box_0,this_1,positions_2",
    call$1: function($name) {
      var t1, t2, t3;
      t1 = this.this_1.cachedSortedIndices;
      t2 = this.box_0.index_0++;
      t3 = this.positions_2.$index(0, $name);
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      t1[t2] = t3;
    }
  },
  Primitives_functionNoSuchMethod_closure: {
    "^": "Closure:44;box_0,arguments_1,namedArgumentList_2",
    call$2: function($name, argument) {
      var t1 = this.box_0;
      t1.names_1 = t1.names_1 + "$" + H.S($name);
      this.namedArgumentList_2.push($name);
      this.arguments_1.push(argument);
      ++t1.argumentCount_0;
    }
  },
  Primitives_applyFunction_closure: {
    "^": "Closure:44;box_0,defaultArguments_1",
    call$2: function(parameter, value) {
      var t1 = this.defaultArguments_1;
      if (t1.containsKey$1(parameter))
        t1.$indexSet(0, parameter, value);
      else
        this.box_0.bad_0 = true;
    }
  },
  TypeErrorDecoder: {
    "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
    matchTypeError$1: function(message) {
      var match, result, t1;
      match = new RegExp(this._pattern).exec(message);
      if (match == null)
        return;
      result = {};
      t1 = this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    },
    static: {"^": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern", TypeErrorDecoder_extractPattern: function(message) {
        var match, $arguments, argumentsExpr, expr, method, receiver;
        message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
        match = message.match(/\\\$[a-zA-Z]+\\\$/g);
        if (match == null)
          match = [];
        $arguments = match.indexOf("\\$arguments\\$");
        argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
        expr = match.indexOf("\\$expr\\$");
        method = match.indexOf("\\$method\\$");
        receiver = match.indexOf("\\$receiver\\$");
        return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
      }, TypeErrorDecoder_provokeCallErrorOn: function(expression) {
        return function($expr$) {
          var $argumentsExpr$ = '$arguments$';
          try {
            $expr$.$method$($argumentsExpr$);
          } catch (e) {
            return e.message;
          }

        }(expression);
      }, TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
        return function($expr$) {
          try {
            $expr$.$method$;
          } catch (e) {
            return e.message;
          }

        }(expression);
      }}
  },
  NullError: {
    "^": "Error;_message,_method",
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NullError: " + H.S(this._message);
      return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
    },
    $isError: true
  },
  JsNoSuchMethodError: {
    "^": "Error;_message,_method,_receiver",
    toString$0: function(_) {
      var t1, t2;
      t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      t2 = this._receiver;
      if (t2 == null)
        return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" (" + H.S(this._message) + ")";
      return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" on \"" + H.S(t2) + "\" (" + H.S(this._message) + ")";
    },
    $isError: true,
    static: {JsNoSuchMethodError$: function(_message, match) {
        var t1, t2;
        t1 = match == null;
        t2 = t1 ? null : match.method;
        t1 = t1 ? null : match.receiver;
        return new H.JsNoSuchMethodError(_message, t2, t1);
      }}
  },
  UnknownJsTypeError: {
    "^": "Error;_message",
    toString$0: function(_) {
      var t1 = this._message;
      return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
    }
  },
  unwrapException_saveStackTrace: {
    "^": "Closure:31;ex_0",
    call$1: function(error) {
      if (!!J.getInterceptor(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex_0;
      return error;
    }
  },
  _StackTrace: {
    "^": "Object;_exception,_trace",
    toString$0: function(_) {
      var t1, trace;
      t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = typeof t1 === "object" ? t1.stack : null;
      t1 = trace == null ? "" : trace;
      this._trace = t1;
      return t1;
    }
  },
  invokeClosure_closure: {
    "^": "Closure:38;closure_0",
    call$0: function() {
      return this.closure_0.call$0();
    }
  },
  invokeClosure_closure0: {
    "^": "Closure:38;closure_1,arg1_2",
    call$0: function() {
      return this.closure_1.call$1(this.arg1_2);
    }
  },
  invokeClosure_closure1: {
    "^": "Closure:38;closure_3,arg1_4,arg2_5",
    call$0: function() {
      return this.closure_3.call$2(this.arg1_4, this.arg2_5);
    }
  },
  invokeClosure_closure2: {
    "^": "Closure:38;closure_6,arg1_7,arg2_8,arg3_9",
    call$0: function() {
      return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
    }
  },
  invokeClosure_closure3: {
    "^": "Closure:38;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
    call$0: function() {
      return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
    }
  },
  Closure: {
    "^": "Object;",
    toString$0: function(_) {
      return "Closure";
    },
    get$$call: function() {
      return this;
    }
  },
  TearOffClosure: {
    "^": "Closure;"
  },
  BoundClosure: {
    "^": "TearOffClosure;_self,_target,_receiver,__js_helper$_name",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$isBoundClosure)
        return false;
      return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var t1, receiverHashCode;
      t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return J.$xor$n(receiverHashCode, H.Primitives_objectHashCode(this._target));
    },
    $isBoundClosure: true,
    static: {"^": "BoundClosure_selfFieldNameCache,BoundClosure_receiverFieldNameCache", BoundClosure_selfOf: function(closure) {
        return closure._self;
      }, BoundClosure_receiverOf: function(closure) {
        return closure._receiver;
      }, BoundClosure_selfFieldName: function() {
        var t1 = $.BoundClosure_selfFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t1;
        }
        return t1;
      }, BoundClosure_computeFieldNamed: function(fieldName) {
        var template, t1, names, i, $name;
        template = new H.BoundClosure("self", "target", "receiver", "name");
        t1 = Object.getOwnPropertyNames(template);
        t1.fixed$length = init;
        names = t1;
        for (t1 = names.length, i = 0; i < t1; ++i) {
          $name = names[i];
          if (template[$name] === fieldName)
            return $name;
        }
      }}
  },
  RuntimeError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    },
    static: {RuntimeError$: function(message) {
        return new H.RuntimeError(message);
      }}
  },
  RuntimeType: {
    "^": "Object;"
  },
  RuntimeFunctionType: {
    "^": "RuntimeType;returnType,parameterTypes,optionalParameterTypes,namedParameters",
    _isTest$1: function(expression) {
      var functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
      return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, this.toRti$0());
    },
    _extractFunctionTypeObjectFrom$1: function(o) {
      var interceptor = J.getInterceptor(o);
      return "$signature" in interceptor ? interceptor.$signature() : null;
    },
    toRti$0: function() {
      var result, t1, t2, namedRti, keys, i, $name;
      result = {func: "dynafunc"};
      t1 = this.returnType;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isVoidRuntimeType)
        result.void = true;
      else if (!t2.$isDynamicRuntimeType)
        result.ret = t1.toRti$0();
      t1 = this.parameterTypes;
      if (t1 != null && t1.length !== 0)
        result.args = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0)
        result.opt = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.namedParameters;
      if (t1 != null) {
        namedRti = {};
        keys = H.extractKeys(t1);
        for (t2 = keys.length, i = 0; i < t2; ++i) {
          $name = keys[i];
          namedRti[$name] = t1[$name].toRti$0();
        }
        result.named = namedRti;
      }
      return result;
    },
    toString$0: function(_) {
      var t1, t2, result, needsComma, i, type, keys, $name;
      t1 = this.parameterTypes;
      if (t1 != null)
        for (t2 = t1.length, result = "(", needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
      else {
        result = "(";
        needsComma = false;
      }
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0) {
        result = (needsComma ? result + ", " : result) + "[";
        for (t2 = t1.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
        result += "]";
      } else {
        t1 = this.namedParameters;
        if (t1 != null) {
          result = (needsComma ? result + ", " : result) + "{";
          keys = H.extractKeys(t1);
          for (t2 = keys.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            $name = keys[i];
            if (needsComma)
              result += ", ";
            result += H.S(t1[$name].toRti$0()) + " " + $name;
          }
          result += "}";
        }
      }
      return result + (") -> " + H.S(this.returnType));
    },
    static: {"^": "RuntimeFunctionType_inAssert", RuntimeFunctionType_listToRti: function(list) {
        var result, t1, i;
        list = list;
        result = [];
        for (t1 = list.length, i = 0; i < t1; ++i)
          result.push(list[i].toRti$0());
        return result;
      }}
  },
  DynamicRuntimeType: {
    "^": "RuntimeType;",
    toString$0: function(_) {
      return "dynamic";
    },
    toRti$0: function() {
      return;
    },
    $isDynamicRuntimeType: true
  },
  TypeImpl: {
    "^": "Object;_typeName,_unmangledName",
    toString$0: function(_) {
      var t1, unmangledName;
      t1 = this._unmangledName;
      if (t1 != null)
        return t1;
      unmangledName = this._typeName.replace(/[^<,> ]+/g, function(m) {
        return init.mangledGlobalNames[m] || m;
      });
      this._unmangledName = unmangledName;
      return unmangledName;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this._typeName);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isTypeImpl && J.$eq(this._typeName, other._typeName);
    },
    $isTypeImpl: true
  },
  initHooks_closure: {
    "^": "Closure:31;getTag_0",
    call$1: function(o) {
      return this.getTag_0(o);
    }
  },
  initHooks_closure0: {
    "^": "Closure:45;getUnknownTag_1",
    call$2: function(o, tag) {
      return this.getUnknownTag_1(o, tag);
    }
  },
  initHooks_closure1: {
    "^": "Closure:41;prototypeForTag_2",
    call$1: function(tag) {
      return this.prototypeForTag_2(tag);
    }
  },
  JSSyntaxRegExp: {
    "^": "Object;pattern,_nativeRegExp,_nativeGlobalRegExp,_nativeAnchoredRegExp",
    static: {JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, global) {
        var m, i, g, regexp, errorMessage;
        m = multiLine ? "m" : "";
        i = caseSensitive ? "" : "i";
        g = global ? "g" : "";
        regexp = function() {
          try {
            return new RegExp(source, m + i + g);
          } catch (e) {
            return e;
          }

        }();
        if (regexp instanceof RegExp)
          return regexp;
        errorMessage = String(regexp);
        throw H.wrapException(P.FormatException$("Illegal RegExp pattern: " + source + ", " + errorMessage));
      }}
  }
}],
["canvas_basics", "canvas_basics.dart", , A, {
  "^": "",
  CanvasBasics_register: function() {
    $.get$Sparkflow_registry().createRegistry$2("canvas", new A.CanvasBasics_register_closure());
  },
  main: [function() {
    var board, canvas;
    board = window.document.querySelector("#stage");
    P.print("canvas " + J.toString$0(board));
    A.CanvasBasics_register();
    canvas = S.Network$("basic test", null);
    canvas.use$2("canvas/draw/canvas", "stage");
    canvas.use$2("canvas/draw/rectangle", "rect");
    canvas.ensureBinding$4("stage", "io:out", "rect", "io:canvas");
    canvas.schedulePacket$3("stage", "io:in", board);
    canvas.schedulePacket$3("rect", "io:coords", ["#C02929", 20, 20, 200, 300]);
    canvas.boot$0().then$1(N.Funcs_tagDefer(N.Funcs_identity$closure(), 1, null).call$1("booting canvas test"));
  }, "call$0", "main$closure", 0, 0, 12],
  CanvasBasics_register_closure: {
    "^": "Closure:31;",
    call$1: function(r) {
      r.addMutation$2("draw/canvas", new A.CanvasBasics_register__closure());
      r.addMutation$2("draw/rectangle", new A.CanvasBasics_register__closure0());
    }
  },
  CanvasBasics_register__closure: {
    "^": "Closure:31;",
    call$1: [function(shell) {
      var t1 = {};
      t1.canvas_0 = null;
      shell.makeInport$1("io:in");
      shell.makeOutport$1("io:out");
      J.port$1$x(shell, "io:in").forceCondition$1(new A.CanvasBasics_register___closure4());
      shell.tapData$2("io:in", new A.CanvasBasics_register___closure5(t1, shell));
    }, "call$1", null, 2, 0, null, 46, "call"]
  },
  CanvasBasics_register___closure4: {
    "^": "Closure:31;",
    call$1: [function(n) {
      return !!J.getInterceptor(n).$isCanvasElement;
    }, "call$1", null, 2, 0, null, 32, "call"]
  },
  CanvasBasics_register___closure5: {
    "^": "Closure:31;box_0,shell_2",
    call$1: [function(n) {
      var canvas, t1;
      canvas = J.get$data$x(n);
      this.box_0.canvas_0 = canvas;
      t1 = this.shell_2;
      J.send$2$x(t1, "io:out", canvas);
      t1.endStream$1("io:out");
    }, "call$1", null, 2, 0, null, 32, "call"]
  },
  CanvasBasics_register__closure0: {
    "^": "Closure:31;",
    call$1: [function(shell) {
      var t1, t2;
      t1 = {};
      t1.canvas_1 = null;
      t1.context_2 = null;
      shell.makeInport$1("io:canvas");
      shell.makeInport$1("io:coords");
      t2 = J.getInterceptor$x(shell);
      t2.port$1(shell, "io:canvas").forceCondition$1(new A.CanvasBasics_register___closure());
      t2.port$1(shell, "io:coords").forceCondition$1(new A.CanvasBasics_register___closure0());
      t2.port$1(shell, "io:coords").forceCondition$1(new A.CanvasBasics_register___closure1());
      J.pause$0$x(t2.port$1(shell, "io:coords"));
      shell.tapData$2("io:canvas", new A.CanvasBasics_register___closure2(t1, shell));
      shell.tapData$2("io:coords", new A.CanvasBasics_register___closure3(t1));
    }, "call$1", null, 2, 0, null, 46, "call"]
  },
  CanvasBasics_register___closure: {
    "^": "Closure:31;",
    call$1: [function(n) {
      return !!J.getInterceptor(n).$isCanvasElement;
    }, "call$1", null, 2, 0, null, 32, "call"]
  },
  CanvasBasics_register___closure0: {
    "^": "Closure:31;",
    call$1: [function(n) {
      return !!J.getInterceptor(n).$isList;
    }, "call$1", null, 2, 0, null, 32, "call"]
  },
  CanvasBasics_register___closure1: {
    "^": "Closure:31;",
    call$1: [function(n) {
      if (J.$lt$n(J.get$length$asx(n), 5))
        return false;
      return true;
    }, "call$1", null, 2, 0, null, 32, "call"]
  },
  CanvasBasics_register___closure2: {
    "^": "Closure:31;box_1,shell_3",
    call$1: [function(n) {
      var canvas, t1;
      canvas = J.get$data$x(n);
      t1 = this.box_1;
      t1.canvas_1 = canvas;
      t1.context_2 = J.get$context2D$x(canvas);
      J.port$1$x(this.shell_3, "io:coords").resume$0();
    }, "call$1", null, 2, 0, null, 32, "call"]
  },
  CanvasBasics_register___closure3: {
    "^": "Closure:31;box_1",
    call$1: [function(n) {
      var cd, t1, t2;
      P.print("got coord " + H.S(n));
      cd = J.get$data$x(n);
      t1 = this.box_1;
      t1.context_2.save();
      t2 = J.getInterceptor$asx(cd);
      t1.context_2.fillStyle = t2.$index(cd, 0);
      t1.context_2.fillRect(t2.$index(cd, 1), t2.$index(cd, 2), t2.$index(cd, 3), t2.$index(cd, 4));
      t1.context_2.restore();
    }, "call$1", null, 2, 0, null, 32, "call"]
  }
},
1],
["dart._internal", "dart:_internal", , H, {
  "^": "",
  IterableMixinWorkaround_forEach: function(iterable, f) {
    var t1;
    for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
      f.call$1(t1._current);
  },
  IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
    var $length;
    if (start < 0 || start > list.length)
      H.throwExpression(P.RangeError$range(start, 0, list.length));
    if (end < start || end > list.length)
      H.throwExpression(P.RangeError$range(end, start, list.length));
    $length = end - start;
    if ($length === 0)
      return;
    if (skipCount < 0)
      throw H.wrapException(P.ArgumentError$(skipCount));
    if (skipCount + $length > from.length)
      throw H.wrapException(H.IterableElementError_tooFew());
    H.Lists_copy(from, skipCount, list, start, $length);
  },
  IterableElementError_noElement: function() {
    return new P.StateError("No element");
  },
  IterableElementError_tooFew: function() {
    return new P.StateError("Too few elements");
  },
  Lists_copy: function(src, srcStart, dst, dstStart, count) {
    var i, j, t1, t2;
    if (srcStart < dstStart)
      for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length; i >= srcStart; --i, --j) {
        if (i < 0 || i >= t1)
          return H.ioore(src, i);
        C.JSArray_methods.$indexSet(dst, j, src[i]);
      }
    else
      for (t1 = srcStart + count, t2 = src.length, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
        if (i < 0 || i >= t2)
          return H.ioore(src, i);
        C.JSArray_methods.$indexSet(dst, j, src[i]);
      }
  },
  Sort__doSort: function(a, left, right, compare) {
    if (right - left <= 32)
      H.Sort__insertionSort(a, left, right, compare);
    else
      H.Sort__dualPivotQuicksort(a, left, right, compare);
  },
  Sort__insertionSort: function(a, left, right, compare) {
    var i, t1, el, j, j0;
    for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
      el = t1.$index(a, i);
      j = i;
      while (true) {
        if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
          break;
        j0 = j - 1;
        t1.$indexSet(a, j, t1.$index(a, j0));
        j = j0;
      }
      t1.$indexSet(a, j, el);
    }
  },
  Sort__dualPivotQuicksort: function(a, left, right, compare) {
    var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, great0, less0, pivots_are_equal;
    sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
    index1 = left + sixth;
    index5 = right - sixth;
    index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
    index2 = index3 - sixth;
    index4 = index3 + sixth;
    t1 = J.getInterceptor$asx(a);
    el1 = t1.$index(a, index1);
    el2 = t1.$index(a, index2);
    el3 = t1.$index(a, index3);
    el4 = t1.$index(a, index4);
    el5 = t1.$index(a, index5);
    if (J.$gt$n(compare.call$2(el1, el2), 0)) {
      t0 = el2;
      el2 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el3), 0)) {
      t0 = el3;
      el3 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el4), 0)) {
      t0 = el4;
      el4 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el3, el4), 0)) {
      t0 = el4;
      el4 = el3;
      el3 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el5), 0)) {
      t0 = el5;
      el5 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    t1.$indexSet(a, index1, el1);
    t1.$indexSet(a, index3, el3);
    t1.$indexSet(a, index5, el5);
    t1.$indexSet(a, index2, t1.$index(a, left));
    t1.$indexSet(a, index4, t1.$index(a, right));
    less = left + 1;
    great = right - 1;
    if (J.$eq(compare.call$2(el2, el4), 0)) {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        comp = compare.call$2(ak, el2);
        t2 = J.getInterceptor(comp);
        if (t2.$eq(comp, 0))
          continue;
        if (t2.$lt(comp, 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else
          for (; true;) {
            comp = compare.call$2(t1.$index(a, great), el2);
            t2 = J.getInterceptor$n(comp);
            if (t2.$gt(comp, 0)) {
              --great;
              continue;
            } else {
              great0 = great - 1;
              if (t2.$lt(comp, 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
                break;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                break;
              }
            }
          }
      }
      pivots_are_equal = true;
    } else {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$lt$n(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$gt$n(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$gt$n(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      pivots_are_equal = false;
    }
    t2 = less - 1;
    t1.$indexSet(a, left, t1.$index(a, t2));
    t1.$indexSet(a, t2, el2);
    t2 = great + 1;
    t1.$indexSet(a, right, t1.$index(a, t2));
    t1.$indexSet(a, t2, el4);
    H.Sort__doSort(a, left, less - 2, compare);
    H.Sort__doSort(a, great + 2, right, compare);
    if (pivots_are_equal)
      return;
    if (less < index1 && great > index5) {
      for (; J.$eq(compare.call$2(t1.$index(a, less), el2), 0);)
        ++less;
      for (; J.$eq(compare.call$2(t1.$index(a, great), el4), 0);)
        --great;
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$eq(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$eq(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$eq(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      H.Sort__doSort(a, less, great, compare);
    } else
      H.Sort__doSort(a, less, great, compare);
  },
  ListIterator: {
    "^": "Object;_iterable,_length,_index,_current",
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t1, t2, $length, t3;
      t1 = this._iterable;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      if (this._length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = this._index;
      if (t3 >= $length) {
        this._current = null;
        return false;
      }
      this._current = t2.elementAt$1(t1, t3);
      ++this._index;
      return true;
    }
  },
  MappedIterable: {
    "^": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = this._iterable;
      t1 = new H.MappedIterator(null, t1.get$iterator(t1), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$length: function(_) {
      var t1 = this._iterable;
      return t1.get$length(t1);
    },
    get$isEmpty: function(_) {
      var t1 = this._iterable;
      return t1.get$isEmpty(t1);
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    static: {MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
        return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(iterable, $function), [$S, $T]);
      }}
  },
  EfficientLengthMappedIterable: {
    "^": "MappedIterable;_iterable,_f"
  },
  MappedIterator: {
    "^": "Iterator;_current,_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      var t1 = this._iterator;
      if (t1.moveNext$0()) {
        this._current = this._f$1(t1.get$current());
        return true;
      }
      this._current = null;
      return false;
    },
    get$current: function() {
      return this._current;
    }
  },
  FixedLengthListMixin: {
    "^": "Object;",
    set$length: function(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    removeAt$1: function(receiver, index) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    }
  },
  Symbol0: {
    "^": "Object;_name<",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isSymbol0 && J.$eq(this._name, other._name);
    },
    get$hashCode: function(_) {
      var t1 = J.get$hashCode$(this._name);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 536870911 & 664597 * t1;
    },
    toString$0: function(_) {
      return "Symbol(\"" + H.S(this._name) + "\")";
    },
    $isSymbol0: true,
    $isSymbol: true,
    static: {"^": "Symbol_reservedWordRE,Symbol_publicIdentifierRE,Symbol_identifierRE,Symbol_operatorRE,Symbol_publicSymbolPattern,Symbol_symbolPattern", Symbol_validatePublicSymbol: function($name) {
        var t1, t2;
        t1 = J.getInterceptor$asx($name);
        if (t1.get$isEmpty($name) !== true) {
          t2 = $.get$Symbol_publicSymbolPattern()._nativeRegExp;
          if (typeof $name !== "string")
            H.throwExpression(P.ArgumentError$($name));
          t2 = t2.test($name);
        } else
          t2 = true;
        if (t2)
          return $name;
        if (t1.startsWith$1($name, "_"))
          throw H.wrapException(P.ArgumentError$("\"" + H.S($name) + "\" is a private identifier"));
        throw H.wrapException(P.ArgumentError$("\"" + H.S($name) + "\" is not a valid (qualified) symbol name"));
      }}
  }
}],
["dart._js_names", "dart:_js_names", , H, {
  "^": "",
  extractKeys: function(victim) {
    var t1 = H.setRuntimeTypeInfo(function(victim, hasOwnProperty) {
      var result = [];
      for (var key in victim) {
        if (hasOwnProperty.call(victim, key))
          result.push(key);
      }
      return result;
    }(victim, Object.prototype.hasOwnProperty), [null]);
    t1.fixed$length = init;
    return t1;
  }
}],
["dart.async", "dart:async", , P, {
  "^": "",
  _AsyncRun__initializeScheduleImmediate: function() {
    if ($.get$globalThis().scheduleImmediate != null)
      return P._AsyncRun__scheduleImmediateJsOverride$closure();
    return P._AsyncRun__scheduleImmediateWithTimer$closure();
  },
  _AsyncRun__scheduleImmediateJsOverride: [function(callback) {
    ++init.globalState.topEventLoop._activeJsAsyncCount;
    $.get$globalThis().scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(callback), 0));
  }, "call$1", "_AsyncRun__scheduleImmediateJsOverride$closure", 2, 0, 13],
  _AsyncRun__scheduleImmediateWithTimer: [function(callback) {
    P._createTimer(C.Duration_0, callback);
  }, "call$1", "_AsyncRun__scheduleImmediateWithTimer$closure", 2, 0, 13],
  _registerErrorHandler: function(errorHandler, zone) {
    var t1 = H.getDynamicRuntimeType();
    t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
    if (t1) {
      zone.toString;
      return errorHandler;
    } else {
      zone.toString;
      return errorHandler;
    }
  },
  Future_wait: function(futures, eagerError) {
    var t1, t2, t3, values, completer;
    t1 = {};
    t1.completer_0 = null;
    t1.values_1 = null;
    t1.remaining_2 = 0;
    t1.error_3 = null;
    t1.stackTrace_4 = null;
    t2 = new P.Future_wait_handleError(t1, eagerError);
    for (t3 = new H.ListIterator(futures, futures.length, 0, null); t3.moveNext$0();)
      t3._current.then$2$onError(new P.Future_wait_closure(t1, eagerError, t1.remaining_2++), t2);
    t2 = t1.remaining_2;
    if (t2 === 0)
      return P._Future$immediate(C.List_empty, null);
    values = Array(t2);
    values.fixed$length = init;
    t1.values_1 = values;
    t2 = P.List;
    completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t2)), [t2]);
    t1.completer_0 = completer;
    return completer.future;
  },
  _asyncRunCallbackLoop: function() {
    var entry = $._nextCallback;
    for (; entry != null;) {
      entry.callback$0();
      entry = entry.next;
      $._nextCallback = entry;
    }
    $._lastCallback = null;
  },
  _asyncRunCallback: [function() {
    var exception;
    try {
      P._asyncRunCallbackLoop();
    } catch (exception) {
      H.unwrapException(exception);
      $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._asyncRunCallback$closure());
      $._nextCallback = $._nextCallback.next;
      throw exception;
    }

  }, "call$0", "_asyncRunCallback$closure", 0, 0, 12],
  _scheduleAsyncCallback: function(callback) {
    var t1, t2;
    t1 = $._lastCallback;
    if (t1 == null) {
      t1 = new P._AsyncCallbackEntry(callback, null);
      $._lastCallback = t1;
      $._nextCallback = t1;
      $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._asyncRunCallback$closure());
    } else {
      t2 = new P._AsyncCallbackEntry(callback, null);
      t1.next = t2;
      $._lastCallback = t2;
    }
  },
  scheduleMicrotask: function(callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, callback);
      return;
    }
    P._rootScheduleMicrotask(t1, null, t1, t1.bindCallback$2$runGuarded(callback, true));
  },
  StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
    return sync ? H.setRuntimeTypeInfo(new P._SyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null), [$T]) : H.setRuntimeTypeInfo(new P._AsyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null), [$T]);
  },
  _runGuarded: function(notificationHandler) {
    var result, e, s, exception, t1;
    if (notificationHandler == null)
      return;
    try {
      result = notificationHandler.call$0();
      if (!!J.getInterceptor(result).$isFuture)
        return result;
      return;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      t1 = $.Zone__current;
      t1.toString;
      P._rootHandleUncaughtError(t1, null, t1, e, s);
    }

  },
  _nullDataHandler: [function(value) {
  }, "call$1", "_nullDataHandler$closure", 2, 0, 14, 15],
  _nullErrorHandler: [function(error, stackTrace) {
    var t1 = $.Zone__current;
    t1.toString;
    P._rootHandleUncaughtError(t1, null, t1, error, stackTrace);
  }, function(error) {
    return P._nullErrorHandler(error, null);
  }, null, "call$2", "call$1", "_nullErrorHandler$closure", 2, 2, 16, 17, 18, 19],
  _nullDoneHandler: [function() {
  }, "call$0", "_nullDoneHandler$closure", 0, 0, 12],
  _runUserCode: function(userCode, onSuccess, onError) {
    var e, s, exception, t1;
    try {
      onSuccess.call$1(userCode.call$0());
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      onError.call$2(e, s);
    }

  },
  _cancelAndError: function(subscription, future, error, stackTrace) {
    var cancelFuture = subscription.cancel$0();
    if (!!J.getInterceptor(cancelFuture).$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
    else
      future._completeError$2(error, stackTrace);
  },
  _cancelAndErrorClosure: function(subscription, future) {
    return new P._cancelAndErrorClosure_closure(subscription, future);
  },
  _cancelAndValue: function(subscription, future, value) {
    var cancelFuture = subscription.cancel$0();
    if (!!J.getInterceptor(cancelFuture).$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
    else
      future._complete$1(value);
  },
  Timer_Timer: function(duration, callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      return P._rootCreateTimer(t1, null, t1, duration, callback);
    }
    return P._rootCreateTimer(t1, null, t1, duration, t1.bindCallback$2$runGuarded(callback, true));
  },
  _createTimer: function(duration, callback) {
    var milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
    return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
  },
  Zone__enter: function(zone) {
    var previous = $.Zone__current;
    $.Zone__current = zone;
    return previous;
  },
  _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
    P._rootRun($self, null, $self, new P._rootHandleUncaughtError_closure(error, stackTrace));
  },
  _rootRun: function($self, $parent, zone, f) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$0();
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$0();
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunUnary: function($self, $parent, zone, f, arg) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$1(arg);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$1(arg);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunBinary: function($self, $parent, zone, f, arg1, arg2) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$2(arg1, arg2);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$2(arg1, arg2);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootScheduleMicrotask: function($self, $parent, zone, f) {
    P._scheduleAsyncCallback(C.C__RootZone !== zone ? zone.bindCallback$1(f) : f);
  },
  _rootCreateTimer: function($self, $parent, zone, duration, callback) {
    return P._createTimer(duration, C.C__RootZone !== zone ? zone.bindCallback$1(callback) : callback);
  },
  _AsyncRun__scheduleImmediateJsOverride_internalCallback: {
    "^": "Closure:38;callback_0",
    call$0: [function() {
      H.leaveJsAsync();
      this.callback_0.call$0();
    }, "call$0", null, 0, 0, null, "call"]
  },
  _AsyncError: {
    "^": "Object;error>,stackTrace<",
    $isError: true
  },
  Future: {
    "^": "Object;",
    $isFuture: true
  },
  Future_wait_handleError: {
    "^": "Closure:43;box_0,eagerError_1",
    call$2: [function(theError, theStackTrace) {
      var t1, t2, t3;
      t1 = this.box_0;
      t2 = t1.values_1;
      t1.values_1 = null;
      t3 = --t1.remaining_2;
      if (t2 != null)
        if (t3 === 0 || this.eagerError_1)
          t1.completer_0.completeError$2(theError, theStackTrace);
        else {
          t1.error_3 = theError;
          t1.stackTrace_4 = theStackTrace;
        }
      else if (t3 === 0 && !this.eagerError_1)
        t1.completer_0.completeError$2(t1.error_3, t1.stackTrace_4);
    }, "call$2", null, 4, 0, null, 47, 48, "call"]
  },
  Future_wait_closure: {
    "^": "Closure:49;box_0,eagerError_2,pos_3",
    call$1: [function(value) {
      var t1, t2, t3, t4;
      t1 = this.box_0;
      t2 = --t1.remaining_2;
      t3 = t1.values_1;
      if (t3 != null) {
        t4 = this.pos_3;
        if (t4 < 0 || t4 >= t3.length)
          return H.ioore(t3, t4);
        t3[t4] = value;
        if (t2 === 0) {
          t1 = t1.completer_0.future;
          if (t1._state !== 0)
            H.throwExpression(P.StateError$("Future already completed"));
          t1._asyncComplete$1(t3);
        }
      } else if (t2 === 0 && !this.eagerError_2)
        t1.completer_0.completeError$2(t1.error_3, t1.stackTrace_4);
    }, "call$1", null, 2, 0, null, 15, "call"]
  },
  _Completer: {
    "^": "Object;"
  },
  _AsyncCompleter: {
    "^": "_Completer;future",
    complete$1: function(_, value) {
      var t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._asyncComplete$1(value);
    },
    completeError$2: function(error, stackTrace) {
      var t1;
      if (error == null)
        throw H.wrapException(P.ArgumentError$("Error must not be null"));
      t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._asyncCompleteError$2(error, stackTrace);
    },
    completeError$1: function(error) {
      return this.completeError$2(error, null);
    }
  },
  _Future: {
    "^": "Object;_state,_zone<,_resultOrListeners,_nextListener@,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
    get$_isComplete: function() {
      return this._state >= 4;
    },
    get$_hasValue: function() {
      return this._state === 4;
    },
    get$_hasError: function() {
      return this._state === 8;
    },
    set$_isChained: function(value) {
      if (value)
        this._state = 2;
      else
        this._state = 0;
    },
    get$_onValue: function() {
      return this._state === 2 ? null : this._onValueCallback;
    },
    get$_errorTest: function() {
      return this._state === 2 ? null : this._errorTestCallback;
    },
    get$_onError: function() {
      return this._state === 2 ? null : this._onErrorCallback;
    },
    get$_whenCompleteAction: function() {
      return this._state === 2 ? null : this._whenCompleteActionCallback;
    },
    then$2$onError: function(f, onError) {
      var t1, result;
      t1 = $.Zone__current;
      t1.toString;
      result = H.setRuntimeTypeInfo(new P._Future(0, t1, null, null, f, null, P._registerErrorHandler(onError, t1), null), [null]);
      this._addListener$1(result);
      return result;
    },
    then$1: function(f) {
      return this.then$2$onError(f, null);
    },
    catchError$2$test: function(onError, test) {
      var t1, t2, result;
      t1 = $.Zone__current;
      t2 = P._registerErrorHandler(onError, t1);
      $.Zone__current.toString;
      result = H.setRuntimeTypeInfo(new P._Future(0, t1, null, null, null, test, t2, null), [null]);
      this._addListener$1(result);
      return result;
    },
    catchError$1: function(onError) {
      return this.catchError$2$test(onError, null);
    },
    whenComplete$1: function(action) {
      var t1, result;
      t1 = $.Zone__current;
      t1.toString;
      result = new P._Future(0, t1, null, null, null, null, null, action);
      result.$builtinTypeInfo = this.$builtinTypeInfo;
      this._addListener$1(result);
      return result;
    },
    get$_value: function() {
      return this._resultOrListeners;
    },
    get$_error: function() {
      return this._resultOrListeners;
    },
    _setValue$1: function(value) {
      this._state = 4;
      this._resultOrListeners = value;
    },
    _setError$2: function(error, stackTrace) {
      this._state = 8;
      this._resultOrListeners = new P._AsyncError(error, stackTrace);
    },
    _addListener$1: function(listener) {
      var t1;
      if (this._state >= 4) {
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(t1, null, t1, new P._Future__addListener_closure(this, listener));
      } else {
        listener.set$_nextListener(this._resultOrListeners);
        this._resultOrListeners = listener;
      }
    },
    _removeListeners$0: function() {
      var current, prev, next;
      current = this._resultOrListeners;
      this._resultOrListeners = null;
      for (prev = null; current != null; prev = current, current = next) {
        next = current.get$_nextListener();
        current.set$_nextListener(prev);
      }
      return prev;
    },
    _complete$1: function(value) {
      var t1, listeners;
      t1 = J.getInterceptor(value);
      if (!!t1.$isFuture)
        if (!!t1.$is_Future)
          P._Future__chainCoreFuture(value, this);
        else
          P._Future__chainForeignFuture(value, this);
      else {
        listeners = this._removeListeners$0();
        this._setValue$1(value);
        P._Future__propagateToListeners(this, listeners);
      }
    },
    _completeWithValue$1: function(value) {
      var listeners = this._removeListeners$0();
      this._setValue$1(value);
      P._Future__propagateToListeners(this, listeners);
    },
    _completeError$2: [function(error, stackTrace) {
      var listeners = this._removeListeners$0();
      this._setError$2(error, stackTrace);
      P._Future__propagateToListeners(this, listeners);
    }, function(error) {
      return this._completeError$2(error, null);
    }, "_completeError$1", "call$2", "call$1", "get$_completeError", 2, 2, 16, 17, 18, 19],
    _asyncComplete$1: function(value) {
      var t1;
      if (value == null)
        ;
      else {
        t1 = J.getInterceptor(value);
        if (!!t1.$isFuture) {
          if (!!t1.$is_Future) {
            t1 = value._state;
            if (t1 >= 4 && t1 === 8) {
              if (this._state !== 0)
                H.throwExpression(P.StateError$("Future already completed"));
              this._state = 1;
              t1 = this._zone;
              t1.toString;
              P._rootScheduleMicrotask(t1, null, t1, new P._Future__asyncComplete_closure(this, value));
            } else
              P._Future__chainCoreFuture(value, this);
          } else
            P._Future__chainForeignFuture(value, this);
          return;
        }
      }
      if (this._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      this._state = 1;
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, new P._Future__asyncComplete_closure0(this, value));
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      var t1;
      if (this._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      this._state = 1;
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, new P._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    _async$_Future$immediate$1: function(value, $T) {
      this._asyncComplete$1(value);
    },
    _async$_Future$immediateError$2: function(error, stackTrace, $T) {
      this._asyncCompleteError$2(error, stackTrace);
    },
    $is_Future: true,
    $isFuture: true,
    static: {"^": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR", _Future$: function($T) {
        return H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [$T]);
      }, _Future$immediate: function(value, $T) {
        var t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [$T]);
        t1._async$_Future$immediate$1(value, $T);
        return t1;
      }, _Future$immediateError: function(error, stackTrace, $T) {
        var t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [$T]);
        t1._async$_Future$immediateError$2(error, stackTrace, $T);
        return t1;
      }, _Future__chainForeignFuture: function(source, target) {
        target.set$_isChained(true);
        source.then$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target));
      }, _Future__chainCoreFuture: function(source, target) {
        target.set$_isChained(true);
        if (source._state >= 4)
          P._Future__propagateToListeners(source, target);
        else
          source._addListener$1(target);
      }, _Future__propagateMultipleListeners: function(source, listeners) {
        var listeners0;
        do {
          listeners0 = listeners.get$_nextListener();
          listeners.set$_nextListener(null);
          P._Future__propagateToListeners(source, listeners);
          if (listeners0 != null) {
            listeners = listeners0;
            continue;
          } else
            break;
        } while (true);
      }, _Future__propagateToListeners: function(source, listeners) {
        var t1, t2, t3, hasError, asyncError, t4, sourceValue, zone, oldZone, chainSource, listeners0;
        t1 = {};
        t1.source_4 = source;
        for (t2 = source; true;) {
          t3 = {};
          if (!t2.get$_isComplete())
            return;
          hasError = t1.source_4.get$_hasError();
          if (hasError && listeners == null) {
            asyncError = t1.source_4.get$_error();
            t2 = t1.source_4.get$_zone();
            t3 = J.get$error$x(asyncError);
            t4 = asyncError.get$stackTrace();
            t2.toString;
            P._rootHandleUncaughtError(t2, null, t2, t3, t4);
            return;
          }
          if (listeners == null)
            return;
          if (listeners.get$_nextListener() != null) {
            P._Future__propagateMultipleListeners(t1.source_4, listeners);
            return;
          }
          t3.listenerHasValue_1 = true;
          sourceValue = t1.source_4.get$_hasValue() ? t1.source_4.get$_value() : null;
          t3.listenerValueOrError_2 = sourceValue;
          t3.isPropagationAborted_3 = false;
          t2 = !hasError;
          if (!t2 || listeners.get$_onValue() != null || listeners.get$_whenCompleteAction() != null) {
            zone = listeners.get$_zone();
            if (hasError) {
              t4 = t1.source_4.get$_zone();
              t4.toString;
              zone.toString;
              t4 = zone == null ? t4 != null : zone !== t4;
            } else
              t4 = false;
            if (t4) {
              asyncError = t1.source_4.get$_error();
              t2 = t1.source_4.get$_zone();
              t3 = J.get$error$x(asyncError);
              t4 = asyncError.get$stackTrace();
              t2.toString;
              P._rootHandleUncaughtError(t2, null, t2, t3, t4);
              return;
            }
            oldZone = $.Zone__current;
            if (oldZone == null ? zone != null : oldZone !== zone)
              $.Zone__current = zone;
            else
              oldZone = null;
            if (t2) {
              if (listeners.get$_onValue() != null)
                t3.listenerHasValue_1 = new P._Future__propagateToListeners_handleValueCallback(t3, listeners, sourceValue, zone).call$0();
            } else
              new P._Future__propagateToListeners_handleError(t1, t3, listeners, zone).call$0();
            if (listeners.get$_whenCompleteAction() != null)
              new P._Future__propagateToListeners_handleWhenCompleteCallback(t1, t3, hasError, listeners, zone).call$0();
            if (oldZone != null)
              $.Zone__current = oldZone;
            if (t3.isPropagationAborted_3)
              return;
            if (t3.listenerHasValue_1 === true) {
              t2 = t3.listenerValueOrError_2;
              t2 = (sourceValue == null ? t2 != null : sourceValue !== t2) && !!J.getInterceptor(t2).$isFuture;
            } else
              t2 = false;
            if (t2) {
              chainSource = t3.listenerValueOrError_2;
              if (!!J.getInterceptor(chainSource).$is_Future)
                if (chainSource._state >= 4) {
                  listeners.set$_isChained(true);
                  t1.source_4 = chainSource;
                  t2 = chainSource;
                  continue;
                } else
                  P._Future__chainCoreFuture(chainSource, listeners);
              else
                P._Future__chainForeignFuture(chainSource, listeners);
              return;
            }
          }
          if (t3.listenerHasValue_1 === true) {
            listeners0 = listeners._removeListeners$0();
            listeners._setValue$1(t3.listenerValueOrError_2);
          } else {
            listeners0 = listeners._removeListeners$0();
            asyncError = t3.listenerValueOrError_2;
            listeners._setError$2(J.get$error$x(asyncError), asyncError.get$stackTrace());
          }
          t1.source_4 = listeners;
          t2 = listeners;
          listeners = listeners0;
        }
      }}
  },
  _Future__addListener_closure: {
    "^": "Closure:38;this_0,listener_1",
    call$0: [function() {
      P._Future__propagateToListeners(this.this_0, this.listener_1);
    }, "call$0", null, 0, 0, null, "call"]
  },
  _Future__chainForeignFuture_closure: {
    "^": "Closure:31;target_0",
    call$1: [function(value) {
      this.target_0._completeWithValue$1(value);
    }, "call$1", null, 2, 0, null, 15, "call"]
  },
  _Future__chainForeignFuture_closure0: {
    "^": "Closure:50;target_1",
    call$2: [function(error, stackTrace) {
      this.target_1._completeError$2(error, stackTrace);
    }, function(error) {
      return this.call$2(error, null);
    }, "call$1", "call$2", null, null, 2, 2, null, 17, 18, 19, "call"]
  },
  _Future__asyncComplete_closure: {
    "^": "Closure:38;this_0,coreFuture_1",
    call$0: [function() {
      P._Future__chainCoreFuture(this.coreFuture_1, this.this_0);
    }, "call$0", null, 0, 0, null, "call"]
  },
  _Future__asyncComplete_closure0: {
    "^": "Closure:38;this_2,value_3",
    call$0: [function() {
      this.this_2._completeWithValue$1(this.value_3);
    }, "call$0", null, 0, 0, null, "call"]
  },
  _Future__asyncCompleteError_closure: {
    "^": "Closure:38;this_0,error_1,stackTrace_2",
    call$0: [function() {
      this.this_0._completeError$2(this.error_1, this.stackTrace_2);
    }, "call$0", null, 0, 0, null, "call"]
  },
  _Future__propagateToListeners_handleValueCallback: {
    "^": "Closure:51;box_1,listener_3,sourceValue_4,zone_5",
    call$0: function() {
      var e, s, t1, t2, exception;
      try {
        t1 = this.zone_5;
        t2 = this.listener_3.get$_onValue();
        t1.toString;
        this.box_1.listenerValueOrError_2 = P._rootRunUnary(t1, null, t1, t2, this.sourceValue_4);
        return true;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this.box_1.listenerValueOrError_2 = new P._AsyncError(e, s);
        return false;
      }

    }
  },
  _Future__propagateToListeners_handleError: {
    "^": "Closure:12;box_2,box_1,listener_6,zone_7",
    call$0: function() {
      var asyncError, test, matchesTest, e, s, errorCallback, e0, s0, t1, t2, t3, exception, listenerValueOrError, t4;
      asyncError = this.box_2.source_4.get$_error();
      t1 = this.listener_6;
      test = t1.get$_errorTest();
      matchesTest = true;
      if (test != null)
        try {
          t2 = this.zone_7;
          t3 = J.get$error$x(asyncError);
          t2.toString;
          matchesTest = P._rootRunUnary(t2, null, t2, test, t3);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = new H._StackTrace(exception, null);
          t1 = J.get$error$x(asyncError);
          t2 = e;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P._AsyncError(e, s);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }

      errorCallback = t1.get$_onError();
      if (matchesTest === true && errorCallback != null) {
        try {
          t1 = errorCallback;
          t2 = H.getDynamicRuntimeType();
          t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
          t3 = this.zone_7;
          t4 = this.box_1;
          if (t2) {
            t1 = J.get$error$x(asyncError);
            t2 = asyncError.get$stackTrace();
            t3.toString;
            t4.listenerValueOrError_2 = P._rootRunBinary(t3, null, t3, errorCallback, t1, t2);
          } else {
            t1 = J.get$error$x(asyncError);
            t3.toString;
            t4.listenerValueOrError_2 = P._rootRunUnary(t3, null, t3, errorCallback, t1);
          }
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e0 = t1;
          s0 = new H._StackTrace(exception, null);
          t1 = J.get$error$x(asyncError);
          t2 = e0;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P._AsyncError(e0, s0);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }

        this.box_1.listenerHasValue_1 = true;
      } else {
        t1 = this.box_1;
        t1.listenerValueOrError_2 = asyncError;
        t1.listenerHasValue_1 = false;
      }
    }
  },
  _Future__propagateToListeners_handleWhenCompleteCallback: {
    "^": "Closure:12;box_2,box_1,hasError_8,listener_9,zone_10",
    call$0: function() {
      var t1, e, s, t2, t3, exception;
      t1 = {};
      t1.completeResult_0 = null;
      try {
        t2 = this.zone_10;
        t3 = this.listener_9.get$_whenCompleteAction();
        t2.toString;
        t1.completeResult_0 = P._rootRun(t2, null, t2, t3);
      } catch (exception) {
        t2 = H.unwrapException(exception);
        e = t2;
        s = new H._StackTrace(exception, null);
        if (this.hasError_8) {
          t2 = J.get$error$x(this.box_2.source_4.get$_error());
          t3 = e;
          t3 = t2 == null ? t3 == null : t2 === t3;
          t2 = t3;
        } else
          t2 = false;
        t3 = this.box_1;
        if (t2)
          t3.listenerValueOrError_2 = this.box_2.source_4.get$_error();
        else
          t3.listenerValueOrError_2 = new P._AsyncError(e, s);
        t3.listenerHasValue_1 = false;
      }

      if (!!J.getInterceptor(t1.completeResult_0).$isFuture) {
        t2 = this.listener_9;
        t2.set$_isChained(true);
        this.box_1.isPropagationAborted_3 = true;
        t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(this.box_2, t2), new P._Future__propagateToListeners_handleWhenCompleteCallback_closure0(t1, t2));
      }
    }
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
    "^": "Closure:31;box_2,listener_11",
    call$1: [function(ignored) {
      P._Future__propagateToListeners(this.box_2.source_4, this.listener_11);
    }, "call$1", null, 2, 0, null, 52, "call"]
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0: {
    "^": "Closure:50;box_0,listener_12",
    call$2: [function(error, stackTrace) {
      var t1, completeResult;
      t1 = this.box_0;
      if (!J.getInterceptor(t1.completeResult_0).$is_Future) {
        completeResult = P._Future$(null);
        t1.completeResult_0 = completeResult;
        completeResult._setError$2(error, stackTrace);
      }
      P._Future__propagateToListeners(t1.completeResult_0, this.listener_12);
    }, function(error) {
      return this.call$2(error, null);
    }, "call$1", "call$2", null, null, 2, 2, null, 17, 18, 19, "call"]
  },
  _AsyncCallbackEntry: {
    "^": "Object;callback,next",
    callback$0: function() {
      return this.callback.call$0();
    }
  },
  Stream: {
    "^": "Object;",
    forEach$1: function(_, action) {
      var t1, future;
      t1 = {};
      future = P._Future$(null);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
      return future;
    },
    get$length: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(P.$int);
      t1.count_0 = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    get$isEmpty: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(P.bool);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_isEmpty_closure(t1, future), true, new P.Stream_isEmpty_closure0(future), future.get$_completeError());
      return future;
    },
    get$first: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_first_closure(t1, this, future), true, new P.Stream_first_closure0(future), future.get$_completeError());
      return future;
    }
  },
  Stream_forEach_closure: {
    "^": "Closure;box_0,this_1,action_2,future_3",
    call$1: [function(element) {
      P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
    }, "call$1", null, 2, 0, null, 53, "call"],
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_forEach__closure: {
    "^": "Closure:38;action_4,element_5",
    call$0: function() {
      return this.action_4.call$1(this.element_5);
    }
  },
  Stream_forEach__closure0: {
    "^": "Closure:31;",
    call$1: function(_) {
    }
  },
  Stream_forEach_closure0: {
    "^": "Closure:38;future_6",
    call$0: [function() {
      this.future_6._complete$1(null);
    }, "call$0", null, 0, 0, null, "call"]
  },
  Stream_length_closure: {
    "^": "Closure:31;box_0",
    call$1: [function(_) {
      ++this.box_0.count_0;
    }, "call$1", null, 2, 0, null, 54, "call"]
  },
  Stream_length_closure0: {
    "^": "Closure:38;box_0,future_1",
    call$0: [function() {
      this.future_1._complete$1(this.box_0.count_0);
    }, "call$0", null, 0, 0, null, "call"]
  },
  Stream_isEmpty_closure: {
    "^": "Closure:31;box_0,future_1",
    call$1: [function(_) {
      P._cancelAndValue(this.box_0.subscription_0, this.future_1, false);
    }, "call$1", null, 2, 0, null, 54, "call"]
  },
  Stream_isEmpty_closure0: {
    "^": "Closure:38;future_2",
    call$0: [function() {
      this.future_2._complete$1(true);
    }, "call$0", null, 0, 0, null, "call"]
  },
  Stream_first_closure: {
    "^": "Closure;box_0,this_1,future_2",
    call$1: [function(value) {
      P._cancelAndValue(this.box_0.subscription_0, this.future_2, value);
    }, "call$1", null, 2, 0, null, 15, "call"],
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_first_closure0: {
    "^": "Closure:38;future_3",
    call$0: [function() {
      this.future_3._completeError$1(new P.StateError("No elements"));
    }, "call$0", null, 0, 0, null, "call"]
  },
  StreamSubscription: {
    "^": "Object;"
  },
  _StreamController: {
    "^": "Object;",
    get$isPaused: function() {
      var t1 = this._state;
      return (t1 & 1) !== 0 ? this.get$_subscription().get$_isInputPaused() : (t1 & 2) === 0;
    },
    get$_pendingEvents: function() {
      if ((this._state & 8) === 0)
        return this._varData;
      return this._varData.get$varData();
    },
    _ensurePendingEvents$0: function() {
      var t1, state;
      if ((this._state & 8) === 0) {
        t1 = this._varData;
        if (t1 == null) {
          t1 = new P._StreamImplEvents(null, null, 0);
          this._varData = t1;
        }
        return t1;
      }
      state = this._varData;
      state.get$varData();
      return state.get$varData();
    },
    get$_subscription: function() {
      if ((this._state & 8) !== 0)
        return this._varData.get$varData();
      return this._varData;
    },
    _badEventState$0: function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add event after closing");
      return new P.StateError("Cannot add event while adding a stream");
    },
    _ensureDoneFuture$0: function() {
      var t1 = this._doneFuture;
      if (t1 == null) {
        t1 = (this._state & 2) !== 0 ? $.get$Future__nullFuture() : P._Future$(null);
        this._doneFuture = t1;
      }
      return t1;
    },
    add$1: [function(_, value) {
      var t1 = this._state;
      if (t1 >= 4)
        throw H.wrapException(this._badEventState$0());
      if ((t1 & 1) !== 0)
        this._sendData$1(value);
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, new P._DelayedData(value, null));
    }, "call$1", "get$add", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T", void: true, args: [T]};
      }, this.$receiver, "_StreamController");
    }],
    close$0: [function(_) {
      var t1 = this._state;
      if ((t1 & 4) !== 0)
        return this._ensureDoneFuture$0();
      if (t1 >= 4)
        throw H.wrapException(this._badEventState$0());
      t1 |= 4;
      this._state = t1;
      if ((t1 & 1) !== 0)
        this._sendDone$0();
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, C.C__DelayedDone);
      return this._ensureDoneFuture$0();
    }, "call$0", "get$close", 0, 0, 55],
    _subscribe$1: function(cancelOnError) {
      var t1, t2, subscription, pendingEvents, addState;
      if ((this._state & 3) !== 0)
        throw H.wrapException(P.StateError$("Stream has already been listened to."));
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      subscription = H.setRuntimeTypeInfo(new P._ControllerSubscription(this, null, null, null, t1, t2, null, null), [null]);
      pendingEvents = this.get$_pendingEvents();
      t2 = this._state |= 1;
      if ((t2 & 8) !== 0) {
        addState = this._varData;
        addState.set$varData(subscription);
        addState.resume$0();
      } else
        this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
      return subscription;
    },
    _recordCancel$1: function(subscription) {
      var result, e, s, exception, t1, result0;
      result = null;
      if ((this._state & 8) !== 0)
        result = this._varData.cancel$0();
      this._varData = null;
      this._state = this._state & 4294967286 | 2;
      if (this.get$_onCancel() != null)
        if (result == null)
          try {
            result = this._onCancel$0();
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            s = new H._StackTrace(exception, null);
            result0 = P._Future$(null);
            result0._asyncCompleteError$2(e, s);
            result = result0;
          }

        else
          result = result.whenComplete$1(this.get$_onCancel());
      t1 = new P._StreamController__recordCancel_complete(this);
      if (result != null)
        result = result.whenComplete$1(t1);
      else
        t1.call$0();
      return result;
    }
  },
  _StreamController__subscribe_closure: {
    "^": "Closure:38;this_0",
    call$0: function() {
      P._runGuarded(this.this_0.get$_onListen());
    }
  },
  _StreamController__recordCancel_complete: {
    "^": "Closure:12;this_0",
    call$0: [function() {
      var t1 = this.this_0._doneFuture;
      if (t1 != null && t1._state === 0)
        t1._asyncComplete$1(null);
    }, "call$0", null, 0, 0, null, "call"]
  },
  _SyncStreamControllerDispatch: {
    "^": "Object;",
    _sendData$1: function(data) {
      this.get$_subscription()._async$_add$1(data);
    },
    _sendDone$0: function() {
      this.get$_subscription()._async$_close$0();
    }
  },
  _AsyncStreamControllerDispatch: {
    "^": "Object;",
    _sendData$1: function(data) {
      this.get$_subscription()._addPending$1(new P._DelayedData(data, null));
    },
    _sendDone$0: function() {
      this.get$_subscription()._addPending$1(C.C__DelayedDone);
    }
  },
  _AsyncStreamController: {
    "^": "_StreamController__AsyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture",
    _onCancel$0: function() {
      return this._onCancel.call$0();
    }
  },
  _StreamController__AsyncStreamControllerDispatch: {
    "^": "_StreamController+_AsyncStreamControllerDispatch;"
  },
  _SyncStreamController: {
    "^": "_StreamController__SyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture",
    _onCancel$0: function() {
      return this._onCancel.call$0();
    }
  },
  _StreamController__SyncStreamControllerDispatch: {
    "^": "_StreamController+_SyncStreamControllerDispatch;"
  },
  _ControllerStream: {
    "^": "_StreamImpl;_async$_controller",
    _createSubscription$1: function(cancelOnError) {
      return this._async$_controller._subscribe$1(cancelOnError);
    },
    get$hashCode: function(_) {
      return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$is_ControllerStream)
        return false;
      return other._async$_controller === this._async$_controller;
    },
    $is_ControllerStream: true
  },
  _ControllerSubscription: {
    "^": "_BufferingStreamSubscription;_async$_controller,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    _onCancel$0: function() {
      return this._async$_controller._recordCancel$1(this);
    },
    _onPause$0: [function() {
      var t1 = this._async$_controller;
      if ((t1._state & 8) !== 0)
        t1._varData.pause$0(0);
      P._runGuarded(t1.get$_onPause());
    }, "call$0", "get$_onPause", 0, 0, 12],
    _onResume$0: [function() {
      var t1 = this._async$_controller;
      if ((t1._state & 8) !== 0)
        t1._varData.resume$0();
      P._runGuarded(t1.get$_onResume());
    }, "call$0", "get$_onResume", 0, 0, 12]
  },
  _EventSink: {
    "^": "Object;"
  },
  _BufferingStreamSubscription: {
    "^": "Object;_onData,_onError<,_onDone,_zone<,_state,_cancelFuture,_pending",
    _setPendingEvents$1: function(pendingEvents) {
      if (pendingEvents == null)
        return;
      this._pending = pendingEvents;
      if (!pendingEvents.get$isEmpty(pendingEvents)) {
        this._state = (this._state | 64) >>> 0;
        this._pending.schedule$1(this);
      }
    },
    onData$1: function(handleData) {
      this._zone.toString;
      this._onData = handleData;
    },
    onError$1: function(_, handleError) {
      this._onError = P._registerErrorHandler(handleError, this._zone);
    },
    onDone$1: function(handleDone) {
      this._zone.toString;
      this._onDone = handleDone;
    },
    pause$1: function(_, resumeSignal) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      this._state = (t1 + 128 | 4) >>> 0;
      if (t1 < 128 && this._pending != null)
        this._pending.cancelSchedule$0();
      if ((t1 & 4) === 0 && (this._state & 32) === 0)
        this._guardCallback$1(this.get$_onPause());
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 -= 128;
        this._state = t1;
        if (t1 < 128) {
          if ((t1 & 64) !== 0) {
            t1 = this._pending;
            t1 = !t1.get$isEmpty(t1);
          } else
            t1 = false;
          if (t1)
            this._pending.schedule$1(this);
          else {
            t1 = (this._state & 4294967291) >>> 0;
            this._state = t1;
            if ((t1 & 32) === 0)
              this._guardCallback$1(this.get$_onResume());
          }
        }
      }
    },
    cancel$0: function() {
      var t1 = (this._state & 4294967279) >>> 0;
      this._state = t1;
      if ((t1 & 8) !== 0)
        return this._cancelFuture;
      this._cancel$0();
      return this._cancelFuture;
    },
    get$_isInputPaused: function() {
      return (this._state & 4) !== 0;
    },
    get$isPaused: function() {
      return this._state >= 128;
    },
    _cancel$0: function() {
      var t1 = (this._state | 8) >>> 0;
      this._state = t1;
      if ((t1 & 64) !== 0)
        this._pending.cancelSchedule$0();
      if ((this._state & 32) === 0)
        this._pending = null;
      this._cancelFuture = this._onCancel$0();
    },
    _async$_add$1: function(data) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendData$1(data);
      else
        this._addPending$1(new P._DelayedData(data, null));
    },
    _async$_close$0: function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      this._state = t1;
      if (t1 < 32)
        this._sendDone$0();
      else
        this._addPending$1(C.C__DelayedDone);
    },
    _onPause$0: [function() {
    }, "call$0", "get$_onPause", 0, 0, 12],
    _onResume$0: [function() {
    }, "call$0", "get$_onResume", 0, 0, 12],
    _onCancel$0: function() {
    },
    _addPending$1: function($event) {
      var pending, t1;
      pending = this._pending;
      if (pending == null) {
        pending = new P._StreamImplEvents(null, null, 0);
        this._pending = pending;
      }
      pending.add$1(0, $event);
      t1 = this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        this._state = t1;
        if (t1 < 128)
          this._pending.schedule$1(this);
      }
    },
    _sendData$1: function(data) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      this._zone.runUnaryGuarded$2(this._onData, data);
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _sendDone$0: function() {
      var t1, t2;
      t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
      this._cancel$0();
      this._state = (this._state | 16) >>> 0;
      t2 = this._cancelFuture;
      if (!!J.getInterceptor(t2).$isFuture)
        t2.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1: function(callback) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      callback.call$0();
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1: function(wasInputPaused) {
      var t1, isInputPaused;
      if ((this._state & 64) !== 0) {
        t1 = this._pending;
        t1 = t1.get$isEmpty(t1);
      } else
        t1 = false;
      if (t1) {
        t1 = (this._state & 4294967231) >>> 0;
        this._state = t1;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t1 = this._pending;
            t1 = t1 == null || t1.get$isEmpty(t1);
          } else
            t1 = false;
        else
          t1 = false;
        if (t1)
          this._state = (this._state & 4294967291) >>> 0;
      }
      for (; true; wasInputPaused = isInputPaused) {
        t1 = this._state;
        if ((t1 & 8) !== 0) {
          this._pending = null;
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          this._onPause$0();
        else
          this._onResume$0();
        this._state = (this._state & 4294967263) >>> 0;
      }
      t1 = this._state;
      if ((t1 & 64) !== 0 && t1 < 128)
        this._pending.schedule$1(this);
    },
    static: {"^": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT"}
  },
  _BufferingStreamSubscription__sendDone_sendDone: {
    "^": "Closure:12;this_0",
    call$0: [function() {
      var t1, t2;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    }, "call$0", null, 0, 0, null, "call"]
  },
  _StreamImpl: {
    "^": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var subscription = this._createSubscription$1(true === cancelOnError);
      subscription.onData$1(onData);
      subscription.onError$1(0, onError);
      subscription.onDone$1(onDone);
      return subscription;
    },
    _createSubscription$1: function(cancelOnError) {
      var t1, t2;
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      return new P._BufferingStreamSubscription(null, null, null, t1, t2, null, null);
    }
  },
  _DelayedEvent: {
    "^": "Object;next@"
  },
  _DelayedData: {
    "^": "_DelayedEvent;value,next",
    perform$1: function(dispatch) {
      dispatch._sendData$1(this.value);
    }
  },
  _DelayedDone: {
    "^": "Object;",
    perform$1: function(dispatch) {
      dispatch._sendDone$0();
    },
    get$next: function() {
      return;
    },
    set$next: function(_) {
      throw H.wrapException(P.StateError$("No events after a done."));
    }
  },
  _PendingEvents: {
    "^": "Object;",
    schedule$1: function(dispatch) {
      var t1 = this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
      this._state = 1;
    },
    cancelSchedule$0: function() {
      if (this._state === 1)
        this._state = 3;
    }
  },
  _PendingEvents_schedule_closure: {
    "^": "Closure:38;this_0,dispatch_1",
    call$0: [function() {
      var t1, oldState;
      t1 = this.this_0;
      oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t1.handleNext$1(this.dispatch_1);
    }, "call$0", null, 0, 0, null, "call"]
  },
  _StreamImplEvents: {
    "^": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
    get$isEmpty: function(_) {
      return this.lastPendingEvent == null;
    },
    add$1: function(_, $event) {
      var t1 = this.lastPendingEvent;
      if (t1 == null) {
        this.lastPendingEvent = $event;
        this.firstPendingEvent = $event;
      } else {
        t1.set$next($event);
        this.lastPendingEvent = $event;
      }
    },
    handleNext$1: function(dispatch) {
      var $event, t1;
      $event = this.firstPendingEvent;
      t1 = $event.get$next();
      this.firstPendingEvent = t1;
      if (t1 == null)
        this.lastPendingEvent = null;
      $event.perform$1(dispatch);
    }
  },
  _cancelAndError_closure: {
    "^": "Closure:38;future_0,error_1,stackTrace_2",
    call$0: [function() {
      return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
    }, "call$0", null, 0, 0, null, "call"]
  },
  _cancelAndErrorClosure_closure: {
    "^": "Closure:56;subscription_0,future_1",
    call$2: function(error, stackTrace) {
      return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
    }
  },
  _cancelAndValue_closure: {
    "^": "Closure:38;future_0,value_1",
    call$0: [function() {
      return this.future_0._complete$1(this.value_1);
    }, "call$0", null, 0, 0, null, "call"]
  },
  _BaseZone: {
    "^": "Object;",
    runGuarded$1: function(f) {
      var e, s, t1, exception;
      try {
        t1 = this.run$1(f);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    runUnaryGuarded$2: function(f, arg) {
      var e, s, t1, exception;
      try {
        t1 = this.runUnary$2(f, arg);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    bindCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindCallback_closure(this, registered);
      else
        return new P._BaseZone_bindCallback_closure0(this, registered);
    },
    bindCallback$1: function(f) {
      return this.bindCallback$2$runGuarded(f, true);
    }
  },
  _BaseZone_bindCallback_closure: {
    "^": "Closure:38;this_0,registered_1",
    call$0: [function() {
      return this.this_0.runGuarded$1(this.registered_1);
    }, "call$0", null, 0, 0, null, "call"]
  },
  _BaseZone_bindCallback_closure0: {
    "^": "Closure:38;this_2,registered_3",
    call$0: [function() {
      return this.this_2.run$1(this.registered_3);
    }, "call$0", null, 0, 0, null, "call"]
  },
  _rootHandleUncaughtError_closure: {
    "^": "Closure:38;error_0,stackTrace_1",
    call$0: function() {
      P._scheduleAsyncCallback(new P._rootHandleUncaughtError__closure(this.error_0, this.stackTrace_1));
    }
  },
  _rootHandleUncaughtError__closure: {
    "^": "Closure:38;error_2,stackTrace_3",
    call$0: function() {
      var t1, trace;
      t1 = this.error_2;
      P.print("Uncaught Error: " + H.S(t1));
      trace = this.stackTrace_3;
      if (trace == null && !!J.getInterceptor(t1).$isError)
        trace = t1.get$stackTrace();
      if (trace != null)
        P.print("Stack Trace: \n" + H.S(trace) + "\n");
      throw H.wrapException(t1);
    }
  },
  _RootZone: {
    "^": "_BaseZone;",
    $index: function(_, key) {
      return;
    },
    handleUncaughtError$2: function(error, stackTrace) {
      return P._rootHandleUncaughtError(this, null, this, error, stackTrace);
    },
    run$1: function(f) {
      return P._rootRun(this, null, this, f);
    },
    runUnary$2: function(f, arg) {
      return P._rootRunUnary(this, null, this, f, arg);
    },
    registerCallback$1: function(f) {
      return f;
    }
  }
}],
["dart.collection", "dart:collection", , P, {
  "^": "",
  LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
    return H.fillLiteralMap(keyValuePairs, H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]));
  },
  LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
    return H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  _defaultEquals: [function(a, b) {
    return J.$eq(a, b);
  }, "call$2", "_defaultEquals$closure", 4, 0, 20],
  _defaultHashCode: [function(a) {
    return J.get$hashCode$(a);
  }, "call$1", "_defaultHashCode$closure", 2, 0, 21, 22],
  HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._HashMap(0, null, null, null, null), [$K, $V]);
  },
  IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
    var parts, t1;
    if (P.IterableBase__isToStringVisiting(iterable)) {
      if (leftDelimiter === "(" && rightDelimiter === ")")
        return "(...)";
      return leftDelimiter + "..." + rightDelimiter;
    }
    parts = [];
    t1 = $.get$IterableBase__toStringVisiting();
    t1.push(iterable);
    try {
      P.IterableBase__iterablePartsToStrings(iterable, parts);
    } finally {
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    t1 = P.StringBuffer$(leftDelimiter);
    t1.writeAll$2(parts, ", ");
    t1.write$1(rightDelimiter);
    return t1._contents;
  },
  IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
    var buffer, t1;
    if (P.IterableBase__isToStringVisiting(iterable))
      return leftDelimiter + "..." + rightDelimiter;
    buffer = P.StringBuffer$(leftDelimiter);
    t1 = $.get$IterableBase__toStringVisiting();
    t1.push(iterable);
    try {
      buffer.writeAll$2(iterable, ", ");
    } finally {
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    buffer.write$1(rightDelimiter);
    return buffer.get$_contents();
  },
  IterableBase__isToStringVisiting: function(o) {
    var i, t1;
    for (i = 0; t1 = $.get$IterableBase__toStringVisiting(), i < t1.length; ++i) {
      t1 = t1[i];
      if (o == null ? t1 == null : o === t1)
        return true;
    }
    return false;
  },
  IterableBase__iterablePartsToStrings: function(iterable, parts) {
    var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
    it = iterable.get$iterator(iterable);
    $length = 0;
    count = 0;
    while (true) {
      if (!($length < 80 || count < 3))
        break;
      if (!it.moveNext$0())
        return;
      next = H.S(it.get$current());
      parts.push(next);
      $length += next.length + 2;
      ++count;
    }
    if (!it.moveNext$0()) {
      if (count <= 5)
        return;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      ultimateString = parts.pop();
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      penultimateString = parts.pop();
    } else {
      penultimate = it.get$current();
      ++count;
      if (!it.moveNext$0()) {
        if (count <= 4) {
          parts.push(H.S(penultimate));
          return;
        }
        ultimateString = H.S(penultimate);
        if (0 >= parts.length)
          return H.ioore(parts, 0);
        penultimateString = parts.pop();
        $length += ultimateString.length + 2;
      } else {
        ultimate = it.get$current();
        ++count;
        for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
          ultimate0 = it.get$current();
          ++count;
          if (count > 100) {
            while (true) {
              if (!($length > 75 && count > 3))
                break;
              if (0 >= parts.length)
                return H.ioore(parts, 0);
              $length -= parts.pop().length + 2;
              --count;
            }
            parts.push("...");
            return;
          }
        }
        penultimateString = H.S(penultimate);
        ultimateString = H.S(ultimate);
        $length += ultimateString.length + penultimateString.length + 4;
      }
    }
    if (count > parts.length + 2) {
      $length += 5;
      elision = "...";
    } else
      elision = null;
    while (true) {
      if (!($length > 80 && parts.length > 3))
        break;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      $length -= parts.pop().length + 2;
      if (elision == null) {
        $length += 5;
        elision = "...";
      }
    }
    if (elision != null)
      parts.push(elision);
    parts.push(penultimateString);
    parts.push(ultimateString);
  },
  LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
    return H.setRuntimeTypeInfo(new P._LinkedHashSet(0, null, null, null, null, null, 0), [$E]);
  },
  Maps_mapToString: function(m) {
    var t1, result;
    t1 = {};
    if (P.IterableBase__isToStringVisiting(m))
      return "{...}";
    result = P.StringBuffer$("");
    try {
      $.get$IterableBase__toStringVisiting().push(m);
      result.write$1("{");
      t1.first_0 = true;
      J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
      result.write$1("}");
    } finally {
      t1 = $.get$IterableBase__toStringVisiting();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  },
  _HashMap: {
    "^": "Object;_collection$_length,_strings,_nums,_rest,_keys",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._HashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    $index: function(_, key) {
      var strings, t1, entry, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          t1 = null;
        else {
          entry = strings[key];
          t1 = entry === strings ? null : entry;
        }
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          t1 = null;
        else {
          entry = nums[key];
          t1 = entry === nums ? null : entry;
        }
        return t1;
      } else
        return this._get$1(key);
    },
    _get$1: function(key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet: function(_, key, value) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._HashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._HashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else
        this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, index;
      rest = this._rest;
      if (rest == null) {
        rest = P._HashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        ++this._collection$_length;
        this._keys = null;
      } else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          ++this._collection$_length;
          this._keys = null;
        }
      }
    },
    forEach$1: function(_, action) {
      var keys, $length, i, key;
      keys = this._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        key = keys[i];
        action.call$2(key, this.$index(0, key));
        if (keys !== this._keys)
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    _computeKeys$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._keys;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._keys = result;
      return result;
    },
    _addHashTableEntry$3: function(table, key, value) {
      if (table[key] == null) {
        ++this._collection$_length;
        this._keys = null;
      }
      P._HashMap__setTableEntry(table, key, value);
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq(bucket[i], key))
          return i;
      return -1;
    },
    $isMap: true,
    static: {_HashMap__setTableEntry: function(table, key, value) {
        if (value == null)
          table[key] = table;
        else
          table[key] = value;
      }, _HashMap__newHashTable: function() {
        var table = Object.create(null);
        P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _HashMap_values_closure: {
    "^": "Closure:31;this_0",
    call$1: [function(each) {
      return this.this_0.$index(0, each);
    }, "call$1", null, 2, 0, null, 57, "call"]
  },
  HashMapKeyIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1 = this._map;
      return new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
    },
    forEach$1: function(_, f) {
      var t1, keys, $length, i;
      t1 = this._map;
      keys = t1._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        f.call$1(keys[i]);
        if (keys !== t1._keys)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
      }
    }
  },
  HashMapKeyIterator: {
    "^": "Object;_map,_keys,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var keys, offset, t1;
      keys = this._keys;
      offset = this._offset;
      t1 = this._map;
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = keys[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashMap: {
    "^": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._LinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1: function(key) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    },
    addAll$1: function(_, other) {
      J.forEach$1$ax(other, new P._LinkedHashMap_addAll_closure(this));
    },
    $index: function(_, key) {
      var strings, cell, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return;
        cell = strings[key];
        return cell == null ? null : cell.get$_collection$_value();
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return;
        cell = nums[key];
        return cell == null ? null : cell.get$_collection$_value();
      } else
        return this._get$1(key);
    },
    _get$1: function(key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_collection$_value();
    },
    $indexSet: function(_, key, value) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._LinkedHashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._LinkedHashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else
        this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, index;
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$_collection$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    },
    remove$1: function(_, key) {
      if (typeof key === "string" && key !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return this._removeHashTableEntry$2(this._nums, key);
      else
        return this._remove$1(key);
    },
    _remove$1: function(key) {
      var rest, bucket, index, cell;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_collection$_value();
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._last = null;
        this._first = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
        this._modifications = this._modifications + 1 & 67108863;
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$2(cell.get$_key(), cell.get$_collection$_value());
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell.get$_next();
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_collection$_value(value);
    },
    _removeHashTableEntry$2: function(table, key) {
      var cell;
      if (table == null)
        return;
      cell = table[key];
      if (cell == null)
        return;
      this._unlinkCell$1(cell);
      delete table[key];
      return cell.get$_collection$_value();
    },
    _newLinkedCell$2: function(key, value) {
      var cell, last;
      cell = new P.LinkedHashMapCell(key, value, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      ++this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      --this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_key(), key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    $isMap: true,
    static: {_LinkedHashMap__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _LinkedHashMap_values_closure: {
    "^": "Closure:31;this_0",
    call$1: [function(each) {
      return this.this_0.$index(0, each);
    }, "call$1", null, 2, 0, null, 57, "call"]
  },
  _LinkedHashMap_addAll_closure: {
    "^": "Closure;this_0",
    call$2: [function(key, value) {
      this.this_0.$indexSet(0, key, value);
    }, "call$2", null, 4, 0, null, 58, 15, "call"],
    $signature: function() {
      return H.computeSignature(function(K, V) {
        return {func: "dynamic__K_V", args: [K, V]};
      }, this.this_0, "_LinkedHashMap");
    }
  },
  LinkedHashMapCell: {
    "^": "Object;_key<,_collection$_value@,_next@,_previous@"
  },
  LinkedHashMapKeyIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this._map;
      t2 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
      t2._cell = t1._first;
      return t2;
    },
    forEach$1: function(_, f) {
      var t1, cell, modifications;
      t1 = this._map;
      cell = t1._first;
      modifications = t1._modifications;
      for (; cell != null;) {
        f.call$1(cell.get$_key());
        if (modifications !== t1._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        cell = cell.get$_next();
      }
    }
  },
  LinkedHashMapKeyIterator: {
    "^": "Object;_map,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._map;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_key();
          this._cell = this._cell.get$_next();
          return true;
        }
      }
    }
  },
  _LinkedHashSet: {
    "^": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$iterator: function(_) {
      var t1 = new P.LinkedHashSetIterator(this, this._modifications, null, null);
      t1._cell = this._first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[object] != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    lookup$1: function(object) {
      var t1;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(0, object) ? object : null;
      else
        return this._lookup$1(object);
    },
    _lookup$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index).get$_element();
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$1(cell.get$_element());
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell.get$_next();
      }
    },
    add$1: function(_, element) {
      var strings, table, nums;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else
        return this._add$1(element);
    },
    _add$1: function(element) {
      var rest, hash, bucket;
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashSet__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$1(element)];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(this._newLinkedCell$1(element));
      }
      return true;
    },
    remove$1: function(_, object) {
      if (typeof object === "string" && object !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, object);
      else if (typeof object === "number" && (object & 0x3ffffff) === object)
        return this._removeHashTableEntry$2(this._nums, object);
      else
        return this._remove$1(object);
    },
    _remove$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._last = null;
        this._first = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
        this._modifications = this._modifications + 1 & 67108863;
      }
    },
    _addHashTableEntry$2: function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = this._newLinkedCell$1(element);
      return true;
    },
    _removeHashTableEntry$2: function(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = table[element];
      if (cell == null)
        return false;
      this._unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _newLinkedCell$1: function(element) {
      var cell, last;
      cell = new P.LinkedHashSetCell(element, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      ++this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      --this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_element(), element))
          return i;
      return -1;
    },
    static: {_LinkedHashSet__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  LinkedHashSetCell: {
    "^": "Object;_element<,_next@,_previous@"
  },
  LinkedHashSetIterator: {
    "^": "Object;_set,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._set;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_element();
          this._cell = this._cell.get$_next();
          return true;
        }
      }
    }
  },
  _HashSetBase: {
    "^": "SetBase;"
  },
  IterableBase: {
    "^": "Object;",
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
    },
    get$length: function(_) {
      var it, count;
      it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    elementAt$1: function(_, index) {
      var t1, remaining, element, t2;
      if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
        element = t1.get$current();
        t2 = J.getInterceptor(remaining);
        if (t2.$eq(remaining, 0))
          return element;
        remaining = t2.$sub(remaining, 1);
      }
      throw H.wrapException(P.RangeError$value(index));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  },
  ListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1: function(receiver, action) {
      var $length, i;
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    get$isEmpty: function(receiver) {
      return this.get$length(receiver) === 0;
    },
    add$1: function(receiver, element) {
      var t1 = this.get$length(receiver);
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var t1, $length, t2, i;
      t1 = J.getInterceptor$n(start);
      if (t1.$lt(start, 0) || t1.$gt(start, this.get$length(receiver)))
        H.throwExpression(P.RangeError$range(start, 0, this.get$length(receiver)));
      if (typeof start !== "number")
        return H.iae(start);
      if (end < start || end > this.get$length(receiver))
        H.throwExpression(P.RangeError$range(end, start, this.get$length(receiver)));
      $length = end - start;
      if ($length === 0)
        return;
      t1 = J.getInterceptor$n(skipCount);
      if (t1.$lt(skipCount, 0))
        throw H.wrapException(P.ArgumentError$(skipCount));
      t2 = J.getInterceptor$asx(iterable);
      if (J.$gt$n(t1.$add(skipCount, $length), t2.get$length(iterable)))
        throw H.wrapException(P.StateError$("Not enough elements"));
      if (t1.$lt(skipCount, start))
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t2.$index(iterable, t1.$add(skipCount, i)));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t2.$index(iterable, t1.$add(skipCount, i)));
    },
    removeAt$1: function(receiver, index) {
      var result = this.$index(receiver, index);
      this.setRange$4(receiver, index, this.get$length(receiver) - 1, receiver, J.$add$ns(index, 1));
      this.set$length(receiver, this.get$length(receiver) - 1);
      return result;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    $isList: true,
    $asList: null
  },
  Maps_mapToString_closure: {
    "^": "Closure:43;box_0,result_1",
    call$2: function(k, v) {
      var t1 = this.box_0;
      if (!t1.first_0)
        this.result_1.write$1(", ");
      t1.first_0 = false;
      t1 = this.result_1;
      t1.write$1(k);
      t1.write$1(": ");
      t1.write$1(v);
    }
  },
  ListQueue: {
    "^": "IterableBase;_table,_head,_tail,_modificationCount",
    get$iterator: function(_) {
      return new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
    },
    forEach$1: function(_, action) {
      var modificationCount, i, t1;
      modificationCount = this._modificationCount;
      for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
        t1 = this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        action.call$1(t1[i]);
        if (modificationCount !== this._modificationCount)
          H.throwExpression(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return this._head === this._tail;
    },
    get$length: function(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    },
    get$first: function(_) {
      var t1, t2;
      t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(H.IterableElementError_noElement());
      t2 = this._table;
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      return t2[t1];
    },
    add$1: function(_, element) {
      this._add$1(element);
    },
    clear$0: function(_) {
      var i, t1, t2, t3, t4;
      i = this._head;
      t1 = this._tail;
      if (i !== t1) {
        for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
          if (i < 0 || i >= t3)
            return H.ioore(t2, i);
          t2[i] = null;
        }
        this._tail = 0;
        this._head = 0;
        ++this._modificationCount;
      }
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    removeFirst$0: function() {
      var t1, t2, t3, result;
      t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(H.IterableElementError_noElement());
      ++this._modificationCount;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3)
        return H.ioore(t2, t1);
      result = t2[t1];
      t2[t1] = null;
      this._head = (t1 + 1 & t3 - 1) >>> 0;
      return result;
    },
    _add$1: function(element) {
      var t1, t2, t3;
      t1 = this._table;
      t2 = this._tail;
      t3 = t1.length;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      t1[t2] = element;
      t3 = (t2 + 1 & t3 - 1) >>> 0;
      this._tail = t3;
      if (this._head === t3)
        this._grow$0();
      ++this._modificationCount;
    },
    _grow$0: function() {
      var t1, newTable, t2, split;
      t1 = Array(this._table.length * 2);
      t1.fixed$length = init;
      newTable = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      t1 = this._table;
      t2 = this._head;
      split = t1.length - t2;
      H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
      t1 = this._head;
      t2 = this._table;
      H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
      this._head = 0;
      this._tail = this._table.length;
      this._table = newTable;
    },
    ListQueue$1: function(initialCapacity, $E) {
      var t1 = Array(8);
      t1.fixed$length = init;
      this._table = H.setRuntimeTypeInfo(t1, [$E]);
    },
    static: {"^": "ListQueue__INITIAL_CAPACITY"}
  },
  _ListQueueIterator: {
    "^": "Object;_queue,_collection$_end,_modificationCount,_collection$_position,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1, t2, t3;
      t1 = this._queue;
      if (this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = this._collection$_position;
      if (t2 === this._collection$_end) {
        this._collection$_current = null;
        return false;
      }
      t1 = t1._table;
      t3 = t1.length;
      if (t2 >= t3)
        return H.ioore(t1, t2);
      this._collection$_current = t1[t2];
      this._collection$_position = (t2 + 1 & t3 - 1) >>> 0;
      return true;
    }
  },
  SetMixin: {
    "^": "Object;",
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1._collection$_current);
    }
  },
  SetBase: {
    "^": "SetMixin;"
  }
}],
["dart.core", "dart:core", , P, {
  "^": "",
  Function__toMangledNames: function(namedArguments) {
    var result = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
    namedArguments.forEach$1(0, new P.Function__toMangledNames_closure(result));
    return result;
  },
  Comparable_compare: [function(a, b) {
    return J.compareTo$1$ns(a, b);
  }, "call$2", "Comparable_compare$closure", 4, 0, 23],
  Error_safeToString: function(object) {
    var buffer, t1, i, t2, codeUnit;
    if (typeof object === "number" || typeof object === "boolean" || null == object)
      return J.toString$0(object);
    if (typeof object === "string") {
      buffer = new P.StringBuffer("");
      buffer._contents = "\"";
      for (t1 = object.length, i = 0, t2 = "\""; i < t1; ++i) {
        codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
        if (codeUnit <= 31)
          if (codeUnit === 10)
            t2 = buffer._contents += "\\n";
          else if (codeUnit === 13)
            t2 = buffer._contents += "\\r";
          else if (codeUnit === 9)
            t2 = buffer._contents += "\\t";
          else {
            t2 = buffer._contents += "\\x";
            if (codeUnit < 16)
              buffer._contents = t2 + "0";
            else {
              buffer._contents = t2 + "1";
              codeUnit -= 16;
            }
            t2 = H.Primitives_stringFromCharCode(codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit);
            t2 = buffer._contents += t2;
          }
        else if (codeUnit === 92)
          t2 = buffer._contents += "\\\\";
        else if (codeUnit === 34)
          t2 = buffer._contents += "\\\"";
        else {
          t2 = H.Primitives_stringFromCharCode(codeUnit);
          t2 = buffer._contents += t2;
        }
      }
      t1 = t2 + "\"";
      buffer._contents = t1;
      return t1;
    }
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Exception_Exception: function(message) {
    return new P._ExceptionImplementation(message);
  },
  identical: [function(a, b) {
    return a == null ? b == null : a === b;
  }, "call$2", "identical$closure", 4, 0, 24],
  identityHashCode: [function(object) {
    return H.objectHashCode(object);
  }, "call$1", "identityHashCode$closure", 2, 0, 25],
  List_List$from: function(other, growable, $E) {
    var list, t1;
    list = H.setRuntimeTypeInfo([], [$E]);
    for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
      list.push(t1.get$current());
    if (growable)
      return list;
    list.fixed$length = init;
    return list;
  },
  print: [function(object) {
    var line = H.S(object);
    H.printString(line);
  }, "call$1", "print$closure", 2, 0, 26, 27],
  Function__toMangledNames_closure: {
    "^": "Closure:43;result_0",
    call$2: function(symbol, value) {
      this.result_0.$indexSet(0, symbol.get$_name(), value);
    }
  },
  NoSuchMethodError_toString_closure: {
    "^": "Closure:59;box_0",
    call$2: function(key, value) {
      var t1 = this.box_0;
      if (t1.i_1 > 0)
        t1.sb_0.write$1(", ");
      t1.sb_0.write$1(key.get$_name());
      t1.sb_0.write$1(": ");
      t1.sb_0.write$1(P.Error_safeToString(value));
      ++t1.i_1;
    }
  },
  bool: {
    "^": "Object;",
    $isbool: true
  },
  "+bool": 0,
  Comparable: {
    "^": "Object;"
  },
  DateTime: {
    "^": "Object;millisecondsSinceEpoch<,isUtc",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isDateTime)
        return false;
      return this.millisecondsSinceEpoch === other.millisecondsSinceEpoch && this.isUtc === other.isUtc;
    },
    compareTo$1: function(_, other) {
      return C.JSNumber_methods.compareTo$1(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
    },
    get$hashCode: function(_) {
      return this.millisecondsSinceEpoch;
    },
    toString$0: function(_) {
      var t1, y, m, d, h, min, sec, ms;
      t1 = this.isUtc;
      y = P.DateTime__fourDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(this).getFullYear() + 0);
      m = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(this).getMonth() + 1);
      d = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(this).getDate() + 0);
      h = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(this).getHours() + 0);
      min = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(this).getMinutes() + 0);
      sec = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(this).getSeconds() + 0);
      ms = P.DateTime__threeDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(this).getMilliseconds() + 0);
      if (t1)
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    },
    add$1: function(_, duration) {
      return P.DateTime$fromMillisecondsSinceEpoch(C.JSNumber_methods.$add(this.millisecondsSinceEpoch, duration.get$inMilliseconds()), this.isUtc);
    },
    DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
      if (Math.abs(millisecondsSinceEpoch) > 8640000000000000)
        throw H.wrapException(P.ArgumentError$(millisecondsSinceEpoch));
    },
    DateTime$_now$0: function() {
      H.Primitives_lazyAsJsDate(this);
    },
    $isDateTime: true,
    static: {"^": "DateTime_MONDAY,DateTime_TUESDAY,DateTime_WEDNESDAY,DateTime_THURSDAY,DateTime_FRIDAY,DateTime_SATURDAY,DateTime_SUNDAY,DateTime_DAYS_PER_WEEK,DateTime_JANUARY,DateTime_FEBRUARY,DateTime_MARCH,DateTime_APRIL,DateTime_MAY,DateTime_JUNE,DateTime_JULY,DateTime_AUGUST,DateTime_SEPTEMBER,DateTime_OCTOBER,DateTime_NOVEMBER,DateTime_DECEMBER,DateTime_MONTHS_PER_YEAR,DateTime__MAX_MILLISECONDS_SINCE_EPOCH", DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
        var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
        t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
        return t1;
      }, DateTime__fourDigits: function(n) {
        var absN, sign;
        absN = Math.abs(n);
        sign = n < 0 ? "-" : "";
        if (absN >= 1000)
          return "" + n;
        if (absN >= 100)
          return sign + "0" + H.S(absN);
        if (absN >= 10)
          return sign + "00" + H.S(absN);
        return sign + "000" + H.S(absN);
      }, DateTime__threeDigits: function(n) {
        if (n >= 100)
          return "" + n;
        if (n >= 10)
          return "0" + n;
        return "00" + n;
      }, DateTime__twoDigits: function(n) {
        if (n >= 10)
          return "" + n;
        return "0" + n;
      }}
  },
  $double: {
    "^": "num;"
  },
  "+double": 0,
  Duration: {
    "^": "Object;_duration<",
    $add: function(_, other) {
      return P.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
    },
    $sub: function(_, other) {
      return P.Duration$(0, 0, C.JSInt_methods.$sub(this._duration, other.get$_duration()), 0, 0, 0);
    },
    $tdiv: function(_, quotient) {
      if (quotient === 0)
        throw H.wrapException(P.IntegerDivisionByZeroException$());
      return P.Duration$(0, 0, C.JSInt_methods.$tdiv(this._duration, quotient), 0, 0, 0);
    },
    $lt: function(_, other) {
      return this._duration < other.get$_duration();
    },
    $gt: function(_, other) {
      return C.JSInt_methods.$gt(this._duration, other.get$_duration());
    },
    $ge: function(_, other) {
      return C.JSInt_methods.$ge(this._duration, other.get$_duration());
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isDuration)
        return false;
      return this._duration === other._duration;
    },
    get$hashCode: function(_) {
      return this._duration & 0x1FFFFFFF;
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._duration, other.get$_duration());
    },
    toString$0: function(_) {
      var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
      t1 = new P.Duration_toString_twoDigits();
      t2 = this._duration;
      if (t2 < 0)
        return "-" + P.Duration$(0, 0, -t2, 0, 0, 0).toString$0(0);
      twoDigitMinutes = t1.call$1(C.JSInt_methods.remainder$1(C.JSInt_methods._tdivFast$1(t2, 60000000), 60));
      twoDigitSeconds = t1.call$1(C.JSInt_methods.remainder$1(C.JSInt_methods._tdivFast$1(t2, 1000000), 60));
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSInt_methods.remainder$1(t2, 1000000));
      return "" + C.JSInt_methods._tdivFast$1(t2, 3600000000) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    },
    $isDuration: true,
    static: {"^": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO", Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
        return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
      }}
  },
  Duration_toString_sixDigits: {
    "^": "Closure:60;",
    call$1: function(n) {
      if (n >= 100000)
        return "" + n;
      if (n >= 10000)
        return "0" + n;
      if (n >= 1000)
        return "00" + n;
      if (n >= 100)
        return "000" + n;
      if (n >= 10)
        return "0000" + n;
      return "00000" + n;
    }
  },
  Duration_toString_twoDigits: {
    "^": "Closure:60;",
    call$1: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    }
  },
  Error: {
    "^": "Object;",
    get$stackTrace: function() {
      return new H._StackTrace(this.$thrownJsError, null);
    },
    $isError: true
  },
  NullThrownError: {
    "^": "Error;",
    toString$0: function(_) {
      return "Throw of null.";
    }
  },
  ArgumentError: {
    "^": "Error;message",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Illegal argument(s): " + H.S(t1);
      return "Illegal argument(s)";
    },
    static: {ArgumentError$: function(message) {
        return new P.ArgumentError(message);
      }}
  },
  RangeError: {
    "^": "ArgumentError;message",
    toString$0: function(_) {
      return "RangeError: " + H.S(this.message);
    },
    static: {RangeError$: function(message) {
        return new P.RangeError(message);
      }, RangeError$value: function(value) {
        return new P.RangeError("value " + H.S(value));
      }, RangeError$range: function(value, start, end) {
        return new P.RangeError("value " + H.S(value) + " not in range " + H.S(start) + ".." + H.S(end));
      }}
  },
  NoSuchMethodError: {
    "^": "Error;_core$_receiver,_memberName,_core$_arguments,_namedArguments,_existingArgumentNames",
    toString$0: function(_) {
      var t1, t2, t3, t4, t5, str;
      t1 = {};
      t1.sb_0 = P.StringBuffer$("");
      t1.i_1 = 0;
      for (t2 = this._core$_arguments, t3 = 0; t4 = t2.length, t3 < t4; t3 = ++t1.i_1) {
        if (t3 > 0) {
          t5 = t1.sb_0;
          t5._contents += ", ";
        }
        t5 = t1.sb_0;
        if (t3 < 0)
          return H.ioore(t2, t3);
        str = P.Error_safeToString(t2[t3]);
        t5._contents += typeof str === "string" ? str : H.S(str);
      }
      this._namedArguments.forEach$1(0, new P.NoSuchMethodError_toString_closure(t1));
      return "NoSuchMethodError : method not found: '" + this._memberName.toString$0(0) + "'\nReceiver: " + H.S(P.Error_safeToString(this._core$_receiver)) + "\nArguments: [" + t1.sb_0._contents + "]";
    },
    static: {NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames) {
        return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames);
      }}
  },
  UnsupportedError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    },
    static: {UnsupportedError$: function(message) {
        return new P.UnsupportedError(message);
      }}
  },
  UnimplementedError: {
    "^": "Error;message",
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
    },
    $isError: true,
    static: {UnimplementedError$: function(message) {
        return new P.UnimplementedError(message);
      }}
  },
  StateError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "Bad state: " + this.message;
    },
    static: {StateError$: function(message) {
        return new P.StateError(message);
      }}
  },
  ConcurrentModificationError: {
    "^": "Error;modifiedObject",
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
    },
    static: {ConcurrentModificationError$: function(modifiedObject) {
        return new P.ConcurrentModificationError(modifiedObject);
      }}
  },
  StackOverflowError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Stack Overflow";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: true
  },
  CyclicInitializationError: {
    "^": "Error;variableName",
    toString$0: function(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    },
    static: {CyclicInitializationError$: function(variableName) {
        return new P.CyclicInitializationError(variableName);
      }}
  },
  _ExceptionImplementation: {
    "^": "Object;message",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 == null)
        return "Exception";
      return "Exception: " + H.S(t1);
    },
    $isException: true
  },
  FormatException: {
    "^": "Object;message",
    toString$0: function(_) {
      return "FormatException: " + this.message;
    },
    $isException: true,
    static: {FormatException$: function(message) {
        return new P.FormatException(message);
      }}
  },
  IntegerDivisionByZeroException: {
    "^": "Object;",
    toString$0: function(_) {
      return "IntegerDivisionByZeroException";
    },
    $isException: true,
    static: {IntegerDivisionByZeroException$: function() {
        return new P.IntegerDivisionByZeroException();
      }}
  },
  Expando: {
    "^": "Object;name",
    toString$0: function(_) {
      return "Expando:" + H.S(this.name);
    },
    $index: function(_, object) {
      var values = H.Primitives_getProperty(object, "expando$values");
      return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
    },
    $indexSet: function(_, object, value) {
      var values = H.Primitives_getProperty(object, "expando$values");
      if (values == null) {
        values = new P.Object();
        H.Primitives_setProperty(object, "expando$values", values);
      }
      H.Primitives_setProperty(values, this._getKey$0(), value);
    },
    _getKey$0: function() {
      var key, t1;
      key = H.Primitives_getProperty(this, "expando$key");
      if (key == null) {
        t1 = $.Expando__keyCount;
        $.Expando__keyCount = t1 + 1;
        key = "expando$key$" + t1;
        H.Primitives_setProperty(this, "expando$key", key);
      }
      return key;
    },
    static: {"^": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount"}
  },
  Function: {
    "^": "Object;"
  },
  $int: {
    "^": "num;",
    $is$int: true
  },
  "+int": 0,
  Iterator: {
    "^": "Object;"
  },
  List: {
    "^": "Object;",
    $isList: true,
    $asList: null
  },
  "+List": 0,
  Map: {
    "^": "Object;",
    $isMap: true
  },
  Null: {
    "^": "Object;",
    toString$0: function(_) {
      return "null";
    }
  },
  "+Null": 0,
  num: {
    "^": "Object;",
    $isnum: true
  },
  "+num": 0,
  Object: {
    "^": ";",
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return H.Primitives_objectToString(this);
    },
    noSuchMethod$1: function(_, invocation) {
      throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
    }
  },
  StackTrace: {
    "^": "Object;"
  },
  String: {
    "^": "Object;",
    $isString: true
  },
  "+String": 0,
  StringBuffer: {
    "^": "Object;_contents<",
    get$length: function(_) {
      return this._contents.length;
    },
    get$isEmpty: function(_) {
      return this._contents.length === 0;
    },
    write$1: function(obj) {
      this._contents += typeof obj === "string" ? obj : H.S(obj);
    },
    writeAll$2: function(objects, separator) {
      var iterator, str;
      iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return;
      if (separator.length === 0)
        do {
          str = iterator.get$current();
          this._contents += typeof str === "string" ? str : H.S(str);
        } while (iterator.moveNext$0());
      else {
        this.write$1(iterator.get$current());
        for (; iterator.moveNext$0();) {
          this._contents += separator;
          str = iterator.get$current();
          this._contents += typeof str === "string" ? str : H.S(str);
        }
      }
    },
    toString$0: function(_) {
      return this._contents;
    },
    StringBuffer$1: function($content) {
      this._contents = $content;
    },
    static: {StringBuffer$: function($content) {
        var t1 = new P.StringBuffer("");
        t1.StringBuffer$1($content);
        return t1;
      }}
  },
  Symbol: {
    "^": "Object;",
    $isSymbol: true
  }
}],
["dart.dom.html", "dart:html", , W, {
  "^": "",
  HtmlElement: {
    "^": "Element;",
    "%": "HTMLAppletElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDirectoryElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTemplateElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"
  },
  AnchorElement: {
    "^": "HtmlElement;",
    port$1: function($receiver, arg0) {
      return $receiver.port.call$1(arg0);
    },
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "HTMLAnchorElement"
  },
  AreaElement: {
    "^": "HtmlElement;",
    port$1: function($receiver, arg0) {
      return $receiver.port.call$1(arg0);
    },
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "HTMLAreaElement"
  },
  Blob: {
    "^": "Interceptor;size=",
    "%": "Blob|File"
  },
  CanvasElement: {
    "^": "HtmlElement;",
    get$context2D: function(receiver) {
      return receiver.getContext("2d");
    },
    $isCanvasElement: true,
    "%": "HTMLCanvasElement"
  },
  CharacterData: {
    "^": "Node;data=,length=",
    "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"
  },
  CompositionEvent: {
    "^": "UIEvent;data=",
    "%": "CompositionEvent"
  },
  DialogElement: {
    "^": "HtmlElement;",
    close$1: [function(receiver, $returnValue) {
      return receiver.close($returnValue);
    }, "call$1", "get$close", 2, 0, 35, 36],
    "%": "HTMLDialogElement"
  },
  DomException: {
    "^": "Interceptor;",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "DOMException"
  },
  Element: {
    "^": "Node;id=",
    toString$0: function(receiver) {
      return receiver.localName;
    },
    "%": "SVGAElement|SVGAltGlyphDefElement|SVGAltGlyphElement|SVGAltGlyphItemElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGCircleElement|SVGClipPathElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDefsElement|SVGDescElement|SVGDiscardElement|SVGElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGGElement|SVGGeometryElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGGraphicsElement|SVGHKernElement|SVGImageElement|SVGLineElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRadialGradientElement|SVGRectElement|SVGSVGElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStyleElement|SVGSwitchElement|SVGSymbolElement|SVGTSpanElement|SVGTextContentElement|SVGTextElement|SVGTextPathElement|SVGTextPositioningElement|SVGTitleElement|SVGUseElement|SVGVKernElement|SVGViewElement;Element"
  },
  ErrorEvent: {
    "^": "Event;error=",
    "%": "ErrorEvent"
  },
  Event: {
    "^": "Interceptor;",
    "%": "AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|BeforeUnloadEvent|CSSFontFaceLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|HashChangeEvent|IDBVersionChangeEvent|InstallEvent|InstallPhaseEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|ProgressEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|ResourceProgressEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionEvent|SpeechSynthesisEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent|XMLHttpRequestProgressEvent;Event"
  },
  EventTarget: {
    "^": "Interceptor;",
    "%": ";EventTarget"
  },
  FormElement: {
    "^": "HtmlElement;length=",
    "%": "HTMLFormElement"
  },
  ImageElement: {
    "^": "HtmlElement;",
    complete$1: function($receiver, arg0) {
      return $receiver.complete.call$1(arg0);
    },
    "%": "HTMLImageElement"
  },
  InputElement: {
    "^": "HtmlElement;size=",
    "%": "HTMLInputElement"
  },
  MediaElement: {
    "^": "HtmlElement;error=",
    pause$0: function(receiver) {
      return receiver.pause();
    },
    "%": "HTMLAudioElement|HTMLMediaElement|HTMLVideoElement"
  },
  MediaStream: {
    "^": "EventTarget;id=",
    "%": "MediaStream"
  },
  MessageEvent: {
    "^": "Event;",
    get$data: function(receiver) {
      return P.convertNativeToDart_AcceptStructuredClone(receiver.data, true);
    },
    "%": "MessageEvent"
  },
  MidiConnectionEvent: {
    "^": "Event;",
    port$1: function($receiver, arg0) {
      return $receiver.port.call$1(arg0);
    },
    "%": "MIDIConnectionEvent"
  },
  MidiMessageEvent: {
    "^": "Event;data=",
    "%": "MIDIMessageEvent"
  },
  MidiOutput: {
    "^": "MidiPort;",
    send$2: function(receiver, data, timestamp) {
      return receiver.send(data, timestamp);
    },
    send$1: function($receiver, data) {
      return $receiver.send(data);
    },
    "%": "MIDIOutput"
  },
  MidiPort: {
    "^": "EventTarget;id=",
    "%": "MIDIInput;MIDIPort"
  },
  Node: {
    "^": "EventTarget;",
    toString$0: function(receiver) {
      var t1 = receiver.nodeValue;
      return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
    },
    "%": "Attr|Document|DocumentFragment|DocumentType|HTMLDocument|Notation|ShadowRoot|XMLDocument;Node"
  },
  NodeList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: true,
    "%": "NodeList|RadioNodeList"
  },
  ObjectElement: {
    "^": "HtmlElement;data=",
    "%": "HTMLObjectElement"
  },
  SelectElement: {
    "^": "HtmlElement;length=,size=",
    "%": "HTMLSelectElement"
  },
  SpeechRecognitionError: {
    "^": "Event;error=",
    "%": "SpeechRecognitionError"
  },
  TextEvent: {
    "^": "UIEvent;data=",
    "%": "TextEvent"
  },
  UIEvent: {
    "^": "Event;",
    "%": "DragEvent|FocusEvent|KeyboardEvent|MSPointerEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|PointerEvent|SVGZoomEvent|TouchEvent|WheelEvent;UIEvent"
  },
  Window: {
    "^": "EventTarget;",
    close$0: [function(receiver) {
      return receiver.close();
    }, "call$0", "get$close", 0, 0, 12],
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "DOMWindow|Window"
  },
  Interceptor_ListMixin: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin_ImmutableListMixin: {
    "^": "Interceptor_ListMixin+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    }
  },
  ImmutableListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      return new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null);
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    removeAt$1: function(receiver, pos) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from immutable List."));
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on immutable List."));
    },
    $isList: true,
    $asList: null
  },
  FixedSizeListIterator: {
    "^": "Object;_array,_html$_length,_position,_html$_current",
    moveNext$0: function() {
      var nextPosition, t1;
      nextPosition = this._position + 1;
      t1 = this._html$_length;
      if (nextPosition < t1) {
        this._html$_current = J.$index$asx(this._array, nextPosition);
        this._position = nextPosition;
        return true;
      }
      this._html$_current = null;
      this._position = t1;
      return false;
    },
    get$current: function() {
      return this._html$_current;
    }
  }
}],
["dart.isolate", "dart:isolate", , P, {
  "^": "",
  ReceivePort_ReceivePort: function() {
    var t1, t2, t3;
    t1 = $.RawReceivePortImpl__nextFreeId;
    $.RawReceivePortImpl__nextFreeId = t1 + 1;
    t2 = new H.RawReceivePortImpl(t1, null, false);
    t3 = init.globalState.currentContext;
    t3._addRegistration$2(t1, t2);
    t3._updateGlobalState$0();
    t3 = new H.ReceivePortImpl(t2, null);
    t3.ReceivePortImpl$fromRawReceivePort$1(t2);
    return t3;
  },
  Capability: {
    "^": "Object;",
    $isCapability: true,
    static: {Capability_Capability: function() {
        return new H.CapabilityImpl((Math.random() * 0x100000000 >>> 0) + (Math.random() * 0x100000000 >>> 0) * 4294967296);
      }}
  }
}],
["dart.math", "dart:math", , P, {
  "^": "",
  _JSRandom: {
    "^": "Object;",
    nextInt$1: function(max) {
      if (max <= 0 || max > 4294967296)
        throw H.wrapException(P.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
      return Math.random() * max >>> 0;
    }
  }
}],
["dart.typed_data", "dart:typed_data", , P, {
  "^": "",
  Uint8List: {
    "^": "Object;",
    $isList: true,
    $asList: function() {
      return [P.$int];
    }
  }
}],
["dart.typed_data.implementation", "dart:_native_typed_data", , H, {
  "^": "",
  NativeTypedData: {
    "^": "Interceptor;",
    _invalidIndex$2: function(receiver, index, $length) {
      var t1 = J.getInterceptor$n(index);
      if (t1.$lt(index, 0) || t1.$ge(index, $length))
        throw H.wrapException(P.RangeError$range(index, 0, $length));
      else
        throw H.wrapException(P.ArgumentError$("Invalid list index " + H.S(index)));
    },
    _checkIndex$2: function(receiver, index, $length) {
      if (index >>> 0 !== index || index >= $length)
        this._invalidIndex$2(receiver, index, $length);
    },
    "%": "DataView;ArrayBufferView;NativeTypedArray|NativeTypedArray_ListMixin|NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble|NativeTypedArray_ListMixin0|NativeTypedArray_ListMixin_FixedLengthListMixin0|NativeTypedArrayOfInt"
  },
  NativeFloat32List: {
    "^": "NativeTypedArrayOfDouble;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$double];
    },
    "%": "Float32Array"
  },
  NativeFloat64List: {
    "^": "NativeTypedArrayOfDouble;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$double];
    },
    "%": "Float64Array"
  },
  NativeInt16List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    "%": "Int16Array"
  },
  NativeInt32List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    "%": "Int32Array"
  },
  NativeInt8List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    "%": "Int8Array"
  },
  NativeUint16List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    "%": "Uint16Array"
  },
  NativeUint32List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    "%": "Uint32Array"
  },
  NativeUint8ClampedList: {
    "^": "NativeTypedArrayOfInt;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    "%": "CanvasPixelArray|Uint8ClampedArray"
  },
  NativeUint8List: {
    "^": "NativeTypedArrayOfInt;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    "%": ";Uint8Array"
  },
  NativeTypedArray: {
    "^": "NativeTypedData;",
    get$length: function(receiver) {
      return receiver.length;
    },
    _setRangeFast$4: function(receiver, start, end, source, skipCount) {
      var t1, count, sourceLength;
      t1 = receiver.length + 1;
      this._checkIndex$2(receiver, start, t1);
      this._checkIndex$2(receiver, end, t1);
      if (J.$gt$n(start, end))
        throw H.wrapException(P.RangeError$range(start, 0, end));
      if (typeof start !== "number")
        return H.iae(start);
      count = end - start;
      if (J.$lt$n(skipCount, 0))
        throw H.wrapException(P.ArgumentError$(skipCount));
      sourceLength = source.length;
      if (typeof skipCount !== "number")
        return H.iae(skipCount);
      if (sourceLength - skipCount < count)
        throw H.wrapException(P.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJavaScriptIndexingBehavior: true
  },
  NativeTypedArrayOfDouble: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin;",
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfDouble) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      P.ListMixin.prototype.setRange$4.call(this, receiver, start, end, iterable, skipCount);
    },
    $isNativeTypedArrayOfDouble: true,
    $isList: true,
    $asList: function() {
      return [P.$double];
    }
  },
  NativeTypedArray_ListMixin: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [P.$double];
    }
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin: {
    "^": "NativeTypedArray_ListMixin+FixedLengthListMixin;"
  },
  NativeTypedArrayOfInt: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin0;",
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfInt) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      P.ListMixin.prototype.setRange$4.call(this, receiver, start, end, iterable, skipCount);
    },
    $isNativeTypedArrayOfInt: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    }
  },
  NativeTypedArray_ListMixin0: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [P.$int];
    }
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin0: {
    "^": "NativeTypedArray_ListMixin0+FixedLengthListMixin;"
  }
}],
["dart2js._js_primitives", "dart:_js_primitives", , H, {
  "^": "",
  printString: function(string) {
    if (typeof dartPrint == "function") {
      dartPrint(string);
      return;
    }
    if (typeof console == "object" && typeof console.log != "undefined") {
      console.log(string);
      return;
    }
    if (typeof window == "object")
      return;
    if (typeof print == "function") {
      print(string);
      return;
    }
    throw "Unable to print message: " + String(string);
  }
}],
["ds.core", "package:ds/core/dscore.dart", , F, {
  "^": "",
  Counter: {
    "^": "Object;_count,handler",
    toString$0: function(_) {
      return "Counter: " + C.JSInt_methods.toString$0(this._count);
    }
  },
  DS: {
    "^": "Object;marked<",
    mark$0: function() {
      this.marked = true;
    },
    unmark$0: function() {
      this.marked = false;
    }
  },
  dsFilter: {
    "^": "Object;"
  },
  dsAbstractNode: {
    "^": "Object;data>",
    mark$0: function() {
      this._mark = true;
    },
    unmark$0: function() {
      this._mark = false;
    },
    get$marked: function() {
      return this._mark;
    },
    toString$0: function(_) {
      return J.toString$0(this.get$data(this));
    },
    compare$1: function(a) {
      return J.$eq(J.get$data$x(a), this.get$data(this));
    }
  },
  dsAbstractList: {
    "^": "DS;",
    get$size: function(_) {
      return this.bomb._count;
    },
    get$isEmpty: function(_) {
      return this.head == null && this.tail == null;
    },
    nullify$0: function() {
      this.tail = null;
      this.head = null;
      this.bomb._count = 0;
    },
    isDense$0: function() {
      return false;
    }
  },
  dsGSearcher: {
    "^": "Object;",
    processor$3: function(arg0, arg1, arg2) {
      return this.processor.call$3(arg0, arg1, arg2);
    },
    isReady$1: function(g) {
      var t1, t2;
      t1 = g.nodes;
      t2 = t1.head == null;
      if (t2 && t1.tail == null || t2)
        return false;
      return true;
    }
  },
  dsGArc: {
    "^": "Object;node<,weight<",
    toString$0: function(_) {
      return "NodeData:" + H.S(J.get$data$x(this.node)) + " Weight:" + H.S(this.weight);
    },
    compare$1: function(a) {
      var t1, t2;
      if (this.node.compare$1(a.get$node()) === true) {
        t1 = this.weight;
        t2 = a.get$weight();
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      if (t1)
        return true;
      return a;
    }
  },
  dsGNode: {
    "^": "dsAbstractNode;arcs<,data:core0$dsGNode$data>",
    toString$0: function(_) {
      return "data:" + H.S(this.core0$dsGNode$data);
    },
    compare$1: function(a) {
      if (J.$eq(J.get$data$x(a), this.core0$dsGNode$data))
        return true;
      return false;
    }
  },
  dsAbstractGraph: {
    "^": "DS;",
    get$size: function(_) {
      return this.nodes.bomb._count;
    }
  },
  dsAbstractIterator: {
    "^": "Object;node<",
    get$size: function(_) {
      return this.ds.bomb._count;
    },
    get$currentNode: function() {
      var t1 = this.node;
      if (t1 == null)
        return;
      return t1;
    },
    get$current: function() {
      var t1 = this.node;
      if (t1 == null)
        return;
      return t1.data;
    },
    current$1: function(arg0) {
      return this.get$current().call$1(arg0);
    },
    current$0: function() {
      return this.get$current().call$0();
    },
    move$3: function($init, change, reset) {
      var t1;
      if (this._core0$_state === 2) {
        reset.call$0();
        this.reset$0(0);
      }
      t1 = this._core0$_state;
      if (t1 === 0) {
        if ($init.call$0() !== true)
          return false;
        this._core0$_state = 1;
      } else if (t1 === 1)
        if (change.call$0() !== true) {
          this._core0$_state = 2;
          return false;
        }
      ++this.counter._count;
      return true;
    },
    moveNext$1: function(n) {
      return this.move$3(new F.dsAbstractIterator_moveNext_closure(this), new F.dsAbstractIterator_moveNext_closure0(this), new F.dsAbstractIterator_moveNext_closure1(n));
    },
    moveNext$0: function() {
      return this.moveNext$1(null);
    },
    moveNext$0: function() {
      return this.moveNext$1(null);
    },
    reset$0: function(_) {
      this.node = null;
      this._core0$_state = 0;
      this.counter._count = 0;
    }
  },
  dsAbstractIterator_moveNext_closure: {
    "^": "Closure:38;this_0",
    call$0: function() {
      var t1, t2;
      t1 = this.this_0;
      t2 = t1.ds.head;
      if (t2 == null)
        return false;
      t1.node = t2;
      return true;
    }
  },
  dsAbstractIterator_moveNext_closure0: {
    "^": "Closure:38;this_1",
    call$0: function() {
      var t1, t2;
      t1 = this.this_1;
      t2 = t1.node.core0$dsNode$right;
      t1.node = t2;
      t1 = t1.ds.head;
      if ((t2 == null ? t1 == null : t2 === t1) || t2 == null || t2.core0$dsNode$right == null)
        return false;
      return true;
    }
  },
  dsAbstractIterator_moveNext_closure1: {
    "^": "Closure:38;n_2",
    call$0: function() {
      return true;
    }
  },
  GraphFilter: {
    "^": "dsFilter;searcher,processor,graph,_core0$_key,_future,_all",
    processor$3: function(arg0, arg1, arg2) {
      return this.processor.call$3(arg0, arg1, arg2);
    },
    filter$1: function(k) {
      this._future = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
      this._core0$_key = k;
      this.searcher.search$1(0, this.graph).then$1(new F.GraphFilter_filter_closure(this));
      return this._future.future;
    },
    _filteringOneProcessor$3: [function(node, arc, graph) {
      var n, t1;
      n = this.processor$3(this._core0$_key, node, arc);
      if (n != null) {
        t1 = this._future.future;
        if (t1._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t1._asyncComplete$1(n);
        graph._end = true;
      }
    }, function(node, arc) {
      return this._filteringOneProcessor$3(node, arc, null);
    }, "_filteringOneProcessor$2", function(node) {
      return this._filteringOneProcessor$3(node, null, null);
    }, "_filteringOneProcessor$1", "call$3", "call$2", "call$1", "get$_filteringOneProcessor", 2, 4, 61, 17, 17],
    GraphFilter$breadthFirst$1: function(processor) {
      var t1 = new F.dsBreadthFirst(null, null, false);
      t1.processor = this.get$_filteringOneProcessor();
      this.searcher = t1;
      this.processor = processor;
    },
    GraphFilter$depthFirst$1: function(processor) {
      var t1 = new F.dsDepthFirst(null, null, false);
      t1.processor = this.get$_filteringOneProcessor();
      this.searcher = t1;
      this.processor = processor;
    }
  },
  GraphFilter_filter_closure: {
    "^": "Closure:31;this_0",
    call$1: [function(n) {
      if (this.this_0._future.future._state === 0)
        ;
    }, "call$1", null, 2, 0, null, 32, "call"]
  },
  dsDepthFirst: {
    "^": "dsGSearcher;root,processor,_end",
    search$1: function(_, g) {
      var drained;
      if (!this.isReady$1(g))
        return P._Future$immediate(null, null);
      this._end = false;
      drained = this.processArcs$2(H.setRuntimeTypeInfo(new F.dsGraphArc(g.nodes.head.data, null), [null]), H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]));
      g.clearMarks$0();
      return drained;
    },
    processArcs$2: function(a, d) {
      var t1, n, arc;
      if (a == null || a.get$node() == null || this._end) {
        t1 = d.future;
        if (t1._state === 0)
          t1._asyncComplete$1(null);
        return t1;
      }
      n = a.get$node();
      this.processor$3(n, a, this);
      n.mark$0();
      t1 = n.get$arcs();
      t1.toString;
      arc = new F.dsListIterator(0, null, null, t1);
      arc.counter = new F.Counter(0, arc);
      for (; arc.moveNext$0();)
        if (!arc.get$current().get$node().get$marked())
          this.processArcs$2(arc.get$current(), d);
      t1 = d.future;
      if (t1._state === 0)
        t1._asyncComplete$1(null);
      return t1;
    }
  },
  dsBreadthFirst: {
    "^": "dsGSearcher;root,processor,_end",
    search$1: function(_, g) {
      var future;
      if (!this.isReady$1(g))
        return;
      this._end = false;
      future = this.processArcs$1(H.setRuntimeTypeInfo(new F.dsGraphArc(g.nodes.head.data, null), [null]));
      g.clearMarks$0();
      return future;
    },
    processArcs$1: function(a) {
      var drained, t1, queue, t2, t3, arc;
      drained = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
      t1 = a.node == null || this._end;
      if (t1) {
        t1 = drained.future;
        if (t1._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t1._asyncComplete$1(null);
        return t1;
      }
      queue = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [null]);
      queue.ListQueue$1(null, null);
      queue._add$1(a);
      queue.get$first(queue).get$node().mark$0();
      for (; !queue.get$isEmpty(queue);) {
        if (this._end) {
          this._end = false;
          break;
        }
        t1 = queue._head;
        if (t1 === queue._tail)
          H.throwExpression(H.IterableElementError_noElement());
        t2 = queue._table;
        if (t1 >= t2.length)
          return H.ioore(t2, t1);
        t1 = t2[t1].get$node();
        t2 = queue._head;
        if (t2 === queue._tail)
          H.throwExpression(H.IterableElementError_noElement());
        t3 = queue._table;
        if (t2 >= t3.length)
          return H.ioore(t3, t2);
        this.processor$3(t1, t3[t2], this);
        t1 = queue._head;
        if (t1 === queue._tail)
          H.throwExpression(H.IterableElementError_noElement());
        t2 = queue._table;
        if (t1 >= t2.length)
          return H.ioore(t2, t1);
        t1 = t2[t1].get$node().get$arcs();
        t1.toString;
        arc = new F.dsListIterator(0, null, null, t1);
        arc.counter = new F.Counter(0, arc);
        for (; arc.moveNext$0();)
          if (!arc.get$current().get$node().get$marked()) {
            queue._add$1(arc.get$current());
            arc.get$current().get$node().mark$0();
          }
        queue.removeFirst$0();
      }
      t1 = drained.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(null);
      return t1;
    }
  },
  dsGraph: {
    "^": "dsAbstractGraph;git,nodes,marked,bomb",
    add$1: function(_, data) {
      var t1, t2;
      if (!!J.getInterceptor(data).$isdsGraphNode)
        return this.nodes.append$1(0, data).data;
      t1 = this.nodes;
      t2 = H.setRuntimeTypeInfo(new F.dsGraphNode(null, true, null, data, null, null, null, false), [null, null]);
      t2.dsGraphNode$2$unique(data, true, null, null);
      return t1.append$1(0, t2).data;
    },
    bind$3: function(from, to, weight) {
      from.addArc$2(to, weight);
      if (!this.git.has$1(from))
        this.add$1(0, from);
      if (!this.git.has$1(to))
        this.add$1(0, to);
    },
    eject$1: function(to) {
      var t1, handle;
      t1 = this.nodes;
      t1.toString;
      handle = new F.dsListIterator(0, null, null, t1);
      handle.counter = new F.Counter(0, handle);
      for (; handle.moveNext$0();)
        handle.get$current().removeArc$1(to);
      return this.git.remove$1(0, to);
    },
    clearMarks$0: function() {
      for (; this.git.moveNext$0();)
        this.git.get$current().unmark$0();
    },
    toString$0: function(_) {
      var map, t1;
      map = P.StringBuffer$("");
      map.write$1("<GraphMap:\n");
      for (; this.git.moveNext$0();) {
        map._contents += "<Edge:<";
        t1 = this.git.get$current().printArcs$0();
        t1 = map._contents += t1;
        map._contents = t1 + ">>";
      }
      map.write$1(">");
      return map._contents;
    },
    get$isEmpty: function(_) {
      var t1 = this.nodes;
      return t1.head == null && t1.tail == null;
    },
    get$size: function(_) {
      return this.nodes.bomb._count;
    },
    dsGraph$0: function($T, $M) {
      var t1, t2;
      t1 = H.setRuntimeTypeInfo(new F.dsList(null, null, null, null, false, null), [[F.dsGNode, $T, $M]]);
      t1.bomb = new F.Counter(0, t1);
      t2 = new F.dsListIterator(0, null, null, t1);
      t2.counter = new F.Counter(0, t2);
      t1._it = t2;
      this.nodes = t1;
      t1 = new F.dsListIterator(0, null, null, t1);
      t1.counter = new F.Counter(0, t1);
      this.git = t1;
    }
  },
  dsGraphArc: {
    "^": "dsGArc;node,weight",
    toString$0: function(_) {
      return "Arc: Node data " + H.S(J.get$data$x(this.node)) + ", Weight: " + H.S(this.weight);
    }
  },
  dsGraphNode: {
    "^": "dsGNode;_dit,isUniq,arcs,core0$dsGNode$data,left,right,data,_mark",
    addArc$2: function(a, n) {
      if (!this.isUniq) {
        this.arcs.append$1(0, H.setRuntimeTypeInfo(new F.dsGraphArc(a, n), [null]));
        return;
      }
      this.probe$2(a, new F.dsGraphNode_addArc_closure(this, a, n));
    },
    removeArc$1: function(n) {
      return this.arcFinder$2(n, new F.dsGraphNode_removeArc_closure(this));
    },
    arcFinder$2: function(n, callback) {
      this.probe$2(n, new F.dsGraphNode_arcFinder_closure(callback));
    },
    probe$2: function(n, callback) {
      var t1, itr;
      t1 = this.arcs;
      t1.toString;
      itr = new F.dsListIterator(0, null, null, t1);
      itr.counter = new F.Counter(0, itr);
      for (; itr.moveNext$0();) {
        if (itr.get$current().get$node().compare$1(n) !== true)
          continue;
        return callback.call$1(itr.get$current());
      }
      return callback.call$1(null);
    },
    printArcs$0: function() {
      var buffer, str, t1;
      buffer = P.StringBuffer$("");
      buffer.write$1("Node: " + H.S(this.core0$dsGNode$data) + " with Arcs: " + this.arcs.bomb._count);
      buffer.write$1("\n");
      for (; this._dit.moveNext$0();) {
        buffer._contents += "<";
        str = J.toString$0(this._dit.get$current());
        t1 = buffer._contents += typeof str === "string" ? str : H.S(str);
        buffer._contents = t1 + ">\n";
      }
      return buffer._contents;
    },
    dsGraphNode$2$unique: function(data, unique, $T, $M) {
      var t1, t2;
      t1 = H.setRuntimeTypeInfo(new F.dsList(null, null, null, null, false, null), [[F.dsGraphArc, $M]]);
      t1.bomb = new F.Counter(0, t1);
      t2 = new F.dsListIterator(0, null, null, t1);
      t2.counter = new F.Counter(0, t2);
      t1._it = t2;
      this.arcs = t1;
      t1 = new F.dsListIterator(0, null, null, t1);
      t1.counter = new F.Counter(0, t1);
      this._dit = t1;
      this.isUniq = unique;
    },
    $isdsGraphNode: true
  },
  dsGraphNode_addArc_closure: {
    "^": "Closure:31;this_0,a_1,n_2",
    call$1: function(m) {
      if (m == null)
        return this.this_0.arcs.append$1(0, H.setRuntimeTypeInfo(new F.dsGraphArc(this.a_1, this.n_2), [null]));
    }
  },
  dsGraphNode_removeArc_closure: {
    "^": "Closure:31;this_0",
    call$1: function(m) {
      var t1 = this.this_0;
      t1._dit.remove$1(0, m);
      m.get$node().removeArc$1(t1);
      return m;
    }
  },
  dsGraphNode_arcFinder_closure: {
    "^": "Closure:31;callback_0",
    call$1: function(m) {
      if (m != null)
        return this.callback_0.call$1(m);
    }
  },
  dsIterator: {
    "^": "dsAbstractIterator;",
    has$2: function(n, m) {
      var t1, $self, t2;
      t1 = this.ds;
      if (t1.head == null && t1.tail == null)
        return false;
      t1.toString;
      $self = new F.dsListIterator(0, null, null, t1);
      $self.counter = new F.Counter(0, $self);
      for (t1 = m == null, t2 = !t1; $self.moveNext$0();) {
        if (t1 && !J.$eq($self.get$current(), n))
          continue;
        if (t2 && m.call$2($self, n) !== true)
          continue;
        if (t2 && m.call$2($self, n) === true)
          return true;
        return true;
      }
      return false;
    },
    has$1: function(n) {
      return this.has$2(n, null);
    },
    compare$2: function(l, m) {
      var t1, me, matchCount;
      t1 = this.ds;
      if (t1.head == null && t1.tail == null)
        return;
      if (t1.bomb._count !== J.get$size$x(l))
        return false;
      t1 = this.ds;
      t1.toString;
      me = new F.dsListIterator(0, null, null, t1);
      me.counter = new F.Counter(0, me);
      for (matchCount = 0; l.moveNext$0();)
        if (me.has$2(l.get$current(), m))
          ++matchCount;
      if (matchCount === me.ds.bomb._count)
        return true;
      return false;
    },
    compare$1: function(l) {
      return this.compare$2(l, null);
    },
    get$2: function(n, m) {
      var t1, $self;
      t1 = this.ds;
      if (t1.head == null && t1.tail == null)
        return;
      t1.toString;
      $self = new F.dsListIterator(0, null, null, t1);
      $self.counter = new F.Counter(0, $self);
      for (; $self.moveNext$0();) {
        if (!J.$eq($self.get$current(), n))
          continue;
        return $self.get$currenNode();
      }
      return;
    },
    get$1: function(n) {
      return this.get$2(n, null);
    },
    cascade$2: function(n, complete) {
      var t1, $self;
      t1 = this.ds;
      if (t1.head == null && t1.tail == null)
        return;
      t1.toString;
      $self = new F.dsListIterator(0, null, null, t1);
      $self.counter = new F.Counter(0, $self);
      for (; $self.moveNext$0();)
        n.call$1($self);
      if (complete != null)
        complete.call$1($self);
    },
    cascade$1: function(n) {
      return this.cascade$2(n, null);
    }
  },
  dsListIterator: {
    "^": "dsIterator;_core0$_state,counter,node,ds",
    remove$3: function(_, l, all, m) {
      var steps, res, right, left, t1, t2;
      steps = new F.dsListIterator(0, null, null, this.ds);
      steps.counter = new F.Counter(0, steps);
      for (; steps.moveNext$0();) {
        if (!J.$eq(steps.get$current(), l))
          continue;
        if (J.$eq(steps.get$current(), l)) {
          res = steps.get$currentNode();
          right = res.core0$dsNode$right;
          left = res.core0$dsNode$left;
          if (right != null)
            left.core0$dsNode$right = right;
          if (left != null)
            right.core0$dsNode$left = left;
          t1 = steps.ds;
          t2 = t1.head;
          if (t2 == null ? res == null : t2 === res)
            t1.head = right;
          t2 = t1.tail;
          if (t2 == null ? res == null : t2 === res)
            t1.tail = left;
          res.core0$dsNode$left = null;
          res.core0$dsNode$right = null;
          --t1.bomb._count;
          return res;
        }
      }
      steps.reset$0(0);
      steps.ds = null;
    },
    remove$1: function($receiver, l) {
      return this.remove$3($receiver, l, null, null);
    }
  },
  dsList: {
    "^": "dsAbstractList;_it,head,tail,maxSize,marked,bomb",
    add$1: function(_, d) {
      return this.append$1(0, d);
    },
    append$1: function(_, d) {
      var t1, tail, t2;
      if (this.head == null && this.tail == null) {
        t1 = F.dsNode$(d, null, null, null);
        this.tail = t1;
        this.head = t1;
        ++this.bomb._count;
        return t1;
      }
      tail = this.tail;
      tail.core0$dsNode$right;
      t1 = F.dsNode$(d, null, null, null);
      this.tail = t1;
      t2 = this.head;
      t1.core0$dsNode$right = t2;
      t1.core0$dsNode$left = tail;
      if (tail != null)
        tail.core0$dsNode$right = t1;
      t2.core0$dsNode$left = t1;
      ++this.bomb._count;
      return t1;
    },
    removeHead$0: function() {
      var t1, t2, left, right;
      t1 = this.head;
      if (t1 == null && this.tail == null)
        return this.nullify$0();
      t2 = this.tail;
      if (t1 == null ? t2 == null : t1 === t2) {
        t1.core0$dsNode$right = null;
        t1.core0$dsNode$left = null;
        this.nullify$0();
        return t1;
      }
      left = t1.core0$dsNode$left;
      right = t1.core0$dsNode$right;
      t2 = left == null;
      if (t2 && right == null) {
        this.nullify$0();
        return t1;
      }
      this.head = right;
      right.core0$dsNode$left = left;
      if (!t2)
        left.core0$dsNode$right = right;
      t1.core0$dsNode$right = null;
      t1.core0$dsNode$left = null;
      --this.bomb._count;
      return t1;
    },
    removeAll$0: function() {
      if (this.head == null && this.tail == null)
        return;
      this.free$0();
      this.tail = null;
      this.head = null;
    },
    free$0: function() {
      var t1 = this.head;
      if (t1 == null && this.tail == null)
        return;
      t1.freeCascade$0();
      this.head.unmarkCascade$0();
      this.tail = null;
      this.head = null;
      this.bomb._count = 0;
    },
    toString$0: function(_) {
      var buffer, it, str, t1;
      buffer = P.StringBuffer$("");
      it = new F.dsListIterator(0, null, null, this);
      it.counter = new F.Counter(0, it);
      for (; it.moveNext$0();) {
        str = it.get$current();
        t1 = buffer._contents += typeof str === "string" ? str : H.S(str);
        buffer._contents = t1 + "::";
      }
      return buffer._contents;
    },
    get$iterator: function(_) {
      var t1 = new F.dsListIterator(0, null, null, this);
      t1.counter = new F.Counter(0, t1);
      return t1;
    },
    static: {dsList_create: function(n) {
        var t1, t2;
        t1 = H.setRuntimeTypeInfo(new F.dsList(null, null, null, null, false, null), [null]);
        t1.bomb = new F.Counter(0, t1);
        t2 = new F.dsListIterator(0, null, null, t1);
        t2.counter = new F.Counter(0, t2);
        t1._it = t2;
        return t1;
      }}
  },
  dsNode: {
    "^": "dsAbstractNode;core0$dsNode$left,core0$dsNode$right,left,right,data,_mark",
    freeCascade$0: function() {
      this.data = null;
      var t1 = this.core0$dsNode$left;
      if (t1 != null && t1.data != null)
        t1.freeCascade$0();
      t1 = this.core0$dsNode$right;
      if (t1 != null && t1.data != null)
        t1.freeCascade$0();
    },
    unmarkCascade$0: function() {
      this._mark = false;
      var t1 = this.core0$dsNode$left;
      if (t1 != null && t1._mark)
        t1.unmarkCascade$0();
      t1 = this.core0$dsNode$right;
      if (t1 != null && t1._mark)
        t1.unmarkCascade$0();
    },
    dsNode$3$l$r: function(d, l, r, $T) {
      this.data = d;
    },
    static: {dsNode$: function(d, l, r, $T) {
        var t1 = H.setRuntimeTypeInfo(new F.dsNode(null, null, null, null, null, false), [$T]);
        t1.dsNode$3$l$r(d, l, r, $T);
        return t1;
      }}
  }
}],
["html_common", "dart:html_common", , P, {
  "^": "",
  convertNativeToDart_AcceptStructuredClone: function(object, mustCopy) {
    var copies = [];
    return new P.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new P.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new P.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new P.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
  },
  convertNativeToDart_AcceptStructuredClone_findSlot: {
    "^": "Closure:21;values_0,copies_1",
    call$1: function(value) {
      var t1, $length, i, t2;
      t1 = this.values_0;
      $length = t1.length;
      for (i = 0; i < $length; ++i) {
        t2 = t1[i];
        if (t2 == null ? value == null : t2 === value)
          return i;
      }
      t1.push(value);
      this.copies_1.push(null);
      return $length;
    }
  },
  convertNativeToDart_AcceptStructuredClone_readSlot: {
    "^": "Closure:62;copies_2",
    call$1: function(i) {
      var t1 = this.copies_2;
      if (i >= t1.length)
        return H.ioore(t1, i);
      return t1[i];
    }
  },
  convertNativeToDart_AcceptStructuredClone_writeSlot: {
    "^": "Closure:63;copies_3",
    call$2: function(i, x) {
      var t1 = this.copies_3;
      if (i >= t1.length)
        return H.ioore(t1, i);
      t1[i] = x;
    }
  },
  convertNativeToDart_AcceptStructuredClone_walk: {
    "^": "Closure:31;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
    call$1: function(e) {
      var slot, copy, t1, key, $length, t2, i;
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      if (e instanceof Date)
        return P.DateTime$fromMillisecondsSinceEpoch(e.getTime(), true);
      if (e instanceof RegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (Object.getPrototypeOf(e) === Object.prototype) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        if (copy != null)
          return copy;
        copy = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        this.writeSlot_7.call$2(slot, copy);
        for (t1 = Object.keys(e), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
          key = t1._current;
          copy.$indexSet(0, key, this.call$1(e[key]));
        }
        return copy;
      }
      if (e instanceof Array) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        if (copy != null)
          return copy;
        t1 = J.getInterceptor$asx(e);
        $length = t1.get$length(e);
        copy = this.mustCopy_4 ? new Array($length) : e;
        this.writeSlot_7.call$2(slot, copy);
        if (typeof $length !== "number")
          return H.iae($length);
        t2 = J.getInterceptor$ax(copy);
        i = 0;
        for (; i < $length; ++i)
          t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
        return copy;
      }
      return e;
    }
  }
}],
["hubutils", "package:hub/src/hub.dart", , N, {
  "^": "",
  Enums_nth: function(a, ind) {
    if (ind >= a.length)
      return;
    return a[ind];
  },
  Enums_nthFor: function(a) {
    if (!!J.getInterceptor(a).$isList)
      return new N.Enums_nthFor_closure(a);
    return;
  },
  Enums_eachSync: function(n, it, c) {
    return N.Enums_eachSyncList(n, it, c);
  },
  Enums_eachAsync: function(n, it, c) {
    return N.Enums_eachAsyncList(n, it, c);
  },
  Enums_eachAsyncList: function(a, iterator, complete) {
    var t1, t2, total, t3;
    t1 = {};
    t2 = J.getInterceptor$asx(a);
    if (t2.get$length(a) <= 0) {
      if (complete != null)
        complete.call$2(a, null);
      return;
    }
    t1.kill_0 = false;
    total = t2.get$length(a);
    t1.i_1 = 0;
    for (t1.i_1 = 0, t3 = 0; t3 < total; t3 = ++t1.i_1) {
      if (t1.kill_0)
        break;
      iterator.call$4(t2.$index(a, t3), t1.i_1, a, new N.Enums_eachAsyncList_closure(t1, a, complete, total));
    }
  },
  Enums_eachAsyncMap: function(a, iterator, complete) {
    var t1, t2, keys, f;
    t1 = {};
    if (a.get$length(a) <= 0) {
      if (complete != null)
        complete.call$2(a, null);
      return;
    }
    t1.kill_0 = false;
    t1.total_1 = a.get$length(a);
    t2 = a.get$keys();
    keys = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "IterableBase", 0));
    for (t2 = new H.ListIterator(keys, keys.length, 0, null); t2.moveNext$0();) {
      f = t2._current;
      if (t1.kill_0)
        break;
      iterator.call$4(a.$index(0, f), f, a, new N.Enums_eachAsyncMap_closure(t1, a, complete));
    }
  },
  Enums_eachSyncList: function(a, iterator, complete) {
    var t1, t2, fuse;
    t1 = {};
    t2 = a.length;
    if (t2 <= 0) {
      if (complete != null)
        complete.call$2(a, null);
      return;
    }
    t1.step_0 = 0;
    t1.tapper_1 = null;
    fuse = new N.Enums_eachSyncList_closure(t1, a, iterator, complete, t2);
    t1.tapper_1 = new N.Enums_eachSyncList_closure0(fuse);
    return fuse.call$0();
  },
  Enums_merge: function(a, b, override) {
    var merged = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    merged.addAll$1(0, a);
    b.forEach$1(0, new N.Enums_merge_closure(override, merged));
    return merged;
  },
  Enums_filterKeys: function(m, mod, complete) {
    var mapped, t1;
    mapped = [];
    t1 = J.getInterceptor(m);
    if (!!t1.$isList)
      N.Enums_eachAsync(m, new N.Enums_filterKeys_closure(mod, mapped), complete);
    if (!!t1.$isMap)
      N.Enums_eachAsyncMap(m, new N.Enums_filterKeys_closure0(mod, mapped), complete);
    return mapped;
  },
  _empty: [function(t, s) {
  }, "call$2", "_empty$closure", 4, 0, 28, 29, 30],
  Funcs_tagDefer: function(n, m, fmt) {
    return new N.Funcs_tagDefer_closure(n, m, fmt);
  },
  Funcs_tagPrint: function(tag, n, sx, format, nprinter, prettier) {
    var t1 = {};
    t1.format_0 = format;
    t1.prettier_1 = prettier;
    t1.format_0 = N.Funcs_switchUnless(format, "{tag} -> {res}");
    t1.prettier_1 = N.Funcs_switchUnless(prettier, N.Funcs_identity$closure());
    return N.Funcs_compose(new N.Funcs_tagPrint_closure(t1, tag, N.Funcs_switchUnless(nprinter, P.print$closure())), n, sx);
  },
  Funcs_identity: [function(n) {
    return n;
  }, "call$1", "Funcs_identity$closure", 2, 0, 31, 32],
  Funcs_base10Functionator: function(g, m) {
    if (m === 1)
      return new N.Funcs_base10Functionator_closure(g);
    if (m === 2)
      return new N.Funcs_base10Functionator_closure0(g);
    if (m === 3)
      return new N.Funcs_base10Functionator_closure1(g);
    if (m === 4)
      return new N.Funcs_base10Functionator_closure2(g);
    if (m === 5)
      return new N.Funcs_base10Functionator_closure3(g);
    if (m === 6)
      return new N.Funcs_base10Functionator_closure4(g);
    if (m === 7)
      return new N.Funcs_base10Functionator_closure5(g);
    if (m === 8)
      return new N.Funcs_base10Functionator_closure6(g);
    if (m === 9)
      return new N.Funcs_base10Functionator_closure7(g);
    if (m === 10)
      return new N.Funcs_base10Functionator_closure8(g);
    return;
  },
  Funcs_compose: function(n, m, args) {
    if (args === 1)
      return new N.Funcs_compose_closure(n, m);
    if (args === 2)
      return N.Funcs_base10Functionator(new N.Funcs_compose_closure0().call$2(n, m), 2);
    if (args === 3)
      return N.Funcs_base10Functionator(new N.Funcs_compose_closure1().call$2(n, m), 3);
    if (args === 4)
      return N.Funcs_base10Functionator(new N.Funcs_compose_closure2().call$2(n, m), 4);
    if (args === 5)
      return N.Funcs_base10Functionator(new N.Funcs_compose_closure3().call$2(n, m), 5);
    if (args === 6)
      return N.Funcs_base10Functionator(new N.Funcs_compose_closure4().call$2(n, m), 6);
    if (args === 7)
      return N.Funcs_base10Functionator(new N.Funcs_compose_closure5().call$2(n, m), 6);
    if (args === 8)
      return N.Funcs_base10Functionator(new N.Funcs_compose_closure6().call$2(n, m), 7);
    if (args === 9)
      return N.Funcs_base10Functionator(new N.Funcs_compose_closure7().call$2(n, m), 8);
    if (args === 10)
      return N.Funcs_base10Functionator(new N.Funcs_compose_closure8().call$2(n, m), 9);
  },
  Funcs_cycle: function(times, fn) {
    if (times <= 0)
      return;
    fn.call$1(times);
    return N.Funcs_cycle(times - 1, fn);
  },
  Funcs_switchUnless: function(m, n) {
    if (m == null)
      return n;
    return m;
  },
  Funcs_when: function(f, n, m) {
    if (f)
      return n.call$0();
    if (m != null)
      return m.call$0();
  },
  Hub_randomStringsets: function(len, separator) {
    var set, buffer;
    set = [];
    buffer = P.StringBuffer$("");
    $.get$_smallA();
    N.Funcs_cycle(len, new N.Hub_randomStringsets_closure(set, buffer, C.C__JSRandom, 26));
    return C.JSArray_methods.join$1(set, "-");
  },
  Hub_randomString: function(len, max) {
    var set, t1;
    set = N.Hub_randomStringsets(len, null);
    t1 = set.length;
    return C.JSString_methods.substring$2(set, 0, t1);
  },
  Hub_encryptNamedArguments: function(params) {
    var p, t1;
    p = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol, null);
    t1 = J.getInterceptor$asx(params);
    if (t1.get$isEmpty(params) === true)
      return p;
    t1.forEach$1(params, new N.Hub_encryptNamedArguments_closure(p));
    return p;
  },
  Enums_nthFor_closure: {
    "^": "Closure:62;a_0",
    call$1: function(ind) {
      var t1 = this.a_0;
      if (ind >= t1.length)
        return;
      return t1[ind];
    }
  },
  Enums_nthFor_closure0: {
    "^": "Closure:31;a_1",
    call$1: function(m) {
      this.a_1.containsKey$1(m);
      return;
    }
  },
  Enums_eachAsyncList_closure: {
    "^": "Closure:31;box_0,a_1,complete_2,total_3",
    call$1: [function(err) {
      var t1;
      if (err != null) {
        t1 = this.complete_2;
        if (t1 != null)
          t1.call$2(this.a_1, err);
        this.box_0.kill_0 = true;
        return;
      }
      if (this.box_0.i_1 >= this.total_3 - 1) {
        t1 = this.complete_2;
        if (t1 != null)
          t1.call$2(this.a_1, null);
        return;
      }
    }, "call$1", null, 2, 0, null, 64, "call"]
  },
  Enums_eachAsyncMap_closure: {
    "^": "Closure:31;box_0,a_1,complete_2",
    call$1: [function(err) {
      var t1;
      if (err != null) {
        t1 = this.complete_2;
        if (t1 != null)
          t1.call$2(this.a_1, err);
        this.box_0.kill_0 = true;
        return;
      }
      if (--this.box_0.total_1 <= 0) {
        t1 = this.complete_2;
        if (t1 != null)
          t1.call$2(this.a_1, null);
        return;
      }
    }, "call$1", null, 2, 0, null, 64, "call"]
  },
  Enums_eachSyncList_closure: {
    "^": "Closure:38;box_0,a_1,iterator_2,complete_3,total_4",
    call$0: function() {
      var t1, t2, t3;
      t1 = this.a_1;
      t2 = this.box_0;
      t3 = t2.step_0;
      if (t3 >= t1.length)
        return H.ioore(t1, t3);
      this.iterator_2.call$4(t1[t3], t3, t1, new N.Enums_eachSyncList__closure(t2, t1, this.complete_3, this.total_4));
    }
  },
  Enums_eachSyncList__closure: {
    "^": "Closure:31;box_0,a_5,complete_6,total_7",
    call$1: [function(err) {
      var t1;
      if (err != null) {
        t1 = this.complete_6;
        if (t1 != null)
          t1.call$2(this.a_5, err);
        return;
      }
      t1 = this.box_0;
      if (++t1.step_0 === this.total_7) {
        t1 = this.complete_6;
        if (t1 != null)
          t1.call$2(this.a_5, null);
        return;
      } else
        return t1.tapper_1.call$0();
    }, "call$1", null, 2, 0, null, 64, "call"]
  },
  Enums_eachSyncList_closure0: {
    "^": "Closure:38;fuse_8",
    call$0: function() {
      return this.fuse_8.call$0();
    }
  },
  Enums_merge_closure: {
    "^": "Closure:43;override_0,merged_1",
    call$2: function(n, k) {
      if (!this.override_0 && this.merged_1.containsKey$1(n))
        return;
      this.merged_1.$indexSet(0, n, k);
    }
  },
  Enums_filterKeys_closure: {
    "^": "Closure:65;mod_0,mapped_1",
    call$4: function(e, i, o, fn) {
      if (this.mod_0.call$3(e, i, o) === true)
        this.mapped_1.push(i);
      return fn.call$1(null);
    }
  },
  Enums_filterKeys_closure0: {
    "^": "Closure:65;mod_2,mapped_3",
    call$4: function(e, i, o, fn) {
      if (this.mod_2.call$3(e, i, o) === true)
        this.mapped_3.push(i);
      return fn.call$1(null);
    }
  },
  Switch: {
    "^": "Object;_hubutils$_state,onOff,onOn",
    close$0: [function(_) {
      C.JSArray_methods.set$length(this.onOff, 0);
      C.JSArray_methods.set$length(this.onOn, 0);
      this._hubutils$_state = -1;
    }, "call$0", "get$close", 0, 0, 12]
  },
  Distributor0: {
    "^": "Object;id>",
    whenDone$1: function(n) {
      var t1 = this.done;
      if (!C.JSArray_methods.contains$1(t1, n))
        t1.push(n);
    },
    fireOncers$1: function(n) {
      var t1 = this.oncer;
      if (t1.length <= 0)
        return;
      N.Enums_eachAsync(t1, new N.Distributor_fireOncers_closure(n), null);
      C.JSArray_methods.set$length(t1, 0);
    },
    fireDone$1: function(n) {
      var t1 = this.done;
      if (t1.length <= 0)
        return;
      N.Enums_eachAsync(t1, new N.Distributor_fireDone_closure(n), null);
    }
  },
  Distributor_fireOncers_closure: {
    "^": "Closure:65;n_0",
    call$4: function(e, i, o, fn) {
      e.call$1(this.n_0);
      return fn.call$1(null);
    }
  },
  Distributor_fireDone_closure: {
    "^": "Closure:65;n_0",
    call$4: function(e, i, o, fn) {
      e.call$1(this.n_0);
      fn.call$1(null);
    }
  },
  Mutator: {
    "^": "Distributor0;history,listeners,done,oncer,_switch,id,_hubutils$_locked",
    fireListeners$1: function(n) {
      var $history = [];
      $history.push(n);
      N.Enums_eachAsync(this.listeners, new N.Mutator_fireListeners_closure($history), new N.Mutator_fireListeners_closure0(this, $history));
    }
  },
  Mutator_fireListeners_closure0: {
    "^": "Closure:43;this_0,history_1",
    call$2: function(k, e) {
      var t1, t2;
      t1 = this.this_0;
      t2 = this.history_1;
      t1.fireDone$1(C.JSArray_methods.get$last(t2));
      t1.fireOncers$1(C.JSArray_methods.get$last(t2));
      C.JSArray_methods.set$length(t2, 0);
    }
  },
  Mutator_fireListeners_closure: {
    "^": "Closure:65;history_2",
    call$4: function(e, i, o, fn) {
      var t1, cur, ret;
      t1 = this.history_2;
      cur = C.JSArray_methods.get$last(t1);
      ret = e.call$1(cur);
      if (ret == null) {
        if (t1.length === 0)
          t1.push(cur);
        else if (!J.$eq(C.JSArray_methods.get$last(t1), cur))
          t1.push(cur);
      } else
        t1.push(ret);
      fn.call$1(null);
    }
  },
  Condition: {
    "^": "Object;history,conditions,done,once",
    on$1: function(_, n) {
      var t1 = this.conditions;
      if (C.JSArray_methods.contains$1(t1, n))
        return;
      t1.push(n);
    },
    fireConditions$1: function(n) {
      N.Enums_eachSync(this.conditions, new N.Condition_fireConditions_closure(n), new N.Condition_fireConditions_closure0(this, n));
    },
    fireDone$1: function(n) {
      N.Enums_eachSync(this.done, new N.Condition_fireDone_closure(n), null);
    },
    fireOnce$1: function(n) {
      N.Enums_eachSync(this.once, new N.Condition_fireOnce_closure(n), new N.Condition_fireOnce_closure0(this));
    }
  },
  Condition_fireConditions_closure: {
    "^": "Closure:65;n_0",
    call$4: function(e, i, o, fn) {
      if (e.call$1(this.n_0) === true)
        return fn.call$1(null);
      return fn.call$1(new P._ExceptionImplementation("failed"));
    }
  },
  Condition_fireConditions_closure0: {
    "^": "Closure:43;this_1,n_2",
    call$2: function(g, err) {
      var t1, t2;
      if (!!J.getInterceptor(err).$isException)
        return;
      t1 = this.this_1;
      t2 = this.n_2;
      t1.fireOnce$1(t2);
      t1.fireDone$1(t2);
    }
  },
  Condition_fireDone_closure: {
    "^": "Closure:65;n_0",
    call$4: function(e, i, o, fn) {
      e.call$1(this.n_0);
      fn.call$1(null);
    }
  },
  Condition_fireOnce_closure: {
    "^": "Closure:65;n_0",
    call$4: function(e, i, o, fn) {
      e.call$1(this.n_0);
      fn.call$1(null);
    }
  },
  Condition_fireOnce_closure0: {
    "^": "Closure:43;this_1",
    call$2: function(r, o) {
      C.JSArray_methods.set$length(this.this_1.once, 0);
    }
  },
  MapDecorator: {
    "^": "Object;storage<",
    get$1: function(key) {
      if (this.has$1(key))
        return this.storage.$index(0, key);
    },
    add$2: function(_, key, val) {
      if (this.has$1(key))
        return;
      this.storage.$indexSet(0, key, val);
    },
    update$2: function(key, val) {
      if (this.has$1(key)) {
        this.storage.$indexSet(0, key, val);
        return;
      } else
        this.add$2(0, key, val);
      return;
    },
    destroy$1: function(key) {
      if (!this.has$1(key))
        return;
      return this.storage.remove$1(0, key);
    },
    has$1: function(key) {
      if (!this.storage.containsKey$1(key))
        return false;
      return true;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this.storage);
    },
    get$length: function(_) {
      return this.storage._collection$_length;
    },
    get$isEmpty: function(_) {
      return this.storage._collection$_length === 0;
    }
  },
  Counter0: {
    "^": "Object;_hubutils$_count,handler",
    toString$0: function(_) {
      return "Counter: " + C.JSInt_methods.toString$0(this._hubutils$_count);
    }
  },
  State: {
    "^": "Object;states,target,name,_active",
    add$2: function(_, key, n) {
      this.states.add$2(0, key, n);
    },
    activate$0: function() {
      var t1, result;
      t1 = this.states;
      result = t1.has$1("init") ? t1.storage.$index(0, "init") : null;
      result.call$2(this.target, this);
      this._active = true;
    },
    deactivate$0: function() {
      var t1, result;
      t1 = this.states;
      result = t1.has$1("dinit") ? t1.storage.$index(0, "dinit") : null;
      result.call$2(this.target, this);
      this._active = false;
    },
    get$1: function(n) {
      var t1 = this.states;
      return t1.has$1(n) ? t1.storage.$index(0, n) : null;
    },
    run$1: function(n) {
      var t1 = this.states;
      if (!t1.has$1(n))
        return;
      return (t1.has$1(n) ? t1.storage.$index(0, n) : null).call$0();
    },
    destroy$1: function(n) {
      return this.states.destroy$1(n);
    },
    close$0: [function(_) {
      this.states.storage.clear$0(0);
    }, "call$0", "get$close", 0, 0, 66],
    State$3: function(target, sets, $name) {
      var t1;
      this.name = N.Funcs_switchUnless($name, "StateObject");
      t1 = this.states;
      if ((t1.has$1("init") ? t1.storage.$index(0, "init") : null) == null)
        t1.add$2(0, "init", N._empty$closure());
      if ((t1.has$1("dinit") ? t1.storage.$index(0, "dinit") : null) == null)
        t1.add$2(0, "dinit", N._empty$closure());
      J.forEach$1$ax(sets, new N.State_closure(this));
    },
    static: {State$: function(target, sets, $name) {
        var t1 = new N.State(H.setRuntimeTypeInfo(new N.MapDecorator(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [null, null]), target, null, false);
        t1.State$3(target, sets, $name);
        return t1;
      }}
  },
  State_closure: {
    "^": "Closure:43;this_0",
    call$2: [function(n, k) {
      var t1 = this.this_0;
      t1.states.add$2(0, n, new N.State__closure(t1, k));
    }, "call$2", null, 4, 0, null, 32, 67, "call"]
  },
  State__closure: {
    "^": "Closure:38;this_1,k_2",
    call$0: [function() {
      var t1 = this.this_1;
      if (!t1._active)
        return;
      return this.k_2.call$2(t1.target, t1);
    }, "call$0", null, 0, 0, null, "call"]
  },
  StateManager: {
    "^": "Object;target,store,current<",
    close$0: [function(_) {
      this.store.storage.forEach$1(0, new N.StateManager_close_closure());
      this.store.storage.clear$0(0);
    }, "call$0", "get$close", 0, 0, 12],
    add$2: function(_, $name, m) {
      this.store.add$2(0, $name, N.State$(this.target, m, $name));
      return;
    },
    run$1: function($name) {
      var t1 = this.current;
      if (t1 == null)
        return;
      return t1.run$1($name);
    },
    switchState$1: function($name) {
      var t1, result;
      if (!this.store.has$1($name))
        return;
      t1 = this.current;
      if (t1 != null)
        t1.deactivate$0();
      t1 = this.store;
      result = t1.has$1($name) ? t1.storage.$index(0, $name) : null;
      this.current = result;
      result.activate$0();
      return;
    }
  },
  StateManager_close_closure: {
    "^": "Closure:43;",
    call$2: function(e, k) {
      J.close$0$x(k);
    }
  },
  Funcs_tagDefer_closure: {
    "^": "Closure:41;n_0,m_1,fmt_2",
    call$1: function(tag) {
      return N.Funcs_tagPrint(tag, this.n_0, this.m_1, this.fmt_2, null, null);
    }
  },
  Funcs_tagPrint_closure: {
    "^": "Closure:31;box_0,tag_1,fp_2",
    call$1: [function(n) {
      var t1 = this.box_0;
      this.fp_2.call$1(J.replaceAll$2$s(J.replaceAll$2$s(J.toString$0(t1.prettier_1.call$1(t1.format_0)), "{tag}", this.tag_1), "{res}", J.toString$0(n)));
      return n;
    }, "call$1", null, 2, 0, null, 32, "call"]
  },
  Funcs_base10Functionator_closure: {
    "^": "Closure:31;g_0",
    call$1: [function(v) {
      return this.g_0.call$1(v);
    }, "call$1", null, 2, 0, null, 68, "call"]
  },
  Funcs_base10Functionator_closure0: {
    "^": "Closure:50;g_1",
    call$2: [function(a, b) {
      return this.g_1.call$2(a, b);
    }, function(a) {
      return this.call$2(a, null);
    }, "call$1", "call$2", null, null, 2, 2, null, 17, 22, 69, "call"]
  },
  Funcs_base10Functionator_closure1: {
    "^": "Closure:71;g_2",
    call$3: [function(a, b, c) {
      return this.g_2.call$3(a, b, c);
    }, function(a, b) {
      return this.call$3(a, b, null);
    }, "call$2", function(a) {
      return this.call$3(a, null, null);
    }, "call$1", "call$3", null, null, null, 2, 4, null, 17, 17, 22, 69, 70, "call"]
  },
  Funcs_base10Functionator_closure2: {
    "^": "Closure:73;g_3",
    call$4: [function(a, b, c, d) {
      return this.g_3.call$4(a, b, c, d);
    }, function(a, b) {
      return this.call$4(a, b, null, null);
    }, "call$2", function(a, b, c) {
      return this.call$4(a, b, c, null);
    }, "call$3", function(a) {
      return this.call$4(a, null, null, null);
    }, "call$1", "call$4", null, null, null, null, 2, 6, null, 17, 17, 17, 22, 69, 70, 72, "call"]
  },
  Funcs_base10Functionator_closure3: {
    "^": "Closure:74;g_4",
    call$5: [function(a, b, c, d, e) {
      return this.g_4.call$5(a, b, c, d, e);
    }, function(a, b) {
      return this.call$5(a, b, null, null, null);
    }, "call$2", function(a, b, c, d) {
      return this.call$5(a, b, c, d, null);
    }, "call$4", function(a, b, c) {
      return this.call$5(a, b, c, null, null);
    }, "call$3", function(a) {
      return this.call$5(a, null, null, null, null);
    }, "call$1", "call$5", null, null, null, null, null, 2, 8, null, 17, 17, 17, 17, 22, 69, 70, 72, 1, "call"]
  },
  Funcs_base10Functionator_closure4: {
    "^": "Closure:76;g_5",
    call$6: [function(a, b, c, d, e, f) {
      return this.g_5.call$6(a, b, c, d, e, f);
    }, function(a, b) {
      return this.call$6(a, b, null, null, null, null);
    }, "call$2", function(a, b, c, d) {
      return this.call$6(a, b, c, d, null, null);
    }, "call$4", function(a, b, c) {
      return this.call$6(a, b, c, null, null, null);
    }, "call$3", function(a) {
      return this.call$6(a, null, null, null, null, null);
    }, "call$1", function(a, b, c, d, e) {
      return this.call$6(a, b, c, d, e, null);
    }, "call$5", "call$6", null, null, null, null, null, null, 2, 10, null, 17, 17, 17, 17, 17, 22, 69, 70, 72, 1, 75, "call"]
  },
  Funcs_base10Functionator_closure5: {
    "^": "Closure:78;g_6",
    call$7: [function(a, b, c, d, e, f, h) {
      return this.g_6.call$7(a, b, c, d, e, f, h);
    }, function(a, b) {
      return this.call$7(a, b, null, null, null, null, null);
    }, "call$2", function(a, b, c, d) {
      return this.call$7(a, b, c, d, null, null, null);
    }, "call$4", function(a, b, c) {
      return this.call$7(a, b, c, null, null, null, null);
    }, "call$3", function(a) {
      return this.call$7(a, null, null, null, null, null, null);
    }, "call$1", function(a, b, c, d, e, f) {
      return this.call$7(a, b, c, d, e, f, null);
    }, "call$6", function(a, b, c, d, e) {
      return this.call$7(a, b, c, d, e, null, null);
    }, "call$5", "call$7", null, null, null, null, null, null, null, 2, 12, null, 17, 17, 17, 17, 17, 17, 22, 69, 70, 72, 1, 75, 77, "call"]
  },
  Funcs_base10Functionator_closure6: {
    "^": "Closure:80;g_7",
    call$8: [function(a, b, c, d, e, f, h, i) {
      return this.g_7.call$8(a, b, c, d, e, f, h, i);
    }, function(a, b) {
      return this.call$8(a, b, null, null, null, null, null, null);
    }, "call$2", function(a, b, c, d) {
      return this.call$8(a, b, c, d, null, null, null, null);
    }, "call$4", function(a, b, c) {
      return this.call$8(a, b, c, null, null, null, null, null);
    }, "call$3", function(a) {
      return this.call$8(a, null, null, null, null, null, null, null);
    }, "call$1", function(a, b, c, d, e, f, h) {
      return this.call$8(a, b, c, d, e, f, h, null);
    }, "call$7", function(a, b, c, d, e, f) {
      return this.call$8(a, b, c, d, e, f, null, null);
    }, "call$6", function(a, b, c, d, e) {
      return this.call$8(a, b, c, d, e, null, null, null);
    }, "call$5", "call$8", null, null, null, null, null, null, null, null, 2, 14, null, 17, 17, 17, 17, 17, 17, 17, 22, 69, 70, 72, 1, 75, 77, 79, "call"]
  },
  Funcs_base10Functionator_closure7: {
    "^": "Closure:82;g_8",
    call$9: [function(a, b, c, d, e, f, h, i, j) {
      return this.g_8.call$9(a, b, c, d, e, f, h, i, j);
    }, function(a, b) {
      return this.call$9(a, b, null, null, null, null, null, null, null);
    }, "call$2", function(a, b, c, d) {
      return this.call$9(a, b, c, d, null, null, null, null, null);
    }, "call$4", function(a, b, c) {
      return this.call$9(a, b, c, null, null, null, null, null, null);
    }, "call$3", function(a) {
      return this.call$9(a, null, null, null, null, null, null, null, null);
    }, "call$1", function(a, b, c, d, e, f, h, i) {
      return this.call$9(a, b, c, d, e, f, h, i, null);
    }, "call$8", function(a, b, c, d, e, f, h) {
      return this.call$9(a, b, c, d, e, f, h, null, null);
    }, "call$7", function(a, b, c, d, e, f) {
      return this.call$9(a, b, c, d, e, f, null, null, null);
    }, "call$6", function(a, b, c, d, e) {
      return this.call$9(a, b, c, d, e, null, null, null, null);
    }, "call$5", "call$9", null, null, null, null, null, null, null, null, null, 2, 16, null, 17, 17, 17, 17, 17, 17, 17, 17, 22, 69, 70, 72, 1, 75, 77, 79, 81, "call"]
  },
  Funcs_base10Functionator_closure8: {
    "^": "Closure:83;g_9",
    call$10: [function(a, b, c, d, e, f, h, i, j, k) {
      return this.g_9.call$10(a, b, c, d, e, f, h, i, j, k);
    }, function(a, b) {
      return this.call$10(a, b, null, null, null, null, null, null, null, null);
    }, "call$2", function(a, b, c, d) {
      return this.call$10(a, b, c, d, null, null, null, null, null, null);
    }, "call$4", function(a, b, c) {
      return this.call$10(a, b, c, null, null, null, null, null, null, null);
    }, "call$3", function(a) {
      return this.call$10(a, null, null, null, null, null, null, null, null, null);
    }, "call$1", function(a, b, c, d, e, f, h, i, j) {
      return this.call$10(a, b, c, d, e, f, h, i, j, null);
    }, "call$9", function(a, b, c, d, e, f, h, i) {
      return this.call$10(a, b, c, d, e, f, h, i, null, null);
    }, "call$8", function(a, b, c, d, e, f, h) {
      return this.call$10(a, b, c, d, e, f, h, null, null, null);
    }, "call$7", function(a, b, c, d, e, f) {
      return this.call$10(a, b, c, d, e, f, null, null, null, null);
    }, "call$6", function(a, b, c, d, e) {
      return this.call$10(a, b, c, d, e, null, null, null, null, null);
    }, "call$5", "call$10", null, null, null, null, null, null, null, null, null, null, 2, 18, null, 17, 17, 17, 17, 17, 17, 17, 17, 17, 22, 69, 70, 72, 1, 75, 77, 79, 81, 67, "call"]
  },
  Funcs_compose_closure: {
    "^": "Closure:31;n_0,m_1",
    call$1: [function(v) {
      return this.n_0.call$1(this.m_1.call$1(v));
    }, "call$1", null, 2, 0, null, 68, "call"]
  },
  Funcs_compose_closure0: {
    "^": "Closure:43;",
    call$2: function(j, k) {
      return new N.Funcs_compose__closure7(j, k);
    }
  },
  Funcs_compose__closure7: {
    "^": "Closure:50;j_2,k_3",
    call$2: [function(a, b) {
      return this.j_2.call$1(this.k_3.call$2(a, b));
    }, function(a) {
      return this.call$2(a, null);
    }, "call$1", "call$2", null, null, 2, 2, null, 17, 22, 69, "call"]
  },
  Funcs_compose_closure1: {
    "^": "Closure:43;",
    call$2: function(j, k) {
      return new N.Funcs_compose__closure6(j, k);
    }
  },
  Funcs_compose__closure6: {
    "^": "Closure:71;j_4,k_5",
    call$3: [function(a, b, c) {
      return this.j_4.call$1(this.k_5.call$3(a, b, c));
    }, function(a, b) {
      return this.call$3(a, b, null);
    }, "call$2", function(a) {
      return this.call$3(a, null, null);
    }, "call$1", "call$3", null, null, null, 2, 4, null, 17, 17, 22, 69, 70, "call"]
  },
  Funcs_compose_closure2: {
    "^": "Closure:43;",
    call$2: function(j, k) {
      return new N.Funcs_compose__closure5(j, k);
    }
  },
  Funcs_compose__closure5: {
    "^": "Closure:73;j_6,k_7",
    call$4: [function(a, b, c, d) {
      return this.j_6.call$1(this.k_7.call$4(a, b, c, d));
    }, function(a, b) {
      return this.call$4(a, b, null, null);
    }, "call$2", function(a, b, c) {
      return this.call$4(a, b, c, null);
    }, "call$3", function(a) {
      return this.call$4(a, null, null, null);
    }, "call$1", "call$4", null, null, null, null, 2, 6, null, 17, 17, 17, 22, 69, 70, 72, "call"]
  },
  Funcs_compose_closure3: {
    "^": "Closure:43;",
    call$2: function(j, k) {
      return new N.Funcs_compose__closure4(j, k);
    }
  },
  Funcs_compose__closure4: {
    "^": "Closure:74;j_8,k_9",
    call$5: [function(a, b, c, d, e) {
      return this.j_8.call$1(this.k_9.call$5(a, b, c, d, e));
    }, function(a, b) {
      return this.call$5(a, b, null, null, null);
    }, "call$2", function(a, b, c, d) {
      return this.call$5(a, b, c, d, null);
    }, "call$4", function(a, b, c) {
      return this.call$5(a, b, c, null, null);
    }, "call$3", function(a) {
      return this.call$5(a, null, null, null, null);
    }, "call$1", "call$5", null, null, null, null, null, 2, 8, null, 17, 17, 17, 17, 22, 69, 70, 72, 1, "call"]
  },
  Funcs_compose_closure4: {
    "^": "Closure:43;",
    call$2: function(j, k) {
      return new N.Funcs_compose__closure3(j, k);
    }
  },
  Funcs_compose__closure3: {
    "^": "Closure:76;j_10,k_11",
    call$6: [function(a, b, c, d, e, f) {
      return this.j_10.call$1(this.k_11.call$6(a, b, c, d, e, f));
    }, function(a, b) {
      return this.call$6(a, b, null, null, null, null);
    }, "call$2", function(a, b, c, d) {
      return this.call$6(a, b, c, d, null, null);
    }, "call$4", function(a, b, c) {
      return this.call$6(a, b, c, null, null, null);
    }, "call$3", function(a) {
      return this.call$6(a, null, null, null, null, null);
    }, "call$1", function(a, b, c, d, e) {
      return this.call$6(a, b, c, d, e, null);
    }, "call$5", "call$6", null, null, null, null, null, null, 2, 10, null, 17, 17, 17, 17, 17, 22, 69, 70, 72, 1, 75, "call"]
  },
  Funcs_compose_closure5: {
    "^": "Closure:43;",
    call$2: function(j, k) {
      return new N.Funcs_compose__closure2(j, k);
    }
  },
  Funcs_compose__closure2: {
    "^": "Closure:78;j_12,k_13",
    call$7: [function(a, b, c, d, e, f, h) {
      return this.j_12.call$1(this.k_13.call$7(a, b, c, d, e, f, h));
    }, function(a, b) {
      return this.call$7(a, b, null, null, null, null, null);
    }, "call$2", function(a, b, c, d) {
      return this.call$7(a, b, c, d, null, null, null);
    }, "call$4", function(a, b, c) {
      return this.call$7(a, b, c, null, null, null, null);
    }, "call$3", function(a) {
      return this.call$7(a, null, null, null, null, null, null);
    }, "call$1", function(a, b, c, d, e, f) {
      return this.call$7(a, b, c, d, e, f, null);
    }, "call$6", function(a, b, c, d, e) {
      return this.call$7(a, b, c, d, e, null, null);
    }, "call$5", "call$7", null, null, null, null, null, null, null, 2, 12, null, 17, 17, 17, 17, 17, 17, 22, 69, 70, 72, 1, 75, 77, "call"]
  },
  Funcs_compose_closure6: {
    "^": "Closure:43;",
    call$2: function(j, k) {
      return new N.Funcs_compose__closure1(j, k);
    }
  },
  Funcs_compose__closure1: {
    "^": "Closure:80;j_14,k_15",
    call$8: [function(a, b, c, d, e, f, h, i) {
      return this.j_14.call$1(this.k_15.call$8(a, b, c, d, e, f, h, i));
    }, function(a, b) {
      return this.call$8(a, b, null, null, null, null, null, null);
    }, "call$2", function(a, b, c, d) {
      return this.call$8(a, b, c, d, null, null, null, null);
    }, "call$4", function(a, b, c) {
      return this.call$8(a, b, c, null, null, null, null, null);
    }, "call$3", function(a) {
      return this.call$8(a, null, null, null, null, null, null, null);
    }, "call$1", function(a, b, c, d, e, f, h) {
      return this.call$8(a, b, c, d, e, f, h, null);
    }, "call$7", function(a, b, c, d, e, f) {
      return this.call$8(a, b, c, d, e, f, null, null);
    }, "call$6", function(a, b, c, d, e) {
      return this.call$8(a, b, c, d, e, null, null, null);
    }, "call$5", "call$8", null, null, null, null, null, null, null, null, 2, 14, null, 17, 17, 17, 17, 17, 17, 17, 22, 69, 70, 72, 1, 75, 77, 79, "call"]
  },
  Funcs_compose_closure7: {
    "^": "Closure:43;",
    call$2: function(j, k) {
      return new N.Funcs_compose__closure0(k);
    }
  },
  Funcs_compose__closure0: {
    "^": "Closure:82;k_16",
    call$9: [function(a, b, c, d, e, f, h, i, j) {
      return j.call$1(this.k_16.call$9(a, b, c, d, e, f, h, i, j));
    }, function(a, b) {
      return this.call$9(a, b, null, null, null, null, null, null, null);
    }, "call$2", function(a, b, c, d) {
      return this.call$9(a, b, c, d, null, null, null, null, null);
    }, "call$4", function(a, b, c) {
      return this.call$9(a, b, c, null, null, null, null, null, null);
    }, "call$3", function(a) {
      return this.call$9(a, null, null, null, null, null, null, null, null);
    }, "call$1", function(a, b, c, d, e, f, h, i) {
      return this.call$9(a, b, c, d, e, f, h, i, null);
    }, "call$8", function(a, b, c, d, e, f, h) {
      return this.call$9(a, b, c, d, e, f, h, null, null);
    }, "call$7", function(a, b, c, d, e, f) {
      return this.call$9(a, b, c, d, e, f, null, null, null);
    }, "call$6", function(a, b, c, d, e) {
      return this.call$9(a, b, c, d, e, null, null, null, null);
    }, "call$5", "call$9", null, null, null, null, null, null, null, null, null, 2, 16, null, 17, 17, 17, 17, 17, 17, 17, 17, 22, 69, 70, 72, 1, 75, 77, 79, 81, "call"]
  },
  Funcs_compose_closure8: {
    "^": "Closure:43;",
    call$2: function(j, k) {
      return new N.Funcs_compose__closure();
    }
  },
  Funcs_compose__closure: {
    "^": "Closure:83;",
    call$10: [function(a, b, c, d, e, f, h, i, j, k) {
      return j.call$1(k.call$2(a, [b, c, d, e, f, h, i, j, k]));
    }, function(a, b) {
      return this.call$10(a, b, null, null, null, null, null, null, null, null);
    }, "call$2", function(a, b, c, d) {
      return this.call$10(a, b, c, d, null, null, null, null, null, null);
    }, "call$4", function(a, b, c) {
      return this.call$10(a, b, c, null, null, null, null, null, null, null);
    }, "call$3", function(a) {
      return this.call$10(a, null, null, null, null, null, null, null, null, null);
    }, "call$1", function(a, b, c, d, e, f, h, i, j) {
      return this.call$10(a, b, c, d, e, f, h, i, j, null);
    }, "call$9", function(a, b, c, d, e, f, h, i) {
      return this.call$10(a, b, c, d, e, f, h, i, null, null);
    }, "call$8", function(a, b, c, d, e, f, h) {
      return this.call$10(a, b, c, d, e, f, h, null, null, null);
    }, "call$7", function(a, b, c, d, e, f) {
      return this.call$10(a, b, c, d, e, f, null, null, null, null);
    }, "call$6", function(a, b, c, d, e) {
      return this.call$10(a, b, c, d, e, null, null, null, null, null);
    }, "call$5", "call$10", null, null, null, null, null, null, null, null, null, null, 2, 18, null, 17, 17, 17, 17, 17, 17, 17, 17, 17, 22, 69, 70, 72, 1, 75, 77, 79, 81, 67, "call"]
  },
  Hub_randomStringsets_closure: {
    "^": "Closure:31;set_0,buffer_1,rand_2,max_3",
    call$1: function(n) {
      var t1, t2, ind, shake;
      t1 = this.rand_2;
      t2 = this.max_3;
      ind = t1.nextInt$1(t2 - 1);
      shake = ind + t1.nextInt$1(C.JSInt_methods.toInt$0(C.JSInt_methods._tdivFast$1(t2, 2)));
      if (ind >= t2)
        ind = C.JSInt_methods.toInt$0(C.JSInt_methods.$tdiv(ind, (n + 1) * 2));
      if (shake >= t2)
        shake = C.JSInt_methods.toInt$0(C.JSInt_methods.$tdiv(shake, (n + 1) * 4));
      t1 = this.buffer_1;
      t1.write$1(shake);
      t2 = $.get$_smallA();
      if (ind < 0 || ind >= 26)
        return H.ioore(t2, ind);
      t1.write$1(t2[ind]);
      t1.write$1(ind);
      t2 = $.get$_bigA();
      if (shake < 0 || shake >= 26)
        return H.ioore(t2, shake);
      t1.write$1(t2[shake]);
      this.set_0.push(t1._contents);
      t1._contents = "";
    }
  },
  Hub_encryptNamedArguments_closure: {
    "^": "Closure:43;p_0",
    call$2: [function(k, v) {
      var t1 = this.p_0;
      if (!J.getInterceptor(k).$isSymbol)
        t1.$indexSet(0, new H.Symbol0(H.Symbol_validatePublicSymbol(k)), v);
      else
        t1.$indexSet(0, k, v);
    }, "call$2", null, 4, 0, null, 67, 68, "call"]
  }
}],
["sparkflow", "package:sparkflow/sparkflow.dart", , S, {
  "^": "",
  socketFilter: [function(i, n) {
    if (J.$eq(i.get$current().get$1("socket"), n))
      return true;
    return false;
  }, "call$2", "socketFilter$closure", 4, 0, 20],
  splitPortMap: function(path) {
    var part = J.split$1$s(path, ":");
    if (part.length <= 1)
      return;
    return part;
  },
  registryPathProcessor: function(path) {
    var from = path.toLowerCase().split("/");
    if (from.length < 3)
      return;
    return from;
  },
  toIP: function(type, socket, packets) {
    return new S.toIP_closure(type, socket, packets);
  },
  SparkFlowMessages_filterError: function(id, uuid, error, isDF) {
    return P.LinkedHashMap_LinkedHashMap$_literal(["type", "filter", "method", isDF ? "df" : "bf", "id", id, "uuid", uuid, "error", error, "message", "filter component error"], null, null);
  },
  SparkFlowMessages_network: function(type, from, to, $top, fop, sid, error) {
    return P.LinkedHashMap_LinkedHashMap$_literal(["type", type, "from", from, "to", to, "fromPort", fop, "toPort", $top, "socketid", sid, "message", type + " operation on network", "error", error], null, null);
  },
  SparkFlowMessages_componentConnection: function(type, from, to, $top, fop, sid, error) {
    return P.LinkedHashMap_LinkedHashMap$_literal(["type", type, "from", from, "to", to, "fromPort", fop, "toPort", $top, "socketid", sid, "message", type + " operation on component", "error", error], null, null);
  },
  FlowSocket: {
    "^": "Object;"
  },
  FlowPort: {
    "^": "Object;socket<"
  },
  FlowComponentAbstract: {
    "^": "Object;"
  },
  FlowNetworkAbstract: {
    "^": "Object;"
  },
  FlowNetwork: {
    "^": "FlowNetworkAbstract;",
    get$id: function(_) {
      var t1 = this.metas;
      return t1.has$1("id") ? t1.storage.$index(0, "id") : null;
    }
  },
  FlowComponent: {
    "^": "FlowComponentAbstract;uuid<",
    get$UID: function() {
      var t1, t2;
      t1 = this.metas;
      t2 = J.$add$ns(t1.has$1("id") ? t1.storage.$index(0, "id") : null, "#");
      return J.$add$ns(t2, t1.has$1("uuid") ? t1.storage.$index(0, "uuid") : null);
    },
    get$id: function(_) {
      var t1 = this.metas;
      return t1.has$1("id") ? t1.storage.$index(0, "id") : null;
    },
    get$mutator: function() {
      return this._mutator;
    },
    mutator$1: function(arg0) {
      return this.get$mutator().call$1(arg0);
    },
    meta$2: [function(id, val) {
      var t1 = val != null;
      if (t1 && !this.metas.has$1(id))
        this.metas.add$2(0, id, val);
      if (t1 && this.metas.has$1(id))
        this.metas.update$2(id, val);
      t1 = this.metas;
      return t1.has$1(id) ? t1.storage.$index(0, id) : null;
    }, function(id) {
      return this.meta$2(id, null);
    }, "meta$1", "call$2", "call$1", "get$meta", 2, 2, 50, 17],
    FlowComponent$1: function(id) {
      var t1 = this.metas;
      t1.add$2(0, "id", id);
      t1.add$2(0, "uuid", this.uuid);
      t1.add$2(0, "group", "components/" + H.S(id));
      this.assocMeta.add$2(0, "parent", null);
      if (this._mutator != null)
        this.mutator$1(this);
    },
    $isFlowComponent: true
  },
  toIP_closure: {
    "^": "Closure:31;type_0,socket_1,packets_2",
    call$1: [function(data) {
      var d, packet, t1, t2, port, t3, owner;
      if (!!J.getInterceptor(data).$isPacket)
        return data;
      d = N.Funcs_switchUnless(data, null);
      packet = this.packets_2.call$0();
      t1 = this.socket_1;
      t2 = t1.from;
      if (t2 == null)
        port = null;
      else {
        t3 = t2.meta;
        t3 = J.$add$ns(t3.has$1("group") ? t3.storage.$index(0, "group") : null, ":");
        t2 = t2.meta;
        port = J.$add$ns(t3, t2.has$1("id") ? t2.storage.$index(0, "id") : null);
      }
      if (port == null)
        owner = null;
      else {
        t1 = t1.from.owner;
        owner = t1.get$UID();
      }
      packet.init$4(this.type_0, d, owner, port);
      return packet;
    }, "call$1", null, 2, 0, null, 84, "call"]
  },
  SocketStream: {
    "^": "Object;uuid<,meta<,stream",
    endStream$0: function() {
      return this.stream.end$0();
    },
    close$0: [function(_) {
      this.stream.close$0(0);
      this.meta.storage.clear$0(0);
    }, "call$0", "get$close", 0, 0, 12],
    flushPackets$0: function() {
      this.stream.streams.removeAll$0();
    }
  },
  Socket: {
    "^": "FlowSocket;_headerPackets,_dataPackets,continued,halted,uuid<,subscribers,onSocketSubscription,onSocketRemoval,bgconditions,egconditions,dtconditions,toBGIP,toEGIP,toDataIP,streams,from,to,filter",
    toBGIP$1: function(arg0) {
      return this.toBGIP.call$1(arg0);
    },
    toEGIP$1: function(arg0) {
      return this.toEGIP.call$1(arg0);
    },
    toDataIP$1: function(arg0) {
      return this.toDataIP.call$1(arg0);
    },
    forceCondition$1: function(n) {
      this.dtconditions.on$1(0, new S.Socket_forceCondition_closure(n));
    },
    send$1: [function(_, packet) {
      var pack = this.toDataIP$1(packet);
      this.dtconditions.fireConditions$1(pack);
    }, "call$1", "get$send", 2, 0, 14, 85],
    endGroup$1: function(packet) {
      var pack = this.toEGIP$1(packet);
      this.egconditions.fireConditions$1(pack);
    },
    beginGroup$1: function(packet) {
      var pack = this.toBGIP$1(packet);
      this.bgconditions.fireConditions$1(pack);
    },
    flushPackets$0: function() {
      this.streams.stream.streams.removeAll$0();
    },
    detachAll$0: function() {
      var handle, t1, sub;
      handle = new F.dsListIterator(0, null, null, this.subscribers);
      handle.counter = new F.Counter(0, handle);
      for (t1 = this.onSocketRemoval; handle.moveNext$0();) {
        sub = handle.get$current();
        t1.emit$1(sub);
        J.close$0$x(sub.get$1("stream"));
        sub.destroy$1("socket");
        sub.destroy$1("port");
      }
    },
    attachFrom$1: function(from) {
      if (this.from != null)
        return;
      this.from = from;
    },
    bindSocket$2: function(a, bindEnding) {
      var sub, t1, t2, sub0, result;
      if (this.filter.has$2(a, S.socketFilter$closure()))
        return;
      bindEnding = N.Funcs_switchUnless(bindEnding, true);
      sub = H.setRuntimeTypeInfo(new N.MapDecorator(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [null, null]);
      sub.add$2(0, "socket", a);
      t1 = this.streams.stream;
      t2 = a.get$send(a);
      sub0 = X.Subscriber$(t1, null);
      sub0.stream.on$1(0, t2);
      sub.add$2(0, "stream", sub0);
      this.subscribers.append$1(0, sub);
      t1 = a.streams.stream;
      t1.closed.on$1(0, J.get$close$x(sub.has$1("stream") ? sub.storage.$index(0, "stream") : null));
      if (bindEnding === true) {
        result = sub.has$1("stream") ? sub.storage.$index(0, "stream") : null;
        result.whenEnded$1(a.get$endStream());
      }
      this.onSocketSubscription.emit$1(sub);
      return sub;
    },
    resume$0: function() {
      this.streams.stream.resume$0();
      this.continued.emit$1(true);
    },
    pause$0: function(_) {
      this.streams.stream.pause$0(0);
      this.halted.emit$1(true);
    },
    endStream$1: [function(n) {
      this.streams.stream.end$0();
    }, function() {
      return this.endStream$1(null);
    }, "endStream$0", "call$1", "call$0", "get$endStream", 0, 2, 86, 17, 32],
    close$0: [function(_) {
      var t1;
      this.detachAll$0();
      t1 = this.streams;
      t1.stream.close$0(0);
      t1.meta.storage.clear$0(0);
      this.to = null;
      this.from = null;
      return;
    }, "call$0", "get$close", 0, 0, 12],
    get$isPaused: function() {
      return this.streams.stream.state.run$1("paused");
    },
    Socket$1: function(from, $M) {
      var t1, t2;
      t1 = this._headerPackets;
      this.toBGIP = S.toIP("beginGroup", this, t1);
      this.toEGIP = S.toIP("endGroup", this, t1);
      this.toDataIP = S.toIP("data", this, this._dataPackets);
      this.streams = new S.SocketStream(N.Hub_randomString(3, null), H.setRuntimeTypeInfo(new N.MapDecorator(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [null, null]), X.Streamable$(null, null));
      t1 = new F.dsListIterator(0, null, null, this.subscribers);
      t1.counter = new F.Counter(0, t1);
      this.filter = t1;
      this.dtconditions = H.setRuntimeTypeInfo(new N.Condition([], [], [], []), [null]);
      this.bgconditions = H.setRuntimeTypeInfo(new N.Condition([], [], [], []), [null]);
      this.egconditions = H.setRuntimeTypeInfo(new N.Condition([], [], [], []), [null]);
      this.attachFrom$1(from);
      t1 = this.dtconditions;
      t2 = this.streams.stream.get$emit();
      t1.done.push(t2);
      t2 = this.bgconditions;
      t1 = this.streams.stream.get$emit();
      t2.done.push(t1);
      t1 = this.egconditions;
      t2 = this.streams.stream.get$emit();
      t1.done.push(t2);
    },
    $asFlowSocket: function($M) {
      return [null];
    }
  },
  closure1: {
    "^": "Closure:38;",
    call$0: function() {
      return new S.Packet(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    }
  },
  closure2: {
    "^": "Closure:38;",
    call$0: function() {
      return new S.Packet(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    }
  },
  Socket_forceCondition_closure: {
    "^": "Closure:31;n_0",
    call$1: [function(d) {
      return this.n_0.call$1(J.get$data$x(d));
    }, "call$1", null, 2, 0, null, 72, "call"]
  },
  Port: {
    "^": "FlowPort;uuid<,meta<,owner<,socket:sparkflow$Port$socket<",
    endStream$0: function() {
      this.sparkflow$Port$socket.streams.stream.end$0();
      return;
    },
    get$id: function(_) {
      var t1 = this.meta;
      return t1.has$1("id") ? t1.storage.$index(0, "id") : null;
    },
    forceCondition$1: function(n) {
      return this.sparkflow$Port$socket.forceCondition$1(n);
    },
    handleType$3: function(type, data, socket) {
      if (type === "data")
        return socket.toDataIP$1(data);
      if (type === "beginGroup")
        return socket.toBGIP$1(data);
      if (type === "endGroup")
        return socket.toEGIP$1(data);
    },
    handleAliasCall$2: function(type, socket) {
      return new S.Port_handleAliasCall_closure(type, socket);
    },
    handlePacket$4: function(data, handler, type, alias) {
      var t1, t2, sub, socket, d;
      if (alias != null) {
        C.JSArray_methods.set$length(this._transformer.done, 0);
        t1 = this._transformer;
        t2 = this.sparkflow$Port$socket.streams.stream;
        t1.toString;
        t1.listeners = P.List_List$from(t2.transformer.listeners, true, P.Function);
        sub = this.getSocketAlias$1(alias);
        if (sub != null) {
          socket = sub.get$1("socket");
          if (socket == null)
            return;
          d = this.handleType$3(type, data, socket);
          this._transformer.whenDone$1(this.handleAliasCall$2(type, socket));
          this._transformer.fireListeners$1(d);
        }
        return;
      }
      return handler.call$1(data);
    },
    send$2: function(_, data, alias) {
      this.handlePacket$4(data, new S.Port_send_closure(this), "data", alias);
    },
    send$1: function($receiver, data) {
      return this.send$2($receiver, data, null);
    },
    beginGroup$2: function(data, alias) {
      this.handlePacket$4(N.Funcs_switchUnless(data, null), new S.Port_beginGroup_closure(this), "beginGroup", alias);
    },
    beginGroup$1: function(data) {
      return this.beginGroup$2(data, null);
    },
    endGroup$2: function(data, alias) {
      this.handlePacket$4(N.Funcs_switchUnless(data, null), new S.Port_endGroup_closure(this), "endGroup", alias);
    },
    endGroup$1: function(data) {
      return this.endGroup$2(data, null);
    },
    tapData$1: function(n) {
      this.sparkflow$Port$socket.streams.stream.on$1(0, new S.Port_tapData_closure(this, n));
    },
    bindPort$3: function(a, alias, bindend) {
      return this.bindSocket$3(a.get$socket(), alias, bindend);
    },
    bindSocket$3: function(v, alias, bindend) {
      var t1, sub, t2, id;
      t1 = this.aliases;
      if (t1._collection$_length === 0)
        this.counter._hubutils$_count = 0;
      sub = this.sparkflow$Port$socket.bindSocket$2(v, bindend);
      if (sub == null)
        return;
      t2 = ++this.counter._hubutils$_count;
      id = C.JSInt_methods.toString$0(t2);
      sub.add$2(0, "alias", id);
      t1.$indexSet(0, id, sub);
      return sub;
    },
    getSocketAlias$1: function(alias) {
      var sub = this.aliases.$index(0, alias);
      if (sub == null)
        return;
      return sub;
    },
    resume$0: function() {
      var t1 = this.sparkflow$Port$socket;
      if (t1 == null)
        return;
      t1.streams.stream.resume$0();
      t1.continued.emit$1(true);
    },
    pause$0: function(_) {
      var t1 = this.sparkflow$Port$socket;
      if (t1 == null)
        return;
      t1.streams.stream.pause$0(0);
      t1.halted.emit$1(true);
    },
    get$isPaused: function() {
      this.sparkflow$Port$socket.streams.stream.state.run$1("paused");
    },
    close$0: [function(_) {
      var t1, t2;
      t1 = this.sparkflow$Port$socket;
      t1.detachAll$0();
      t2 = t1.streams;
      t2.stream.close$0(0);
      t2.meta.storage.clear$0(0);
      t1.to = null;
      t1.from = null;
      C.JSArray_methods.set$length(this._transformer.done, 0);
    }, "call$0", "get$close", 0, 0, 12],
    flushPackets$0: function() {
      this.sparkflow$Port$socket.streams.stream.streams.removeAll$0();
    },
    Port$3: function(id, meta, owner, $M) {
      var t1, t2, clone;
      t1 = N.Funcs_switchUnless(meta, P.LinkedHashMap_LinkedHashMap$_empty(null, null));
      t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t2.addAll$1(0, t1);
      this.meta = H.setRuntimeTypeInfo(new N.MapDecorator(t2), [null, null]);
      this.counter = new N.Counter0(0, this);
      t2 = H.setRuntimeTypeInfo(new S.Socket(new S.closure1(), new S.closure2(), X.Distributor$("streamable-streamcontinue", null), X.Distributor$("streamable-streamhalt", null), N.Hub_randomString(5, null), F.dsList_create(null), X.Distributor$("streamable-socketsub", null), X.Distributor$("streamable-socketUnsub", null), null, null, null, null, null, null, null, null, null, null), [null]);
      t2.Socket$1(this, null);
      this.sparkflow$Port$socket = t2;
      t1 = new F.dsListIterator(0, null, null, t2.subscribers);
      t1.counter = new F.Counter(0, t1);
      this.aliasFilter = t1;
      t2 = t2.streams.stream;
      clone = H.setRuntimeTypeInfo(new N.Mutator([], H.setRuntimeTypeInfo([], [P.Function]), H.setRuntimeTypeInfo([], [P.Function]), H.setRuntimeTypeInfo([], [P.Function]), new N.Switch(-1, H.setRuntimeTypeInfo([], [P.Function]), H.setRuntimeTypeInfo([], [P.Function])), "clone-transformer", false), [null]);
      clone.listeners = P.List_List$from(t2.transformer.listeners, true, P.Function);
      this._transformer = clone;
      this.meta.update$2("group", "nogroup");
      this.meta.update$2("id", id);
    }
  },
  Port_handleAliasCall_closure: {
    "^": "Closure:31;type_0,socket_1",
    call$1: [function(data) {
      var t1 = this.type_0;
      if (t1 === "data")
        return J.send$1$x(this.socket_1, data);
      if (t1 === "beginGroup")
        return this.socket_1.beginGroup$1(data);
      if (t1 === "endGroup")
        return this.socket_1.endGroup$1(data);
    }, "call$1", null, 2, 0, null, 84, "call"]
  },
  Port_send_closure: {
    "^": "Closure:31;this_0",
    call$1: function(d) {
      this.this_0.sparkflow$Port$socket.send$1(0, d);
    }
  },
  Port_beginGroup_closure: {
    "^": "Closure:31;this_0",
    call$1: function(r) {
      this.this_0.sparkflow$Port$socket.beginGroup$1(r);
    }
  },
  Port_endGroup_closure: {
    "^": "Closure:31;this_0",
    call$1: function(r) {
      this.this_0.sparkflow$Port$socket.endGroup$1(r);
    }
  },
  Port_tapData_closure: {
    "^": "Closure:31;this_1,n_2",
    call$1: [function(p) {
      var t1, t2;
      t1 = {};
      t1.p_0 = p;
      if (!J.getInterceptor(p).$isPacket) {
        p = this.this_1.sparkflow$Port$socket.toDataIP$1(p);
        t1.p_0 = p;
        t2 = p;
      } else
        t2 = p;
      N.Funcs_when(J.$eq(t2.get$event(), "data"), new S.Port_tapData__closure(t1, this.n_2), null);
    }, "call$1", null, 2, 0, null, 87, "call"]
  },
  Port_tapData__closure: {
    "^": "Closure:38;box_0,n_3",
    call$0: function() {
      return this.n_3.call$1(this.box_0.p_0);
    }
  },
  InPortType: {
    "^": "Object;"
  },
  OutportType: {
    "^": "Object;"
  },
  Inport: {
    "^": "Port;portType,uuid,aliases,counter,meta,owner,sparkflow$Port$socket,aliasFilter,_transformer,socket",
    $asPort: function() {
      return [null];
    },
    $asFlowPort: function() {
      return [null];
    }
  },
  Outport: {
    "^": "Port;portType,uuid,aliases,counter,meta,owner,sparkflow$Port$socket,aliasFilter,_transformer,socket",
    $asPort: function() {
      return [null];
    },
    $asFlowPort: function() {
      return [null];
    }
  },
  PlaceHolder: {
    "^": "Object;id>,uuid<"
  },
  FutureCompiler: {
    "^": "Object;futures,futureIterator",
    add$1: function(_, n) {
      this.futures.append$1(0, n);
    },
    generateFutureList$0: function() {
      var list = [];
      this.futureIterator.cascade$2(new S.FutureCompiler_generateFutureList_closure(list), new S.FutureCompiler_generateFutureList_closure0(this));
      if (list.length <= 0)
        list.push(P._Future$immediate(true, null));
      return list;
    },
    whenComplete$2: function(n, err) {
      var wait = P.Future_wait(this.generateFutureList$0(), false).then$1(n);
      if (err != null)
        wait.catchError$1(err);
      return wait;
    },
    whenComplete$1: function(n) {
      return this.whenComplete$2(n, null);
    },
    FutureCompiler$1: function(n) {
      var t1 = F.dsList_create(n);
      this.futures = t1;
      t1 = new F.dsListIterator(0, null, null, t1);
      t1.counter = new F.Counter(0, t1);
      this.futureIterator = t1;
    },
    static: {FutureCompiler$: function(n) {
        var t1 = new S.FutureCompiler(null, null);
        t1.FutureCompiler$1(n);
        return t1;
      }}
  },
  FutureCompiler_generateFutureList_closure: {
    "^": "Closure:31;list_0",
    call$1: function(it) {
      this.list_0.push(it.current$0());
    }
  },
  FutureCompiler_generateFutureList_closure0: {
    "^": "Closure:31;this_1",
    call$1: function(it) {
      this.this_1.futures.removeAll$0();
    }
  },
  Network: {
    "^": "FlowNetwork;networkPorts,_whenAlive,_whenFrozen,_whenDead,sparkflow$Network$_parent,startStamp,stopStamp,graphIterator,scheduledPacketsIterator,scheduledPacketsAlwaysIterator,placeholder,stateManager,connections,uuidRegister,uuid<,errorStream,componentStream,networkStream,connectionStream,onReadyConnect,onReadyDisconnect,onAlive,onDead,onFrozen,components,scheduledPackets,scheduledPacketsAlways,connectionsCompiler,disconnectionsCompiler,dfFilter,bfFilter,metas,_parent",
    port$1: function(_, n) {
      return this.networkPorts.port$1(0, n);
    },
    makeOutport$3$meta$port: function(id, meta, port) {
      return this.networkPorts.createOutport$3$meta$port(id, meta, port);
    },
    makeOutport$1: function(id) {
      return this.makeOutport$3$meta$port(id, null, null);
    },
    makeInport$3$meta$port: function(id, meta, port) {
      return this.networkPorts.createInport$3$meta$port(id, meta, port);
    },
    makeInport$1: function(id) {
      return this.makeInport$3$meta$port(id, null, null);
    },
    close$0: [function(_) {
      var t1;
      this.shutdown$0();
      t1 = this.components.nodes;
      t1.toString;
      t1 = new F.dsListIterator(0, null, null, t1);
      t1.counter = new F.Counter(0, t1);
      t1.cascade$2(new S.Network_close_closure(), new S.Network_close_closure0(this));
    }, "call$0", "get$close", 0, 0, 12],
    filterNode$2: function(m, bf) {
      return this.filterDF$1(m);
    },
    filterNode$1: function(m) {
      return this.filterNode$2(m, null);
    },
    filterDF$1: function(m) {
      var t1, result;
      t1 = this.uuidRegister;
      result = t1.has$1(m) ? t1.storage.$index(0, m) : null;
      if (result == null)
        return P._Future$immediateError(new P._ExceptionImplementation("Not Found!"), null, null);
      return this.dfFilter.filter$1(result).then$1(new S.Network_filterDF_closure()).catchError$1(new S.Network_filterDF_closure0(this, m, result));
    },
    schedulePacket$4: function(id, port, d, mixer) {
      if (!this.uuidRegister.has$1(id))
        return;
      this.scheduledPackets.append$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["id", id, "port", port, "data", d, "mixer", mixer], null, null));
      if (this.stateManager.run$1("dead") === true || this.stateManager.run$1("frozen") === true)
        return;
      return this._runScheduledPackets$0();
    },
    schedulePacket$3: function(id, port, d) {
      return this.schedulePacket$4(id, port, d, null);
    },
    _runBootUpScheduledPackets$0: function() {
      this.scheduledPacketsAlwaysIterator.cascade$1(new S.Network__runBootUpScheduledPackets_closure(this));
    },
    _runScheduledPackets$0: function() {
      var t1, t2, node, cur, mixer, t3, t4, result, result0;
      t1 = this.scheduledPackets;
      while (true) {
        if (!!(t1.head == null && t1.tail == null))
          break;
        t2 = {};
        node = t1.removeHead$0();
        t2.cur_0 = null;
        if (node != null) {
          cur = node.data;
          t2.cur_0 = cur;
          mixer = J.$index$asx(cur, "mixer");
          t3 = this.filterNode$1(J.$index$asx(t2.cur_0, "id"));
          t4 = $.Zone__current;
          t4.toString;
          result = new P._Future(0, t4, null, null, new S.Network__runScheduledPackets_closure(t2, mixer), null, P._registerErrorHandler(null, t4), null);
          result.$builtinTypeInfo = [null];
          t3._addListener$1(result);
          t2 = $.Zone__current;
          t3 = P._registerErrorHandler(new S.Network__runScheduledPackets_closure0(mixer), t2);
          $.Zone__current.toString;
          result0 = new P._Future(0, t2, null, null, null, null, t3, null);
          result0.$builtinTypeInfo = [null];
          result._addListener$1(result0);
          node.data = null;
        }
      }
    },
    use$5: function(path, id, n, a, m) {
      var t1, t2, node;
      if ($.get$Sparkflow_registry().has$1(path) !== true)
        return P._Future$immediateError(new P._ExceptionImplementation("Component " + path + " not found!"), null, null);
      t1 = $.get$Sparkflow_registry().generate$3(path, a, m);
      t2 = this.components;
      node = t2.add$1(0, t1);
      t2.bind$3(this.placeholder, node, 0);
      t2.bind$3(node, this.placeholder, 1);
      this.uuidRegister.add$2(0, id, t1.get$uuid());
      this.componentStream.emit$1(P.LinkedHashMap_LinkedHashMap$_literal(["id", id, "uuid", t1.get$uuid(), "type", "addComponent", "message", "addComponent component to network"], null, null));
      return P._Future$immediate(node, null);
    },
    use$2: function(path, id) {
      return this.use$5(path, id, null, null, null);
    },
    destroy$3: function($name, n, bf) {
      if (!this.uuidRegister.has$1($name))
        return;
      return this.remove$3(0, $name, n, bf).then$1(new S.Network_destroy_closure());
    },
    destroy$1: function(name) {
      return this.destroy$3(name, null, null);
    },
    remove$3: function(_, a, n, bf) {
      if (!this.uuidRegister.has$1(a))
        return;
      return this.filterNode$2(a, bf).then$1(new S.Network_remove_closure(this, a, n)).catchError$1(new S.Network_remove_closure0(this, a));
    },
    shutdown$0: function() {
      if (this.stateManager.run$1("dead") === true)
        return this._whenDead.future;
      this.onReadyDisconnect.emit$1(this);
      var completer = this._whenDead;
      completer = completer.future._state === 0 ? completer : H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
      this._whenDead = completer;
      this.disconnectionsCompiler.whenComplete$2(new S.Network_shutdown_closure(this, completer), new S.Network_shutdown_closure0());
      return this._whenDead.future;
    },
    boot$0: function() {
      if (this.stateManager.run$1("alive") === true)
        return this._whenAlive.future;
      if (this.stateManager.run$1("frozen") !== true)
        this.onReadyConnect.emit$1(this);
      var completer = this._whenAlive;
      completer = completer.future._state === 0 ? completer : H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
      this._whenAlive = completer;
      this.connectionsCompiler.whenComplete$2(new S.Network_boot_closure(this, completer), new S.Network_boot_closure0());
      return this._whenAlive.future;
    },
    get$UID: function() {
      var t1, t2;
      t1 = this.metas;
      t2 = J.$add$ns(t1.has$1("id") ? t1.storage.$index(0, "id") : null, "#");
      return J.$add$ns(t2, t1.has$1("uuid") ? t1.storage.$index(0, "uuid") : null);
    },
    get$isEmpty: function(_) {
      var t1 = this.components.nodes;
      return t1.head == null && t1.tail == null;
    },
    ensureBinding$7: function(from, fp, to, tp, sid, ve, f) {
      this.onReadyConnect.on$1(0, new S.Network_ensureBinding_closure(this, from, fp, to, tp, sid, ve, f));
    },
    ensureBinding$4: function(from, fp, to, tp) {
      return this.ensureBinding$7(from, fp, to, tp, null, null, null);
    },
    link$7: function(nport, com, inport, sid, ve, bf, inverse) {
      var t1 = {};
      t1.inverse_0 = inverse;
      if (this.networkPorts.hasPort$1(nport) !== true)
        return;
      t1.inverse_0 = N.Funcs_switchUnless(t1.inverse_0, false);
      this.connectionsCompiler.futures.append$1(0, new S.Network_link_closure(t1, this, nport, com, inport, sid, ve, bf));
      return this;
    },
    doBinding$7: function(from, fp, to, tp, sid, ve, f) {
      var t1, t2, t3;
      t1 = from === to && to !== "*";
      N.Funcs_when(t1, new S.Network_doBinding_closure(this, from, fp, to, tp, sid, ve), null);
      t1 = from === "*";
      t2 = t1 && to === "*";
      N.Funcs_when(t2, new S.Network_doBinding_closure0(this, fp, tp, sid, ve), null);
      t2 = !t1;
      t3 = t2 && to !== "*";
      N.Funcs_when(t3, new S.Network_doBinding_closure1(this, from, fp, to, tp, sid, ve, f), null);
      t1 = t1 && to !== "*";
      N.Funcs_when(t1, new S.Network_doBinding_closure2(this, fp, to, tp, sid, ve, f), null);
      t1 = t2 && to === "*";
      N.Funcs_when(t1, new S.Network_doBinding_closure3(this, from, fp, tp, sid, ve, f), null);
    },
    connect$7: function(a, aport, b, bport, sockid, ve, bf) {
      var t1 = this.uuidRegister;
      if (!t1.has$1(a))
        return;
      if (!t1.has$1(b))
        return;
      this.connectionsCompiler.futures.append$1(0, new S.Network_connect_closure(this, a, aport, b, bport, sockid, ve, bf));
      return this;
    },
    loopPorts$4: function(p, s, sid, ve) {
      this.connectionsCompiler.futures.append$1(0, new S.Network_loopPorts_closure(this, p, s, sid, ve));
      return this;
    },
    Network$2: function(id, desc) {
      var t1, t2;
      this.networkPorts = new S.PortManager(H.setRuntimeTypeInfo(new N.MapDecorator(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [null, null]), this);
      t1 = this.components;
      this.dfFilter.graph = t1;
      this.bfFilter.graph = t1;
      t2 = new F.dsListIterator(0, null, null, this.scheduledPackets);
      t2.counter = new F.Counter(0, t2);
      this.scheduledPacketsIterator = t2;
      t2 = new F.dsListIterator(0, null, null, this.scheduledPacketsAlways);
      t2.counter = new F.Counter(0, t2);
      this.scheduledPacketsAlwaysIterator = t2;
      t1 = t1.add$1(0, new S.PlaceHolder("placeholder", N.Hub_randomString(7, null)));
      this.placeholder = t1;
      this.uuidRegister.add$2(0, "placeholder", J.get$data$x(t1).get$uuid());
      t1 = new N.StateManager(this, null, null);
      t1.store = H.setRuntimeTypeInfo(new N.MapDecorator(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [null, null]);
      this.stateManager = t1;
      this.connections = new S.ConnectionMeta(this, P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      this.stateManager.add$2(0, "dead", P.LinkedHashMap_LinkedHashMap$_literal(["frozen", new S.Network_closure(), "dead", new S.Network_closure0(), "alive", new S.Network_closure1()], null, null));
      this.stateManager.add$2(0, "frozen", P.LinkedHashMap_LinkedHashMap$_literal(["frozen", new S.Network_closure2(), "dead", new S.Network_closure3(), "alive", new S.Network_closure4()], null, null));
      this.stateManager.add$2(0, "alive", P.LinkedHashMap_LinkedHashMap$_literal(["frozen", new S.Network_closure5(), "dead", new S.Network_closure6(), "alive", new S.Network_closure7()], null, null));
      this.stateManager.switchState$1("dead");
      t1 = this.metas;
      t1.add$2(0, "uuid", this.uuid);
      t1.add$2(0, "id", t1.has$1("id") ? t1.storage.$index(0, "id") : null);
      this.connectionStream.on$1(0, new S.Network_closure8(this));
    },
    static: {Network$: function(id, desc) {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23;
        t1 = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
        t2 = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
        t3 = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
        t4 = H.setRuntimeTypeInfo(new N.MapDecorator(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [null, null]);
        t5 = N.Hub_randomString(5, null);
        t6 = X.Streamable$(null, null);
        t7 = X.Streamable$(null, null);
        t8 = X.Streamable$(null, null);
        t9 = X.Streamable$(null, null);
        t10 = X.Distributor$("onAliveConnection-distributor", null);
        t11 = X.Distributor$("onDeadConnections-distributor", null);
        t12 = X.Distributor$("onAlive-distributor", null);
        t13 = X.Distributor$("onDead-distributor", null);
        t14 = X.Distributor$("onFrozen-distributor", null);
        t15 = S.FlowComponent;
        t16 = P.$int;
        t17 = H.setRuntimeTypeInfo(new F.dsGraph(null, null, false, null), [t15, t16]);
        t17.bomb = new F.Counter(0, t17);
        t17.dsGraph$0(t15, t16);
        t16 = F.dsList_create(null);
        t15 = F.dsList_create(null);
        t18 = S.FutureCompiler$(null);
        t19 = S.FutureCompiler$(null);
        t20 = new F.GraphFilter(null, null, null, null, null, false);
        t20.GraphFilter$depthFirst$1(new S.closure());
        t21 = new F.GraphFilter(null, null, null, null, null, false);
        t21.GraphFilter$breadthFirst$1(new S.closure0());
        t22 = P.LinkedHashMap_LinkedHashMap$_literal(["desc", "Sparkflow Network Graph"], null, null);
        t23 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        t23.addAll$1(0, t22);
        t23 = H.setRuntimeTypeInfo(new N.MapDecorator(t23), [null, null]);
        t21 = new S.Network(null, t1, t2, t3, null, null, null, null, null, null, null, null, null, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t17, t16, t15, t18, t19, t20, t21, t23, null);
        t23.add$2(0, "id", id);
        t21.Network$2(id, desc);
        return t21;
      }}
  },
  closure: {
    "^": "Closure:90;",
    call$3: [function(key, node, arc) {
      if (J.get$data$x(node).get$uuid() === key)
        return node;
      return;
    }, "call$3", null, 6, 0, null, 58, 88, 89, "call"]
  },
  closure0: {
    "^": "Closure:90;",
    call$3: [function(key, node, arc) {
      if (J.get$data$x(node).get$uuid() === key)
        return node;
      return;
    }, "call$3", null, 6, 0, null, 58, 88, 89, "call"]
  },
  Network_closure: {
    "^": "Closure:43;",
    call$2: [function(t, c) {
      return false;
    }, "call$2", null, 4, 0, null, 29, 70, "call"]
  },
  Network_closure0: {
    "^": "Closure:43;",
    call$2: [function(t, c) {
      return true;
    }, "call$2", null, 4, 0, null, 29, 70, "call"]
  },
  Network_closure1: {
    "^": "Closure:43;",
    call$2: [function(t, c) {
      return false;
    }, "call$2", null, 4, 0, null, 29, 70, "call"]
  },
  Network_closure2: {
    "^": "Closure:43;",
    call$2: [function(t, c) {
      return true;
    }, "call$2", null, 4, 0, null, 29, 70, "call"]
  },
  Network_closure3: {
    "^": "Closure:43;",
    call$2: [function(t, c) {
      return false;
    }, "call$2", null, 4, 0, null, 29, 70, "call"]
  },
  Network_closure4: {
    "^": "Closure:43;",
    call$2: [function(t, c) {
      return false;
    }, "call$2", null, 4, 0, null, 29, 70, "call"]
  },
  Network_closure5: {
    "^": "Closure:43;",
    call$2: [function(t, c) {
      return false;
    }, "call$2", null, 4, 0, null, 29, 70, "call"]
  },
  Network_closure6: {
    "^": "Closure:43;",
    call$2: [function(t, c) {
      return false;
    }, "call$2", null, 4, 0, null, 29, 70, "call"]
  },
  Network_closure7: {
    "^": "Closure:43;",
    call$2: [function(t, c) {
      return true;
    }, "call$2", null, 4, 0, null, 29, 70, "call"]
  },
  Network_closure8: {
    "^": "Closure:31;this_0",
    call$1: [function(e) {
      var t1 = J.getInterceptor$asx(e);
      if (J.$eq(t1.$index(e, "to"), "*") && !J.$eq(t1.$index(e, "from"), "*")) {
        if (J.$eq(t1.$index(e, "type"), "loop") || J.$eq(t1.$index(e, "type"), "link"))
          this.this_0.connections.addConnection$4(t1.$index(e, "toPort"), t1.$index(e, "from"), t1.$index(e, "fromPort"), t1.$index(e, "socketid"));
        if (J.$eq(t1.$index(e, "type"), "unloop") || J.$eq(t1.$index(e, "type"), "unlink"))
          this.this_0.connections.removeConnection$4(t1.$index(e, "toPort"), t1.$index(e, "from"), t1.$index(e, "fromPort"), t1.$index(e, "socketid"));
      }
      if (J.$eq(t1.$index(e, "from"), "*") && !J.$eq(t1.$index(e, "to"), "*")) {
        if (J.$eq(t1.$index(e, "type"), "loop") || J.$eq(t1.$index(e, "type"), "link"))
          this.this_0.connections.addConnection$4(t1.$index(e, "fromPort"), t1.$index(e, "to"), t1.$index(e, "toPort"), t1.$index(e, "socketid"));
        if (J.$eq(t1.$index(e, "type"), "unloop") || J.$eq(t1.$index(e, "type"), "unlink"))
          this.this_0.connections.removeConnection$4(t1.$index(e, "fromPort"), t1.$index(e, "to"), t1.$index(e, "toPort"), t1.$index(e, "socketid"));
      }
    }, "call$1", null, 2, 0, null, 1, "call"]
  },
  Network_close_closure: {
    "^": "Closure:31;",
    call$1: function(e) {
      var current, t1;
      current = J.get$data$x(e.get$current());
      t1 = J.getInterceptor(current);
      if (!!t1.$isFlowComponent)
        t1.close$0(current);
    }
  },
  Network_close_closure0: {
    "^": "Closure:31;this_0",
    call$1: function(e) {
      var t1 = this.this_0;
      t1.components.nodes.free$0();
      t1.networkPorts.destroyAllSpaces$0();
      t1.errorStream.close$0(0);
      t1.connectionStream.close$0(0);
      t1.componentStream.close$0(0);
      t1.networkStream.close$0(0);
    }
  },
  Network_filterDF_closure: {
    "^": "Closure:31;",
    call$1: [function(_) {
      return _;
    }, "call$1", null, 2, 0, null, 54, "call"]
  },
  Network_filterDF_closure0: {
    "^": "Closure:31;this_0,m_1,id_2",
    call$1: [function(e) {
      this.this_0.networkStream.emit$1(S.SparkFlowMessages_filterError(this.m_1, this.id_2, e, true));
    }, "call$1", null, 2, 0, null, 1, "call"]
  },
  Network__runBootUpScheduledPackets_closure: {
    "^": "Closure:31;this_0",
    call$1: function(it) {
      var cur = it.get$current();
      this.this_0.filterNode$1(J.$index$asx(cur, "id")).then$1(new S.Network__runBootUpScheduledPackets__closure(cur));
    }
  },
  Network__runBootUpScheduledPackets__closure: {
    "^": "Closure:31;cur_1",
    call$1: [function(r) {
      var t1, t2, t3;
      t1 = J.getInterceptor$x(r);
      t2 = this.cur_1;
      t3 = J.getInterceptor$asx(t2);
      if (t1.get$data(r).hasPort$1(t3.$index(t2, "port")) !== true)
        return;
      J.send$1$x(J.port$1$x(t1.get$data(r), t3.$index(t2, "port")), t3.$index(t2, "data"));
    }, "call$1", null, 2, 0, null, 91, "call"]
  },
  Network__runScheduledPackets_closure: {
    "^": "Closure:31;box_0,mixer_1",
    call$1: [function(r) {
      var t1, t2, t3;
      t1 = J.getInterceptor$x(r);
      t2 = this.box_0;
      if (t1.get$data(r).hasPort$1(J.$index$asx(t2.cur_0, "port")) !== true)
        return;
      t3 = this.mixer_1;
      if (t3 == null)
        return J.send$1$x(J.port$1$x(t1.get$data(r), J.$index$asx(t2.cur_0, "port")), J.$index$asx(t2.cur_0, "data"));
      return J.complete$1$x(t3, [t1.get$data(r), J.port$1$x(t1.get$data(r), J.$index$asx(t2.cur_0, "port")), J.$index$asx(t2.cur_0, "data")]);
    }, "call$1", null, 2, 0, null, 91, "call"]
  },
  Network__runScheduledPackets_closure0: {
    "^": "Closure:31;mixer_2",
    call$1: [function(e) {
      var t1 = this.mixer_2;
      if (t1 != null)
        t1.completeError$1(e);
    }, "call$1", null, 2, 0, null, 1, "call"]
  },
  Network_destroy_closure: {
    "^": "Closure:31;",
    call$1: [function(_) {
      return J.get$data$x(_).kill$0();
    }, "call$1", null, 2, 0, null, 54, "call"]
  },
  Network_remove_closure: {
    "^": "Closure:31;this_0,a_1,n_2",
    call$1: [function(_) {
      var t1, t2;
      t1 = J.getInterceptor$x(_);
      t1.get$data(_).detach$0();
      t2 = this.this_0;
      t2.components.eject$1(_);
      t2.componentStream.emit$1(P.LinkedHashMap_LinkedHashMap$_literal(["id", this.a_1, "uuid", t1.get$data(_).get$uuid(), "type", "removeComponent", "message", "removeComponent component to network"], null, null));
    }, "call$1", null, 2, 0, null, 54, "call"]
  },
  Network_remove_closure0: {
    "^": "Closure:31;this_3,a_4",
    call$1: [function(e) {
      this.this_3.componentStream.emit$1(P.LinkedHashMap_LinkedHashMap$_literal(["type", "network-remove", "error", e, "component", this.a_4], null, null));
    }, "call$1", null, 2, 0, null, 1, "call"]
  },
  Network_shutdown_closure: {
    "^": "Closure:31;this_0,completer_1",
    call$1: [function(_) {
      var t1, t2, t3;
      t1 = this.this_0;
      if (t1.stateManager.run$1("dead") === true) {
        t2 = this.completer_1.future;
        if (t2._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t2._asyncComplete$1(t1);
        return t2;
      }
      t2 = t1._whenAlive;
      t1._whenAlive = t2.future._state !== 0 ? H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]) : t2;
      t2 = t1._whenFrozen;
      t1._whenFrozen = t2.future._state !== 0 ? H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]) : t2;
      t2 = this.completer_1;
      t3 = t1.components.nodes;
      t3.toString;
      t3 = new F.dsListIterator(0, null, null, t3);
      t3.counter = new F.Counter(0, t3);
      t3.cascade$2(new S.Network_shutdown__closure(t1), new S.Network_shutdown__closure0(t1, t2));
      t1.stateManager.switchState$1("dead");
      t1.networkStream.emit$1(P.LinkedHashMap_LinkedHashMap$_literal(["type", "shutdownNetwork", "status", true, "message", "shutting down/killing network operations"], null, null));
      t1.onDead.emit$1(t1);
      t3 = new P.DateTime(Date.now(), false);
      t3.DateTime$_now$0();
      t1.stopStamp = t3;
      t1.connections.storage.clear$0(0);
      return t2.future;
    }, "call$1", null, 2, 0, null, 54, "call"]
  },
  Network_shutdown__closure: {
    "^": "Closure:31;this_2",
    call$1: function(it) {
      if (J.$eq(J.get$data$x(it.get$current()), J.get$data$x(this.this_2.placeholder)))
        return;
      J.get$data$x(it.get$current()).shutdown$0();
    }
  },
  Network_shutdown__closure0: {
    "^": "Closure:31;this_3,completer_4",
    call$1: function(it) {
      var t1 = this.completer_4.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(this.this_3);
    }
  },
  Network_shutdown_closure0: {
    "^": "Closure:31;",
    call$1: [function(e) {
      throw H.wrapException(e);
    }, "call$1", null, 2, 0, null, 1, "call"]
  },
  Network_boot_closure: {
    "^": "Closure:31;this_0,completer_1",
    call$1: [function(_) {
      var t1, t2;
      t1 = this.this_0;
      if (t1.stateManager.run$1("alive") === true) {
        t2 = this.completer_1.future;
        if (t2._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t2._asyncComplete$1(t1);
        return t2;
      }
      if (t1.stateManager.run$1("frozen") === true || t1.stateManager.run$1("dead") === true) {
        t2 = t1._whenDead;
        t1._whenDead = t2.future._state !== 0 ? H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]) : t2;
        t2 = t1._whenFrozen;
        t1._whenFrozen = t2.future._state !== 0 ? H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]) : t2;
        t2 = t1.components.nodes;
        t2.toString;
        t2 = new F.dsListIterator(0, null, null, t2);
        t2.counter = new F.Counter(0, t2);
        t2.cascade$2(new S.Network_boot__closure(t1), new S.Network_boot__closure0(t1, this.completer_1));
      }
      t1._runScheduledPackets$0();
      t1._runBootUpScheduledPackets$0();
      t1.stateManager.switchState$1("alive");
      t1.networkStream.emit$1(P.LinkedHashMap_LinkedHashMap$_literal(["type", "bootingNetwork", "status", true, "message", "booting network operations"], null, null));
      t1.onAlive.emit$1(t1);
      t2 = new P.DateTime(Date.now(), false);
      t2.DateTime$_now$0();
      t1.startStamp = t2;
      return this.completer_1.future;
    }, "call$1", null, 2, 0, null, 54, "call"]
  },
  Network_boot__closure: {
    "^": "Closure:31;this_2",
    call$1: function(it) {
      if (J.$eq(J.get$data$x(it.get$current()), J.get$data$x(this.this_2.placeholder)))
        return;
      J.get$data$x(it.get$current()).boot$0();
    }
  },
  Network_boot__closure0: {
    "^": "Closure:31;this_3,completer_4",
    call$1: function(it) {
      var t1 = this.completer_4.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(this.this_3);
    }
  },
  Network_boot_closure0: {
    "^": "Closure:31;",
    call$1: [function(e) {
      throw H.wrapException(e);
    }, "call$1", null, 2, 0, null, 1, "call"]
  },
  Network_ensureBinding_closure: {
    "^": "Closure:31;this_0,from_1,fp_2,to_3,tp_4,sid_5,ve_6,f_7",
    call$1: [function(net) {
      return this.this_0.doBinding$7(this.from_1, this.fp_2, this.to_3, this.tp_4, this.sid_5, this.ve_6, this.f_7);
    }, "call$1", null, 2, 0, null, 92, "call"]
  },
  Network_link_closure: {
    "^": "Closure:38;box_0,this_1,nport_2,com_3,inport_4,sid_5,ve_6,bf_7",
    call$0: [function() {
      var t1, t2;
      t1 = this.this_1;
      t2 = this.com_3;
      return t1.filterNode$2(t2, this.bf_7).then$1(new S.Network_link__closure(this.box_0, t1, this.nport_2, t2, this.inport_4, this.sid_5, this.ve_6));
    }, "call$0", null, 0, 0, null, "call"]
  },
  Network_link__closure: {
    "^": "Closure:31;box_0,this_8,nport_9,com_10,inport_11,sid_12,ve_13",
    call$1: [function(_) {
      var t1, t2, t3, t4, t5;
      t1 = J.getInterceptor$x(_);
      t2 = this.inport_11;
      if (t1.get$data(_).hasPort$1(t2) !== true)
        return;
      if (this.box_0.inverse_0 === true) {
        t3 = this.this_8;
        t4 = this.nport_9;
        t5 = this.sid_12;
        t3.connectionStream.emit$1(S.SparkFlowMessages_network("link", "*", this.com_10, t2, t4, t5, null));
        J.port$1$x(t1.get$data(_), t2).bindPort$3(t3.networkPorts.port$1(0, t4), t5, this.ve_13);
        return _;
      }
      t3 = this.this_8;
      t4 = this.nport_9;
      t5 = this.sid_12;
      t3.networkPorts.port$1(0, t4).bindPort$3(J.port$1$x(t1.get$data(_), t2), t5, this.ve_13);
      t3.connectionStream.emit$1(S.SparkFlowMessages_network("link", this.com_10, "*", t4, t2, t5, null));
      return _;
    }, "call$1", null, 2, 0, null, 54, "call"]
  },
  Network_doBinding_closure: {
    "^": "Closure:38;this_0,from_1,fp_2,to_3,tp_4,sid_5,ve_6",
    call$0: function() {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.this_0;
      t2 = this.from_1;
      t3 = this.fp_2;
      t4 = this.to_3;
      t5 = this.tp_4;
      t6 = this.sid_5;
      t1.filterNode$1(t2).then$1(new S.Network_doBinding__closure(t1, t2, t3, t4, t5, t6, this.ve_6)).catchError$1(new S.Network_doBinding__closure0(t1, t2, t3, t4, t5, t6));
    }
  },
  Network_doBinding__closure: {
    "^": "Closure:31;this_7,from_8,fp_9,to_10,tp_11,sid_12,ve_13",
    call$1: [function(n) {
      var t1, t2, t3;
      t1 = this.tp_11;
      t2 = this.fp_9;
      t3 = this.sid_12;
      J.get$data$x(n).loopPorts$4(t1, t2, t3, this.ve_13);
      this.this_7.connectionStream.emit$1(S.SparkFlowMessages_network("loop", this.from_8, this.to_10, t2, t1, t3, null));
    }, "call$1", null, 2, 0, null, 32, "call"]
  },
  Network_doBinding__closure0: {
    "^": "Closure:31;this_14,from_15,fp_16,to_17,tp_18,sid_19",
    call$1: [function(e) {
      this.this_14.connectionStream.emit$1(S.SparkFlowMessages_network("loop", this.from_15, this.to_17, this.fp_16, this.tp_18, this.sid_19, e));
    }, "call$1", null, 2, 0, null, 1, "call"]
  },
  Network_doBinding_closure0: {
    "^": "Closure:38;this_20,fp_21,tp_22,sid_23,ve_24",
    call$0: function() {
      return this.this_20.loopPorts$4(this.fp_21, this.tp_22, this.sid_23, this.ve_24);
    }
  },
  Network_doBinding_closure1: {
    "^": "Closure:38;this_25,from_26,fp_27,to_28,tp_29,sid_30,ve_31,f_32",
    call$0: function() {
      return this.this_25.connect$7(this.from_26, this.fp_27, this.to_28, this.tp_29, this.sid_30, this.ve_31, this.f_32);
    }
  },
  Network_doBinding_closure2: {
    "^": "Closure:38;this_33,fp_34,to_35,tp_36,sid_37,ve_38,f_39",
    call$0: function() {
      return this.this_33.link$7(this.fp_34, this.to_35, this.tp_36, this.sid_37, this.ve_38, this.f_39, false);
    }
  },
  Network_doBinding_closure3: {
    "^": "Closure:38;this_40,from_41,fp_42,tp_43,sid_44,ve_45,f_46",
    call$0: function() {
      return this.this_40.link$7(this.tp_43, this.from_41, this.fp_42, this.sid_44, this.ve_45, this.f_46, true);
    }
  },
  Network_connect_closure: {
    "^": "Closure:38;this_0,a_1,aport_2,b_3,bport_4,sockid_5,ve_6,bf_7",
    call$0: [function() {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.this_0;
      t2 = this.a_1;
      t3 = this.bf_7;
      t4 = this.b_3;
      t5 = this.aport_2;
      t6 = this.bport_4;
      t7 = this.sockid_5;
      return P.Future_wait([t1.filterNode$2(t2, t3), t1.filterNode$2(t4, t3)], false).then$1(new S.Network_connect__closure(t1, t2, t5, t4, t6, t7, this.ve_6)).catchError$1(new S.Network_connect__closure0(t1, t2, t5, t4, t6, t7));
    }, "call$0", null, 0, 0, null, "call"]
  },
  Network_connect__closure: {
    "^": "Closure:31;this_8,a_9,aport_10,b_11,bport_12,sockid_13,ve_14",
    call$1: [function(_) {
      var t1, from, to, t2, t3, t4, t5, t6;
      t1 = J.getInterceptor$asx(_);
      from = t1.$index(_, 0);
      to = t1.$index(_, 1);
      t1 = this.aport_10;
      t2 = this.bport_12;
      t3 = this.sockid_13;
      J.get$data$x(from).bind$5(t1, J.get$data$x(to), t2, t3, this.ve_14);
      t4 = this.this_8;
      t5 = this.a_9;
      t6 = this.b_11;
      t4.components.bind$3(from, to, P.LinkedHashMap_LinkedHashMap$_literal(["from", t5, "to", t6, "fromPort", t1, "toport", t6, "socketId", t3], null, null));
      t4.connectionStream.emit$1(S.SparkFlowMessages_network("connect", t5, t6, t2, t1, t3, null));
      return _;
    }, "call$1", null, 2, 0, null, 54, "call"]
  },
  Network_connect__closure0: {
    "^": "Closure:31;this_15,a_16,aport_17,b_18,bport_19,sockid_20",
    call$1: [function(e) {
      this.this_15.connectionStream.emit$1(S.SparkFlowMessages_network("connect", this.a_16, this.b_18, this.bport_19, this.aport_17, this.sockid_20, e));
    }, "call$1", null, 2, 0, null, 1, "call"]
  },
  Network_loopPorts_closure: {
    "^": "Closure:38;this_0,p_1,s_2,sid_3,ve_4",
    call$0: [function() {
      var t1, t2, p1, t3, p2, t4;
      t1 = this.this_0;
      t2 = this.p_1;
      p1 = t1.networkPorts.port$1(0, t2);
      t3 = this.s_2;
      p2 = t1.networkPorts.port$1(0, t3);
      if (p1 != null && p2 != null) {
        t4 = this.sid_3;
        p1.bindPort$3(p2, t4, this.ve_4);
        t1.connectionStream.emit$1(S.SparkFlowMessages_network("loop", "*", "*", t2, t3, t4, null));
      }
      return P._Future$immediate([p1, p2], null);
    }, "call$0", null, 0, 0, null, "call"]
  },
  ConnectionMeta: {
    "^": "MapDecorator;handler,storage",
    filterUUIDPort$3: function(a, port, sockid) {
      return N.Enums_filterKeys(a, new S.ConnectionMeta_filterUUIDPort_closure(port, sockid), null);
    },
    filterPortLevel$4: function(ports, uuid, port, sockid) {
      if (ports.has$1(uuid) !== true)
        return;
      return this.filterUUIDPort$3(ports.get$1(uuid), port, sockid);
    },
    addConnection$4: function(ports, uuid, port, sockid) {
      var result, uuidp;
      if (!this.has$1(ports))
        this.add$2(0, ports, H.setRuntimeTypeInfo(new N.MapDecorator(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [null, null]));
      result = this.has$1(ports) ? this.storage.$index(0, ports) : null;
      if (result.has$1(uuid) !== true)
        J.add$2$ax(result, uuid, []);
      uuidp = result.get$1(uuid);
      N.Funcs_when(this.filterUUIDPort$3(uuidp, port, sockid).length === 0, new S.ConnectionMeta_addConnection_closure(port, sockid, uuidp), null);
    },
    removeConnection$4: function(ports, uuid, port, sockid) {
      var result, item, uuidp;
      if (!this.has$1(ports))
        return;
      result = this.has$1(ports) ? this.storage.$index(0, ports) : null;
      if (result.has$1(uuid) !== true)
        return;
      item = this.filterPortLevel$4(result, uuid, port, sockid);
      uuidp = result.get$1(uuid);
      N.Funcs_when(uuidp != null, new S.ConnectionMeta_removeConnection_closure(uuid, result, item, uuidp), null);
    },
    $asMapDecorator: function() {
      return [null, null];
    }
  },
  ConnectionMeta_filterUUIDPort_closure: {
    "^": "Closure:90;port_0,sockid_1",
    call$3: function(e, i, o) {
      var t1, t2;
      t1 = J.getInterceptor$asx(e);
      if (J.$eq(t1.$index(e, "port"), this.port_0)) {
        t2 = this.sockid_1;
        if (t2 != null)
          t1.$index(e, "socketId");
        if (!J.$eq(t2, t1.$index(e, "socketId")))
          return false;
        return true;
      }
      return false;
    }
  },
  ConnectionMeta_addConnection_closure: {
    "^": "Closure:38;port_0,sockid_1,uuidp_2",
    call$0: function() {
      J.add$1$ax(this.uuidp_2, P.LinkedHashMap_LinkedHashMap$_literal(["port", this.port_0, "socketId", this.sockid_1], null, null));
    }
  },
  ConnectionMeta_removeConnection_closure: {
    "^": "Closure:38;uuid_0,core_1,item_2,uuidp_3",
    call$0: function() {
      var t1, t2;
      t1 = this.item_2;
      t2 = this.uuidp_3;
      t1.toString;
      H.IterableMixinWorkaround_forEach(t1, new S.ConnectionMeta_removeConnection__closure(t2));
      if (J.get$length$asx(t2) === 0)
        this.core_1.destroy$1(this.uuid_0);
    }
  },
  ConnectionMeta_removeConnection__closure: {
    "^": "Closure:31;uuidp_4",
    call$1: function(n) {
      J.removeAt$1$ax(this.uuidp_4, n);
    }
  },
  PortGroup: {
    "^": "Object;defaults,events,portLists,owner<,groupClass",
    _packets$4: function(d, w, r, e) {
      var ip = new S.Packet(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      ip.init$4(d, w, r.get$UID(), e);
      return ip;
    },
    getPort$1: function($name) {
      var t1 = this.portLists;
      return t1.has$1($name) ? t1.storage.$index(0, $name) : null;
    },
    addInport$2: function($name, m) {
      return this._addPort$3($name, m, new S.PortGroup_addInport_closure());
    },
    addOutPort$2: function($name, m) {
      return this._addPort$3($name, m, new S.PortGroup_addOutPort_closure());
    },
    _addPort$3: function($name, meta, g) {
      var t1, port, t2, metad;
      meta = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      t1 = this.portLists;
      if (t1.has$1($name))
        return;
      port = g.call$3($name, N.Enums_merge(meta, this.defaults, true), this.owner);
      port.get$meta().update$2("group", this.groupClass);
      t2 = port.get$meta().get$storage();
      metad = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      metad.addAll$1(0, t2);
      t1.add$2(0, $name, port);
      this.events.emit$1(this._packets$4("addPort", metad, port.get$owner(), J.get$id$x(port)));
    },
    has$1: function($name) {
      return this.portLists.has$1($name);
    },
    close$0: [function(_) {
      this.flushAll$0();
      this.portLists.storage.forEach$1(0, new S.PortGroup_close_closure());
    }, "call$0", "get$close", 0, 0, 12],
    pausePort$1: function($name) {
      var t1, result, t2;
      t1 = this.portLists;
      if (!t1.has$1($name))
        return;
      result = t1.has$1($name) ? t1.storage.$index(0, $name) : null;
      t1 = result.get$meta().get$storage();
      t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t2.addAll$1(0, t1);
      t1 = J.getInterceptor$x(result);
      this.events.emit$1(this._packets$4("pausePort", t2, result.get$owner(), t1.get$id(result)));
      return t1.pause$0(result);
    },
    flushPort$1: function($name) {
      var t1, result, t2;
      t1 = this.portLists;
      if (!t1.has$1($name))
        return;
      result = t1.has$1($name) ? t1.storage.$index(0, $name) : null;
      t1 = result.get$meta().get$storage();
      t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t2.addAll$1(0, t1);
      this.events.emit$1(this._packets$4("flushPort", t2, result.get$owner(), J.get$id$x(result)));
      return result.flushPackets$0();
    },
    pauseAll$0: function() {
      this.portLists.storage.forEach$1(0, new S.PortGroup_pauseAll_closure(this));
    },
    flushAll$0: function() {
      this.portLists.storage.forEach$1(0, new S.PortGroup_flushAll_closure(this));
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this.portLists.storage);
    }
  },
  PortGroup_addInport_closure: {
    "^": "Closure:90;",
    call$3: function(a, b, c) {
      var t1 = new S.Inport(C.C_InPortType, N.Hub_randomString(5, null), P.LinkedHashMap_LinkedHashMap(null, null, null, null, null), null, null, c, null, null, null, null);
      t1.Port$3(a, b, c, null);
      return t1;
    }
  },
  PortGroup_addOutPort_closure: {
    "^": "Closure:90;",
    call$3: function(a, b, c) {
      var t1 = new S.Outport(C.C_OutportType, N.Hub_randomString(5, null), P.LinkedHashMap_LinkedHashMap(null, null, null, null, null), null, null, c, null, null, null, null);
      t1.Port$3(a, b, c, null);
      return t1;
    }
  },
  PortGroup_close_closure: {
    "^": "Closure:43;",
    call$2: function(n, k) {
      J.close$0$x(k);
    }
  },
  PortGroup_pauseAll_closure: {
    "^": "Closure:43;this_0",
    call$2: function(n, k) {
      this.this_0.pausePort$1(n);
    }
  },
  PortGroup_flushAll_closure: {
    "^": "Closure:43;this_0",
    call$2: function(n, k) {
      this.this_0.flushPort$1(n);
    }
  },
  PortManager: {
    "^": "Object;portsGroup,owner<",
    createSpace$1: function(id) {
      var t1, t2;
      t1 = this.portsGroup;
      if (t1.has$1(id))
        return;
      t2 = this.owner;
      t1.add$2(0, id, new S.PortGroup(P.LinkedHashMap_LinkedHashMap$_literal(["schema", "dynamic", "datatype", "dynamic", "engine", "sparkflow"], null, null), X.Streamable$(null, null), H.setRuntimeTypeInfo(new N.MapDecorator(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [null, null]), t2, id));
    },
    destroyAllSpaces$1: function(n) {
      this.portsGroup.storage.forEach$1(0, new S.PortManager_destroyAllSpaces_closure(n));
    },
    destroyAllSpaces$0: function() {
      return this.destroyAllSpaces$1(null);
    },
    createInport$3$meta$port: function(id, meta, port) {
      var path, finder, t1, t2, result;
      path = S.splitPortMap(id);
      finder = N.Enums_nthFor(path);
      if (path == null)
        throw H.wrapException("This '" + id + "' is wrong,port names must be in name_of_space:port_name format");
      if (!this.portsGroup.has$1(finder.call$1(0)))
        this.createSpace$1(finder.call$1(0));
      t1 = this.portsGroup;
      t2 = finder.call$1(0);
      result = t1.has$1(t2) ? t1.storage.$index(0, t2) : null;
      result.addInport$2(finder.call$1(1), meta);
      return this.port$1(0, id);
    },
    createOutport$3$meta$port: function(id, meta, port) {
      var path, finder, t1, t2, result;
      path = S.splitPortMap(id);
      finder = N.Enums_nthFor(path);
      if (path == null)
        throw H.wrapException("This '" + id + "' is wrong,port names must be in name_of_space:port_name format");
      if (!this.portsGroup.has$1(finder.call$1(0)))
        this.createSpace$1(finder.call$1(0));
      t1 = this.portsGroup;
      t2 = finder.call$1(0);
      result = t1.has$1(t2) ? t1.storage.$index(0, t2) : null;
      result.addOutPort$2(finder.call$1(1), meta);
      return this.port$1(0, id);
    },
    port$1: function(_, id) {
      var path, finder, t1, t2, result;
      path = S.splitPortMap(id);
      finder = N.Enums_nthFor(path);
      if (path == null || !this.portsGroup.has$1(finder.call$1(0)))
        return;
      t1 = this.portsGroup;
      t2 = finder.call$1(0);
      result = t1.has$1(t2) ? t1.storage.$index(0, t2) : null;
      return result.getPort$1(finder.call$1(1));
    },
    hasPort$1: function(id) {
      var path, finder, t1, t2, result;
      path = S.splitPortMap(id);
      finder = N.Enums_nthFor(path);
      if (path == null || !this.portsGroup.has$1(finder.call$1(0)))
        return false;
      t1 = this.portsGroup;
      t2 = finder.call$1(0);
      result = t1.has$1(t2) ? t1.storage.$index(0, t2) : null;
      return result.has$1(finder.call$1(1));
    },
    close$0: [function(_) {
      this.destroyAllSpaces$0();
    }, "call$0", "get$close", 0, 0, 12],
    flushAllPackets$0: function() {
      this.portsGroup.storage.forEach$1(0, new S.PortManager_flushAllPackets_closure());
    },
    pauseAll$0: function() {
      this.portsGroup.storage.forEach$1(0, new S.PortManager_pauseAll_closure());
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this.portsGroup.storage);
    }
  },
  PortManager_destroyAllSpaces_closure: {
    "^": "Closure:43;n_0",
    call$2: function(e, k) {
      return J.close$0$x(k);
    }
  },
  PortManager_flushAllPackets_closure: {
    "^": "Closure:43;",
    call$2: function(e, k) {
      k.flushAll$0();
    }
  },
  PortManager_pauseAll_closure: {
    "^": "Closure:43;",
    call$2: function(e, k) {
      k.pauseAll$0();
    }
  },
  Component: {
    "^": "FlowComponent;connectionStream,stateStream,bootups,freezups,shutdowns,sharedState,_connections,network,comPorts,uuid,metas,bindMeta,assocMeta,sharedData,_mutator",
    hasPort$1: function(g) {
      return this.comPorts.hasPort$1(g);
    },
    makeInport$3$meta$port: function(id, meta, port) {
      return this.comPorts.createInport$3$meta$port(id, meta, port);
    },
    makeInport$1: function(id) {
      return this.makeInport$3$meta$port(id, null, null);
    },
    makeOutport$3$meta$port: function(id, meta, port) {
      return this.comPorts.createOutport$3$meta$port(id, meta, port);
    },
    makeOutport$1: function(id) {
      return this.makeOutport$3$meta$port(id, null, null);
    },
    port$1: function(_, n) {
      return this.comPorts.port$1(0, n);
    },
    disableSubnet$0: function() {
      return;
    },
    boot$0: function() {
      var t1, result;
      if (this.sharedState.run$1("alive") === true)
        return P._Future$immediate(this, null);
      if (this.sharedState.run$1("dead") === true)
        this.bootups.emit$1(this);
      t1 = this.metas;
      result = t1.has$1("id") ? t1.storage.$index(0, "id") : null;
      this.stateStream.emit$1(P.LinkedHashMap_LinkedHashMap$_literal(["type", "boot", "id", result, "uuid", t1.has$1("uuid") ? t1.storage.$index(0, "uuid") : null], null, null));
      this.sharedState.switchState$1("booted");
      return P._Future$immediate(this, null);
    },
    shutdown$0: function() {
      var t1, result;
      if (this.sharedState.run$1("dead") === true)
        return P._Future$immediate(this, null);
      this.shutdowns.emit$1(this);
      this.comPorts.flushAllPackets$0();
      this.comPorts.pauseAll$0();
      t1 = this.metas;
      result = t1.has$1("id") ? t1.storage.$index(0, "id") : null;
      this.stateStream.emit$1(P.LinkedHashMap_LinkedHashMap$_literal(["type", "shutdown", "id", result, "uuid", t1.has$1("uuid") ? t1.storage.$index(0, "uuid") : null], null, null));
      this.sharedState.switchState$1("shutdown");
      return P._Future$immediate(this, null);
    },
    kill$0: function() {
      this.comPorts.destroyAllSpaces$0();
      return this.shutdown$0();
    },
    bind$5: function(myport, component, toport, socketId, ve) {
      var myPort, toPort;
      if (this.comPorts.hasPort$1(myport) !== true || component.hasPort$1(toport) !== true)
        return;
      myPort = this.comPorts.port$1(0, myport);
      toPort = J.port$1$x(component, toport);
      this.connectionStream.emit$1(S.SparkFlowMessages_componentConnection("bind", component.get$UID(), this.get$UID(), toport, myport, socketId, null));
      return myPort.bindPort$3(toPort, socketId, ve);
    },
    loopPorts$4: function(v, u, sid, ve) {
      var from, to;
      from = this.comPorts.port$1(0, v);
      to = this.comPorts.port$1(0, u);
      if (to != null && from != null) {
        from.bindPort$3(to, sid, ve);
        this.connectionStream.emit$1(S.SparkFlowMessages_componentConnection("loop", this.get$UID(), this.get$UID(), u, v, null, null));
      }
    },
    close$0: [function(_) {
      this.disableSubnet$0();
      this.get$ports().onAll$1(new S.Component_close_closure());
    }, "call$0", "get$close", 0, 0, 12],
    _checkPort$1: function(id) {
      if (this.comPorts.hasPort$1(id) === true)
        return;
      return new P._ExceptionImplementation(id + " port is not exisiting!");
    },
    send$2: function(_, port, d) {
      this._checkPort$1(port);
      return J.send$1$x(this.comPorts.port$1(0, port), d);
    },
    endStream$2: function(port, d) {
      var pt;
      this._checkPort$1(port);
      pt = this.comPorts.port$1(0, port);
      return pt.endStream$0();
    },
    endStream$1: function(port) {
      return this.endStream$2(port, null);
    },
    tapData$3: function(port, d, bf) {
      this._checkPort$1(port);
      return this.comPorts.port$1(0, port).tapData$1(d);
    },
    tapData$2: function(port, d) {
      return this.tapData$3(port, d, null);
    },
    Component$1: function(id) {
      var t1;
      this.comPorts = new S.PortManager(H.setRuntimeTypeInfo(new N.MapDecorator(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [null, null]), this);
      this._connections = new S.ConnectionMeta(this, P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      t1 = new N.StateManager(this, null, null);
      t1.store = H.setRuntimeTypeInfo(new N.MapDecorator(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [null, null]);
      this.sharedState = t1;
      t1.add$2(0, "booted", P.LinkedHashMap_LinkedHashMap$_literal(["frozen", new S.Component_closure(), "dead", new S.Component_closure0(), "alive", new S.Component_closure1()], null, null));
      this.sharedState.add$2(0, "frozen", P.LinkedHashMap_LinkedHashMap$_literal(["frozen", new S.Component_closure2(), "dead", new S.Component_closure3(), "alive", new S.Component_closure4()], null, null));
      this.sharedState.add$2(0, "shutdown", P.LinkedHashMap_LinkedHashMap$_literal(["frozen", new S.Component_closure5(), "dead", new S.Component_closure6(), "alive", new S.Component_closure7()], null, null));
      this.connectionStream.on$1(0, new S.Component_closure8(this));
      this.sharedState.switchState$1("shutdown");
    },
    static: {Component_create: [function(id) {
        return S.Component$(id);
      }, function() {
        return S.Component_create(null);
      }, null, "call$1", "call$0", "Component_create$closure", 0, 2, 33, 17, 34], Component$: function(id) {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9;
        t1 = X.Streamable$(null, null);
        t2 = X.Streamable$(null, null);
        t3 = X.Distributor$("connection_bootup", null);
        t4 = X.Distributor$("connection_freeze", null);
        t5 = X.Distributor$("connection_shutdowns", null);
        t6 = id == null ? "Component" : id;
        t7 = N.Hub_randomString(7, null);
        t8 = P.LinkedHashMap_LinkedHashMap$_literal(["desc", "basic description"], null, null);
        t9 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        t9.addAll$1(0, t8);
        t9 = new S.Component(t1, t2, t3, t4, t5, null, null, null, null, t7, H.setRuntimeTypeInfo(new N.MapDecorator(t9), [null, null]), H.setRuntimeTypeInfo(new N.MapDecorator(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [null, null]), H.setRuntimeTypeInfo(new N.MapDecorator(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [null, null]), H.setRuntimeTypeInfo(new N.MapDecorator(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [null, null]), null);
        t9.FlowComponent$1(t6);
        t9.Component$1(id);
        return t9;
      }}
  },
  Component_closure: {
    "^": "Closure:43;",
    call$2: [function(t, c) {
      return false;
    }, "call$2", null, 4, 0, null, 29, 70, "call"]
  },
  Component_closure0: {
    "^": "Closure:43;",
    call$2: [function(t, c) {
      return false;
    }, "call$2", null, 4, 0, null, 29, 70, "call"]
  },
  Component_closure1: {
    "^": "Closure:43;",
    call$2: [function(t, c) {
      return true;
    }, "call$2", null, 4, 0, null, 29, 70, "call"]
  },
  Component_closure2: {
    "^": "Closure:43;",
    call$2: [function(t, c) {
      return true;
    }, "call$2", null, 4, 0, null, 29, 70, "call"]
  },
  Component_closure3: {
    "^": "Closure:43;",
    call$2: [function(t, c) {
      return false;
    }, "call$2", null, 4, 0, null, 29, 70, "call"]
  },
  Component_closure4: {
    "^": "Closure:43;",
    call$2: [function(t, c) {
      return false;
    }, "call$2", null, 4, 0, null, 29, 70, "call"]
  },
  Component_closure5: {
    "^": "Closure:43;",
    call$2: [function(t, c) {
      return false;
    }, "call$2", null, 4, 0, null, 29, 70, "call"]
  },
  Component_closure6: {
    "^": "Closure:43;",
    call$2: [function(t, c) {
      return true;
    }, "call$2", null, 4, 0, null, 29, 70, "call"]
  },
  Component_closure7: {
    "^": "Closure:43;",
    call$2: [function(t, c) {
      return false;
    }, "call$2", null, 4, 0, null, 29, 70, "call"]
  },
  Component_closure8: {
    "^": "Closure:31;this_0",
    call$1: [function(e) {
      var t1, t2;
      t1 = J.getInterceptor$asx(e);
      t2 = this.this_0;
      N.Funcs_when(J.$eq(t1.$index(e, "type"), "bind"), new S.Component__closure(t2, e), null);
      N.Funcs_when(J.$eq(t1.$index(e, "type"), "unbind"), new S.Component__closure0(t2, e), null);
    }, "call$1", null, 2, 0, null, 1, "call"]
  },
  Component__closure: {
    "^": "Closure:38;this_1,e_2",
    call$0: function() {
      var t1, t2;
      t1 = this.e_2;
      t2 = J.getInterceptor$asx(t1);
      this.this_1._connections.addConnection$4(t2.$index(t1, "fromPort"), t2.$index(t1, "to"), t2.$index(t1, "toPort"), t2.$index(t1, "socketid"));
    }
  },
  Component__closure0: {
    "^": "Closure:38;this_3,e_4",
    call$0: function() {
      var t1, t2;
      t1 = this.e_4;
      t2 = J.getInterceptor$asx(t1);
      this.this_3._connections.removeConnection$4(t2.$index(t1, "fromPort"), t2.$index(t1, "to"), t2.$index(t1, "toPort"), t2.$index(t1, "socketid"));
    }
  },
  Component_boot_closure: {
    "^": "Closure:31;this_0",
    call$1: function(n) {
      return this.this_0;
    }
  },
  Component_shutdown_closure: {
    "^": "Closure:31;this_0",
    call$1: function(n) {
      return this.this_0;
    }
  },
  Component_close_closure: {
    "^": "Closure:31;",
    call$1: function(n) {
      return n.detach$0();
    }
  },
  MassTree: {
    "^": "MapDecorator;canDestroy,storage",
    destroy$1: function(key) {
      if (this.canDestroy._hubutils$_state !== 1)
        return;
      return N.MapDecorator.prototype.destroy$1.call(this, key);
    },
    $asMapDecorator: function() {
      return [null, null];
    }
  },
  ComponentGroup: {
    "^": "Object;groups,uuid<,id>",
    add$2: function(_, handle, generator) {
      var t1;
      handle = J.toLowerCase$0$s(handle);
      t1 = this.groups;
      if (t1.has$1(handle))
        return;
      t1.add$2(0, handle, new S.ComponentGroup_add_closure(generator, this.id + "/" + handle));
    },
    get$1: function(handle) {
      var t1;
      handle = J.toLowerCase$0$s(handle);
      t1 = this.groups;
      return t1.has$1(handle) ? t1.storage.$index(0, handle) : null;
    },
    has$1: function(handle) {
      return this.groups.has$1(J.toLowerCase$0$s(handle));
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this.groups.storage);
    }
  },
  ComponentGroup_add_closure: {
    "^": "Closure:95;generator_0,path_1",
    call$2: [function(ops, named) {
      var com = H.Primitives_applyFunction(this.generator_0, N.Funcs_switchUnless(ops, []), P.Function__toMangledNames(N.Hub_encryptNamedArguments(N.Funcs_switchUnless(named, P.LinkedHashMap_LinkedHashMap$_empty(null, null)))));
      if (!J.getInterceptor(com).$isFlowComponent)
        throw H.wrapException(P.Exception_Exception(H.S(com) + " is not a type of " + C.Type_Epa.toString$0(0)));
      com.metas.update$2("group", this.path_1);
      return com;
    }, function() {
      return this.call$2(null, null);
    }, "call$0", function(ops) {
      return this.call$2(ops, null);
    }, "call$1", "call$2", null, null, null, 0, 4, null, 17, 17, 93, 94, "call"]
  },
  SparkGroups: {
    "^": "Object;groupSets",
    addGroup$1: function(handle) {
      var t1;
      handle = J.toLowerCase$0$s(handle);
      t1 = this.groupSets;
      if (t1.has$1(handle))
        return;
      t1.add$2(0, handle, new S.ComponentGroup(H.setRuntimeTypeInfo(new N.MapDecorator(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [null, null]), N.Hub_randomString(7, null), handle));
    },
    getGroup$1: function(handle) {
      var t1;
      handle = J.toLowerCase$0$s(handle);
      t1 = this.groupSets;
      if (t1.has$1(C.JSString_methods.toLowerCase$0(handle)))
        return t1.has$1(handle) ? t1.storage.$index(0, handle) : null;
      return;
    },
    hasGroup$1: function(handle) {
      return this.groupSets.has$1(J.toLowerCase$0$s(handle));
    },
    generate$4: function(handle, type, ops, a) {
      var group;
      handle = J.toLowerCase$0$s(handle);
      type = C.JSNull_methods.toLowerCase$0(type);
      group = this.getGroup$1(handle);
      if (group == null || group.has$1(type) !== true)
        return;
      return group.get$1(type).call$2(ops, a);
    },
    generate$3: function(handle, type, ops) {
      return this.generate$4(handle, type, ops, null);
    },
    hasGroupString$1: function(path) {
      var from, group, $name;
      from = J.toLowerCase$0$s(path).split("/");
      if (from.length < 2)
        return;
      group = N.Enums_nth(from, 0);
      $name = N.Enums_nth(from, 1);
      return this.groupSets.has$1(J.toLowerCase$0$s(group)) && this.getGroup$1(group).has$1($name);
    },
    addUsingString$2: function(path, n) {
      var from, group, $name;
      from = J.toLowerCase$0$s(path).split("/");
      if (from.length < 2)
        return;
      group = N.Enums_nth(from, 0);
      $name = N.Enums_nth(from, 1);
      this.addGroup$1(group);
      J.add$2$ax(this.getGroup$1(group), $name, n);
    },
    getGroupFromString$1: function(path) {
      var from = path.toLowerCase().split("/");
      if (from.length < 2)
        return;
      if (this.groupSets.has$1(J.toLowerCase$0$s(C.JSArray_methods.get$first(from))))
        return this.getGroup$1(N.Enums_nth(from, 0)).get$1(N.Enums_nth(from, 1));
      return;
    },
    generateFromString$3: function(path, ops, a) {
      var item = this.getGroupFromString$1(J.toLowerCase$0$s(path));
      if (item != null)
        return item.call$2(ops, a);
      return;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this.groupSets.storage);
    }
  },
  PacketList: {
    "^": "Object;"
  },
  Packet: {
    "^": "MapDecorator;storage",
    init$4: function($event, data, owner, portid) {
      this.update$2("event", $event);
      this.set$data(0, data);
      this.update$2("owner", owner);
      this.update$2("port", portid);
      this.add$2(0, "_owner-root", owner);
      this.add$2(0, "_lists", H.setRuntimeTypeInfo(new N.MapDecorator(P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, S.PacketList)), [null, null]));
      return this;
    },
    get$event: function() {
      return this.has$1("event") ? this.storage.$index(0, "event") : null;
    },
    get$data: function(_) {
      return this.has$1("data") ? this.storage.$index(0, "data") : null;
    },
    get$owner: function() {
      return this.has$1("owner") ? this.storage.$index(0, "owner") : null;
    },
    get$port: function(_) {
      return this.has$1("port") ? this.storage.$index(0, "port") : null;
    },
    port$1: function($receiver, arg0) {
      return this.get$port(this).call$1(arg0);
    },
    set$data: function(_, d) {
      if (this.has$1("data"))
        return this.update$2("data", d);
      this.add$2(0, "data", d);
    },
    toString$0: function(_) {
      var buffer = P.StringBuffer$("");
      buffer.write$1("Packet:\n");
      buffer.write$1("\t event: " + H.S(this.has$1("event") ? this.storage.$index(0, "event") : null) + "\n");
      buffer.write$1("\t owner: " + H.S(this.has$1("owner") ? this.storage.$index(0, "owner") : null) + "\n");
      buffer.write$1("\t data: " + H.S(this.has$1("data") ? this.storage.$index(0, "data") : null) + "\n");
      buffer.write$1("\t port: " + H.S(this.has$1("port") ? this.storage.$index(0, "port") : null) + "\n");
      buffer.write$1("\t packetList: " + H.S(this.has$1("_lists") ? this.storage.$index(0, "_lists") : null) + "\n");
      return buffer._contents;
    },
    $isPacket: true,
    $asMapDecorator: function() {
      return [null, null];
    }
  },
  SparkRegistry: {
    "^": "Object;groups",
    register$3: function(_, handle, type, g) {
      var t1, g0;
      t1 = this.groups;
      t1.addGroup$1(handle);
      g0 = t1.getGroup$1(handle);
      if (g0 != null)
        J.add$2$ax(g0, type, g);
    },
    hasGroup$1: function(path) {
      return this.groups.hasGroupString$1(path);
    },
    add$2: function(_, path, n) {
      return this.groups.addUsingString$2(path, n);
    },
    addMutation$2: function(path, mutation) {
      var id = path.split("/");
      if (id.length <= 1)
        throw H.wrapException("path must be in group/id format");
      return this.groups.addUsingString$2(path, new S.SparkRegistry_addMutation_closure(mutation, id));
    },
    generate$3: function(path, ops, a) {
      return this.groups.generateFromString$3(path, ops, a);
    }
  },
  SparkRegistry_addMutation_closure: {
    "^": "Closure:98;mutation_0,id_1",
    call$2: [function(l, m) {
      var t1, shell;
      t1 = this.id_1;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      shell = S.Component$(t1[1]);
      t1 = this.mutation_0;
      shell._mutator = t1;
      shell.meta$2("_mutator", t1);
      t1.call$1(shell);
      return shell;
    }, function() {
      return this.call$2(null, null);
    }, "call$0", function(l) {
      return this.call$2(l, null);
    }, "call$1", "call$2", null, null, null, 0, 4, null, 17, 17, 96, 97, "call"]
  },
  SparkRegistryManager: {
    "^": "Object;registery_groups",
    createRegistry$2: function(nse, fn) {
      if (this.registery_groups.has$1(C.JSString_methods.toLowerCase$0(nse)))
        return fn.call$1(this.registry$1(nse));
      this.registerNS$1(nse);
      fn.call$1(this.registry$1(nse));
      return this;
    },
    registerNS$1: function(namespace) {
      this.registery_groups.add$2(0, namespace.toLowerCase(), new S.SparkRegistry(new S.SparkGroups(new S.MassTree(new N.Switch(-1, H.setRuntimeTypeInfo([], [P.Function]), H.setRuntimeTypeInfo([], [P.Function])), P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)))));
    },
    has$1: function(nm) {
      var from, ne, t1, t2;
      from = S.registryPathProcessor(J.toLowerCase$0$s(nm));
      if (from == null)
        return false;
      ne = N.Enums_nth(from, 0);
      if (!this.registery_groups.has$1(J.toLowerCase$0$s(ne)))
        return false;
      t1 = this.registry$1(ne);
      if (1 >= from.length)
        return H.ioore(from, 1);
      t2 = J.$add$ns(from[1], "/");
      if (2 >= from.length)
        return H.ioore(from, 2);
      return t1.hasGroup$1(J.$add$ns(t2, from[2]));
    },
    registry$1: function(nm) {
      var t1;
      nm = J.toLowerCase$0$s(nm);
      t1 = this.registery_groups;
      if (!t1.has$1(C.JSString_methods.toLowerCase$0(nm)))
        return;
      return t1.has$1(nm) ? t1.storage.$index(0, nm) : null;
    },
    register$4: function(_, ns, gp, id, n) {
      if (!this.registery_groups.has$1(C.JSString_methods.toLowerCase$0(ns)))
        return;
      return J.register$3$x(this.registry$1(ns), gp, id, n);
    },
    generate$3: function(path, ops, a) {
      var from, ne, gp, id;
      from = S.registryPathProcessor(J.toLowerCase$0$s(path));
      if (from == null)
        return;
      ne = N.Enums_nth(from, 0);
      if (!this.registery_groups.has$1(J.toLowerCase$0$s(ne)))
        return;
      gp = N.Enums_nth(from, 1);
      id = N.Enums_nth(from, 2);
      return this.registry$1(ne).generate$3(J.$add$ns(J.$add$ns(gp, "/"), id), ops, a);
    },
    SparkRegistryManager$0: function() {
      this.registerNS$1("Core");
      this.register$4(0, "Core", "components", "component", S.Component_create$closure());
    }
  }
}],
["streamable", "package:streamable/streamable.dart", , X, {
  "^": "",
  Streamer: {
    "^": "Object;"
  },
  Listener: {
    "^": "Object;",
    pause$0: function(_) {
    },
    resume$0: function() {
    }
  },
  Distributor: {
    "^": "Object;listeners,done,onced,id>,listenerIterator,doneIterator,onceIterator,_locked",
    on$1: function(_, n) {
      if (this.listenerIterator.has$2(n, null))
        return;
      this.listeners.append$1(0, n);
    },
    off$1: function(m) {
      var item = this.listenerIterator.remove$1(0, m);
      if (item == null)
        return;
      return item.data;
    },
    free$0: function() {
      this.listeners.removeAll$0();
      this.done.removeAll$0();
      this.onced.removeAll$0();
    },
    emit$1: function(n) {
      if (this._locked)
        return;
      this.fireOncers$1(n);
      this.fireListeners$1(n);
    },
    fireListeners$1: function(n) {
      var t1 = this.listeners;
      if (t1.head == null && t1.tail == null)
        return;
      for (; this.listenerIterator.moveNext$0();)
        this.listenerIterator.current$1(n);
      this.fireDone$1(n);
    },
    fireOncers$1: function(n) {
      var t1 = this.onced;
      if (t1.head == null && t1.tail == null)
        return;
      for (; this.onceIterator.moveNext$0();)
        this.onceIterator.current$1(n);
      t1.removeAll$0();
    },
    fireDone$1: function(n) {
      var t1 = this.done;
      if (t1.head == null && t1.tail == null)
        return;
      for (; this.doneIterator.moveNext$0();)
        this.doneIterator.current$1(n);
    },
    Distributor$1: function(id, $T) {
      var t1 = new F.dsListIterator(0, null, null, this.listeners);
      t1.counter = new F.Counter(0, t1);
      this.listenerIterator = t1;
      t1 = new F.dsListIterator(0, null, null, this.done);
      t1.counter = new F.Counter(0, t1);
      this.doneIterator = t1;
      t1 = new F.dsListIterator(0, null, null, this.onced);
      t1.counter = new F.Counter(0, t1);
      this.onceIterator = t1;
    },
    static: {Distributor$: function(id, $T) {
        var t1, t2, t3, t4;
        t1 = H.setRuntimeTypeInfo(new F.dsList(null, null, null, null, false, null), [P.Function]);
        t1.bomb = new F.Counter(0, t1);
        t2 = new F.dsListIterator(0, null, null, t1);
        t2.counter = new F.Counter(0, t2);
        t1._it = t2;
        t2 = H.setRuntimeTypeInfo(new F.dsList(null, null, null, null, false, null), [P.Function]);
        t2.bomb = new F.Counter(0, t2);
        t3 = new F.dsListIterator(0, null, null, t2);
        t3.counter = new F.Counter(0, t3);
        t2._it = t3;
        t3 = H.setRuntimeTypeInfo(new F.dsList(null, null, null, null, false, null), [P.Function]);
        t3.bomb = new F.Counter(0, t3);
        t4 = new F.dsListIterator(0, null, null, t3);
        t4.counter = new F.Counter(0, t4);
        t3._it = t4;
        t3 = H.setRuntimeTypeInfo(new X.Distributor(t1, t2, t3, id, null, null, null, false), [$T]);
        t3.Distributor$1(id, $T);
        return t3;
      }}
  },
  Streamable: {
    "^": "Streamer;streams,transformer,initd,drained,ended,closed,resumer,pauser,listeners,listenersAdded,listenersRemoved,state,pushState,flush,iterator>,_willEndOnDrain,_ender,_endStreamDispatcher",
    _ender$0: function() {
      return this._ender.call$0();
    },
    emit$1: [function(e) {
      var t1;
      if (e == null)
        return;
      if (this.state.run$1("closed") === true || this.state.run$1("closing") === true)
        return;
      t1 = this.streams;
      if (t1.isDense$0())
        if (this.flush.run$1("allowed") === true)
          t1.removeAll$0();
        else
          return;
      this.initd.emit$1(e);
      this.transformer.fireListeners$1(e);
    }, "call$1", "get$emit", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T0", void: true, args: [T]};
      }, this.$receiver, "Streamable");
    }, 1],
    on$1: function(_, n) {
      this.listeners.on$1(0, n);
      this.listenersAdded.emit$1(n);
      this.push$0();
    },
    whenEnded$1: function(n) {
      this.ended.on$1(0, n);
    },
    push$0: function() {
      if (this.pushState.run$1("delayed") === true)
        return this.pushDelayed$0();
      return this.pushStrict$0();
    },
    pushDelayed$0: function() {
      var t1, t2, t3;
      t1 = this.listeners;
      t2 = t1.listeners;
      if (!(t2.head == null && t2.tail == null && this.state.run$1("closing") === true))
        if (this.state.run$1("closing") === true) {
          t3 = this.streams;
          t3 = t3.head == null && t3.tail == null;
        } else
          t3 = false;
      else
        t3 = true;
      if (t3) {
        this._ender$0();
        return;
      }
      if (!(t2.head == null && t2.tail == null)) {
        t2 = this.streams;
        t2 = t2.head == null && t2.tail == null || this.state.run$1("firing") === true || this.state.run$1("paused") === true || this.state.run$1("closed") === true;
      } else
        t2 = true;
      if (t2)
        return;
      t2 = this.streams;
      if (t2.head == null && t2.tail == null && this.state.run$1("closing") !== true)
        return;
      if (this.state.run$1("closing") !== true)
        this.state.switchState$1("firing");
      while (true) {
        if (!!(t2.head == null && t2.tail == null))
          break;
        t1.emit$1(t2.removeHead$0().data);
      }
      if (this.state.run$1("closing") === true && t2.head == null && t2.tail == null) {
        this._ender$0();
        return;
      } else
        this.push$0();
      this.drained.emit$1(true);
      if (this.state.run$1("closing") !== true)
        this.state.switchState$1("resumed");
    },
    pushStrict$0: function() {
      var t1, t2, t3;
      t1 = this.listeners;
      t2 = t1.listeners;
      if (!(t2.head == null && t2.tail == null && this.state.run$1("closing") === true))
        if (this.state.run$1("closing") === true) {
          t3 = this.streams;
          t3 = t3.head == null && t3.tail == null;
        } else
          t3 = false;
      else
        t3 = true;
      if (t3) {
        this._ender$0();
        return;
      }
      if (!(t2.head == null && t2.tail == null)) {
        t2 = this.streams;
        t2 = t2.head == null && t2.tail == null || this.state.run$1("firing") === true || this.state.run$1("paused") === true || this.state.run$1("closed") === true;
      } else
        t2 = true;
      if (t2)
        return;
      if (this.state.run$1("closing") === true) {
        this._ender$0();
        return;
      }
      this.state.switchState$1("firing");
      t2 = this.streams;
      while (true) {
        if (!!(t2.head == null && t2.tail == null))
          break;
        t1.emit$1(t2.removeHead$0().data);
      }
      this.drained.emit$1(true);
      this.state.switchState$1("resumed");
    },
    pause$0: function(_) {
      if (this.state.run$1("closed") === true)
        return;
      this.state.switchState$1("paused");
      this.pauser.emit$1(this);
    },
    resume$0: function() {
      if (this.state.run$1("closed") === true)
        return;
      this.state.switchState$1("resumed");
      this.resumer.emit$1(this);
      this.push$0();
    },
    end$0: function() {
      if (this.state.run$1("closed") === true)
        return;
      this.push$0();
      this.ended.emit$1(true);
    },
    close$0: [function(_) {
      var t1, t2, t3, t4, t5, t6;
      if (this.state.run$1("closed") === true)
        return;
      this.state.switchState$1("closing");
      this.end$0();
      t1 = this.initd;
      t1._locked = true;
      this.transformer._hubutils$_locked = true;
      t2 = this.drained;
      t2._locked = true;
      t3 = this.ended;
      t3._locked = true;
      t4 = this.listeners;
      t4._locked = true;
      t5 = this.listenersAdded;
      t5._locked = true;
      t6 = this.listenersRemoved;
      t6._locked = true;
      t3.free$0();
      t4.free$0();
      t1.free$0();
      t2.free$0();
      t5.free$0();
      t6.free$0();
      t6 = this.closed;
      t6.emit$1(true);
      t6.free$0();
      t6._locked = true;
    }, "call$0", "get$close", 0, 0, 12],
    get$isEmpty: function(_) {
      return this.streams.bomb._count <= 0;
    },
    Streamable$1: function(m, $T) {
      var t1, t2;
      t1 = new N.StateManager(this, null, null);
      t1.store = H.setRuntimeTypeInfo(new N.MapDecorator(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [null, null]);
      this.state = t1;
      t1 = new N.StateManager(this, null, null);
      t1.store = H.setRuntimeTypeInfo(new N.MapDecorator(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [null, null]);
      this.pushState = t1;
      t1 = new N.StateManager(this, null, null);
      t1.store = H.setRuntimeTypeInfo(new N.MapDecorator(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [null, null]);
      this.flush = t1;
      t2 = new F.dsListIterator(0, null, null, this.streams);
      t2.counter = new F.Counter(0, t2);
      this.iterator = t2;
      this._endStreamDispatcher = new X.Streamable_closure(this);
      t1.add$2(0, "yes", P.LinkedHashMap_LinkedHashMap$_literal(["allowed", new X.Streamable_closure0()], null, null));
      this.flush.add$2(0, "no", P.LinkedHashMap_LinkedHashMap$_literal(["allowed", new X.Streamable_closure1()], null, null));
      this.pushState.add$2(0, "strict", P.LinkedHashMap_LinkedHashMap$_literal(["strict", new X.Streamable_closure2(), "delayed", new X.Streamable_closure3()], null, null));
      this.pushState.add$2(0, "delayed", P.LinkedHashMap_LinkedHashMap$_literal(["strict", new X.Streamable_closure4(), "delayed", new X.Streamable_closure5()], null, null));
      this.state.add$2(0, "closed", P.LinkedHashMap_LinkedHashMap$_literal(["closed", new X.Streamable_closure6(), "closing", new X.Streamable_closure7(), "firing", new X.Streamable_closure8(), "paused", new X.Streamable_closure9(), "resumed", new X.Streamable_closure10()], null, null));
      this.state.add$2(0, "resumed", P.LinkedHashMap_LinkedHashMap$_literal(["closing", new X.Streamable_closure11(), "closed", new X.Streamable_closure12(), "firing", new X.Streamable_closure13(), "paused", new X.Streamable_closure14(), "resumed", new X.Streamable_closure15()], null, null));
      this.state.add$2(0, "paused", P.LinkedHashMap_LinkedHashMap$_literal(["closing", new X.Streamable_closure16(), "closed", new X.Streamable_closure17(), "firing", new X.Streamable_closure18(), "paused", new X.Streamable_closure19(), "resumed", new X.Streamable_closure20()], null, null));
      this.state.add$2(0, "firing", P.LinkedHashMap_LinkedHashMap$_literal(["closing", new X.Streamable_closure21(), "closed", new X.Streamable_closure22(), "firing", new X.Streamable_closure23(), "paused", new X.Streamable_closure24(), "resumed", new X.Streamable_closure25()], null, null));
      this.state.add$2(0, "closing", P.LinkedHashMap_LinkedHashMap$_literal(["closing", new X.Streamable_closure26(), "closed", new X.Streamable_closure27(), "firing", new X.Streamable_closure28(), "paused", new X.Streamable_closure29(), "resumed", new X.Streamable_closure30()], null, null));
      this.transformer.whenDone$1(new X.Streamable_closure31(this));
      this.state.switchState$1("resumed");
      this.flush.switchState$1("no");
      this.pushState.switchState$1("strict");
      this._ender = new X.Streamable_closure32(this);
    },
    static: {Streamable$: function(m, $T) {
        var t1 = H.setRuntimeTypeInfo(new X.Streamable(F.dsList_create(null), H.setRuntimeTypeInfo(new N.Mutator([], H.setRuntimeTypeInfo([], [P.Function]), H.setRuntimeTypeInfo([], [P.Function]), H.setRuntimeTypeInfo([], [P.Function]), new N.Switch(-1, H.setRuntimeTypeInfo([], [P.Function]), H.setRuntimeTypeInfo([], [P.Function])), "streamble-transformer", false), [null]), X.Distributor$("streamable-emitInitiation", null), X.Distributor$("streamable-drainer", null), X.Distributor$("streamable-close", null), X.Distributor$("streamable-close", null), X.Distributor$("streamable-resume", null), X.Distributor$("streamable-pause", null), X.Distributor$("streamable-listeners", null), X.Distributor$("streamable-listenersAdd", null), X.Distributor$("streamable-listenersRemoved", null), null, null, null, null, false, null, null), [$T]);
        t1.Streamable$1(m, $T);
        return t1;
      }}
  },
  Streamable_closure: {
    "^": "Closure:31;this_0",
    call$1: function(n) {
      this.this_0.end$0();
    }
  },
  Streamable_closure0: {
    "^": "Closure:43;",
    call$2: [function(t, c) {
      return true;
    }, "call$2", null, 4, 0, null, 29, 70, "call"]
  },
  Streamable_closure1: {
    "^": "Closure:43;",
    call$2: [function(t, c) {
      return false;
    }, "call$2", null, 4, 0, null, 29, 70, "call"]
  },
  Streamable_closure2: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return true;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure3: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return false;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure4: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return false;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure5: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return true;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure6: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return true;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure7: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return false;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure8: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return false;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure9: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return false;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure10: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return false;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure11: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return false;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure12: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return false;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure13: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return false;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure14: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return false;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure15: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return true;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure16: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return false;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure17: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return false;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure18: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return false;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure19: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return true;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure20: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return false;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure21: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return false;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure22: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return false;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure23: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return true;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure24: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return false;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure25: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return true;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure26: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return true;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure27: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return false;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure28: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return false;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure29: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return false;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure30: {
    "^": "Closure:43;",
    call$2: [function(target, control) {
      return false;
    }, "call$2", null, 4, 0, null, 99, 100, "call"]
  },
  Streamable_closure31: {
    "^": "Closure:31;this_1",
    call$1: [function(n) {
      var t1 = this.this_1;
      t1.streams.append$1(0, n);
      t1.push$0();
    }, "call$1", null, 2, 0, null, 32, "call"]
  },
  Streamable_closure32: {
    "^": "Closure:38;this_2",
    call$0: function() {
      var t1, t2;
      t1 = this.this_2;
      t1.state.switchState$1("closed");
      t2 = t1.drained;
      t2.emit$1(true);
      t2._locked = true;
      t1.listenersAdded._locked = true;
      t1.listenersRemoved._locked = true;
    }
  },
  Subscriber: {
    "^": "Listener;stream,source,_endHandler,info",
    whenEnded$1: function(n) {
      this.stream.ended.on$1(0, n);
    },
    emit$1: [function(a) {
      this.stream.emit$1(a);
    }, "call$1", "get$emit", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T1", void: true, args: [T]};
      }, this.$receiver, "Subscriber");
    }, 22],
    pause$0: function(_) {
      this.stream.pause$0(0);
    },
    resume$0: function() {
      this.stream.resume$0();
    },
    close$0: [function(_) {
      this.stream.close$0(0);
    }, "call$0", "get$close", 0, 0, 12],
    Subscriber$1: function(source, $T) {
      this._endHandler = new X.Subscriber_closure(this);
      this.source.on$1(0, this.get$emit());
      this.source.closed.on$1(0, new X.Subscriber_closure0(this));
      this.stream.closed.on$1(0, new X.Subscriber_closure1(this));
      this.source.ended.on$1(0, this._endHandler);
    },
    static: {Subscriber$: function(source, $T) {
        var t1 = H.setRuntimeTypeInfo(new X.Subscriber(X.Streamable$(null, null), source, null, H.setRuntimeTypeInfo(new N.MapDecorator(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [null, null])), [$T]);
        t1.Subscriber$1(source, $T);
        return t1;
      }}
  },
  Subscriber_closure: {
    "^": "Closure:31;this_0",
    call$1: [function(n) {
      this.this_0.stream.end$0();
    }, "call$1", null, 2, 0, null, 32, "call"]
  },
  Subscriber_closure0: {
    "^": "Closure:31;this_1",
    call$1: [function(n) {
      this.this_1.stream.close$0(0);
      return;
    }, "call$1", null, 2, 0, null, 32, "call"]
  },
  Subscriber_closure1: {
    "^": "Closure:31;this_2",
    call$1: [function(n) {
      var t1, t2, t3;
      t1 = this.this_2;
      t2 = t1.source;
      t3 = t1.get$emit();
      t2.listeners.off$1(t3);
      t2.listenersRemoved.emit$1(t3);
      t1.source = null;
    }, "call$1", null, 2, 0, null, 32, "call"]
  }
}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Runtime type support
P.$int.$is$int = true;
P.$int.$isnum = true;
P.$int.$isComparable = true;
P.$int.$asComparable = [P.num];
P.$int.$isObject = true;
P.$double.$isnum = true;
P.$double.$isComparable = true;
P.$double.$asComparable = [P.num];
P.$double.$isObject = true;
W.Node.$isNode = true;
W.Node.$isObject = true;
P.String.$isString = true;
P.String.$isComparable = true;
P.String.$asComparable = [P.String];
P.String.$isObject = true;
P.num.$isnum = true;
P.num.$isComparable = true;
P.num.$asComparable = [P.num];
P.num.$isObject = true;
P.Duration.$isDuration = true;
P.Duration.$isComparable = true;
P.Duration.$asComparable = [P.Duration];
P.Duration.$isObject = true;
F.dsGraphNode.$isdsGraphNode = true;
F.dsGraphNode.$isObject = true;
P.List.$isList = true;
P.List.$isObject = true;
P.Function.$isFunction = true;
P.Function.$isObject = true;
P.Symbol.$isSymbol = true;
P.Symbol.$isObject = true;
S.FlowComponent.$isObject = true;
F.dsGNode.$isObject = true;
F.dsGraphArc.$isObject = true;
S.PacketList.$isObject = true;
H.RawReceivePortImpl.$isObject = true;
H._IsolateEvent.$isObject = true;
H._IsolateContext.$isObject = true;
P.bool.$isbool = true;
P.bool.$isObject = true;
P.Object.$isObject = true;
P.Map.$isMap = true;
P.Map.$isObject = true;
P.StackTrace.$isStackTrace = true;
P.StackTrace.$isObject = true;
P.Comparable.$isComparable = true;
P.Comparable.$isObject = true;
P._EventSink.$is_EventSink = true;
P._EventSink.$isObject = true;
P.Future.$isFuture = true;
P.Future.$isObject = true;
P._DelayedEvent.$is_DelayedEvent = true;
P._DelayedEvent.$isObject = true;
P.StreamSubscription.$isStreamSubscription = true;
P.StreamSubscription.$isObject = true;
P.DateTime.$isDateTime = true;
P.DateTime.$isComparable = true;
P.DateTime.$asComparable = [null];
P.DateTime.$isObject = true;
F.dsNode.$isdsNode = true;
F.dsNode.$isObject = true;
F.dsAbstractGraph.$isdsAbstractGraph = true;
F.dsAbstractGraph.$isObject = true;
S.FlowPort.$isFlowPort = true;
S.FlowPort.$isObject = true;
P.Uint8List.$isUint8List = true;
P.Uint8List.$isList = true;
P.Uint8List.$asList = [P.$int];
P.Uint8List.$isObject = true;
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$shl$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$shl(receiver, a0);
};
J.$xor$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver ^ a0) >>> 0;
  return J.getInterceptor$n(receiver).$xor(receiver, a0);
};
J.add$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).add$1(receiver, a0);
};
J.add$2$ax = function(receiver, a0, a1) {
  return J.getInterceptor$ax(receiver).add$2(receiver, a0, a1);
};
J.close$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).close$0(receiver);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.complete$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).complete$1(receiver, a0);
};
J.contains$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
J.endsWith$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$close$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$close(receiver);
};
J.get$context2D$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$context2D(receiver);
};
J.get$data$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$data(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$id$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$id(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$size$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$size(receiver);
};
J.noSuchMethod$1 = function(receiver, a0) {
  return J.getInterceptor(receiver).noSuchMethod$1(receiver, a0);
};
J.pause$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).pause$0(receiver);
};
J.port$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).port$1(receiver, a0);
};
J.register$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).register$3(receiver, a0, a1, a2);
};
J.remove$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
J.removeAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).removeAt$1(receiver, a0);
};
J.replaceAll$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
};
J.send$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).send$1(receiver, a0);
};
J.send$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).send$2(receiver, a0, a1);
};
J.split$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).split$1(receiver, a0);
};
J.toLowerCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
C.JSArray_methods = J.JSArray.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNull_methods = J.JSNull.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.C_DynamicRuntimeType = new H.DynamicRuntimeType();
C.C_InPortType = new S.InPortType();
C.C_OutportType = new S.OutportType();
C.C__DelayedDone = new P._DelayedDone();
C.C__JSRandom = new P._JSRandom();
C.C__RootZone = new P._RootZone();
C.Duration_0 = new P.Duration(0);
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_4hp = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_8ZY = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string" &&
        name.length > 2 &&
        name !== "Object" &&
        name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_aQP = function() {
  function typeNameInChrome(o) {
    var name = o.constructor.name;
    if (name) return name;
    var s = Object.prototype.toString.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_gkc = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
Isolate.makeConstantList = function(list) {
  list.immutable$list = init;
  list.fixed$length = init;
  return list;
};
;
C.List_empty = Isolate.makeConstantList([]);
C.Symbol_call = new H.Symbol0("call");
C.Type_AHF = H.createRuntimeType('NativeTypedArray');
C.Type_EQs = H.createRuntimeType('GlobalEventHandlers');
C.Type_Epa = H.createRuntimeType('FlowComponent');
C.Type_NlB = H.createRuntimeType('NativeTypedArrayOfDouble');
C.Type_QyU = H.createRuntimeType('WindowEventHandlers');
C.Type_wOW = H.createRuntimeType('NativeTypedArrayOfInt');
$.libraries_to_load = {};
$.RawReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.Closure_functionCounter = 0;
$.BoundClosure_selfFieldNameCache = null;
$.BoundClosure_receiverFieldNameCache = null;
$.RuntimeFunctionType_inAssert = false;
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.printToZone = null;
$._nextCallback = null;
$._lastCallback = null;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Device__isOpera = null;
$.Device__isWebKit = null;
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() {
    return this;
  }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return new P.Expando(null);
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({toString: function() {
      return "$receiver$";
    }}));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null, toString: function() {
      return "$receiver$";
    }}));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    var $argumentsExpr$ = '$arguments$';
    try {
      null.$method$($argumentsExpr$);
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    var $argumentsExpr$ = '$arguments$';
    try {
      (void 0).$method$($argumentsExpr$);
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    try {
      null.$method$;
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    try {
      (void 0).$method$;
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "publicSymbolPattern", "Symbol_publicSymbolPattern", "get$Symbol_publicSymbolPattern", function() {
  return new H.JSSyntaxRegExp("^(?:(?:[\\-+*/%&|^]|\\[\\]=?|==|~/?|<[<=]?|>[>=]?|unary-)$|(?!(?:assert|break|c(?:a(?:se|tch)|lass|on(?:st|tinue))|d(?:efault|o)|e(?:lse|num|xtends)|f(?:alse|inal(?:ly)?|or)|i[fns]|n(?:ew|ull)|ret(?:hrow|urn)|s(?:uper|witch)|t(?:h(?:is|row)|r(?:ue|y))|v(?:ar|oid)|w(?:hile|ith))\\b(?!\\$))[a-zA-Z$][\\w$]*(?:=?$|[.](?!$)))+?$", H.JSSyntaxRegExp_makeNative("^(?:(?:[\\-+*/%&|^]|\\[\\]=?|==|~/?|<[<=]?|>[>=]?|unary-)$|(?!(?:assert|break|c(?:a(?:se|tch)|lass|on(?:st|tinue))|d(?:efault|o)|e(?:lse|num|xtends)|f(?:alse|inal(?:ly)?|or)|i[fns]|n(?:ew|ull)|ret(?:hrow|urn)|s(?:uper|witch)|t(?:h(?:is|row)|r(?:ue|y))|v(?:ar|oid)|w(?:hile|ith))\\b(?!\\$))[a-zA-Z$][\\w$]*(?:=?$|[.](?!$)))+?$", false, true, false), null, null);
});
Isolate.$lazy($, "scheduleImmediateClosure", "_AsyncRun_scheduleImmediateClosure", "get$_AsyncRun_scheduleImmediateClosure", function() {
  return P._AsyncRun__initializeScheduleImmediate();
});
Isolate.$lazy($, "_nullFuture", "Future__nullFuture", "get$Future__nullFuture", function() {
  return P._Future$immediate(null, null);
});
Isolate.$lazy($, "_toStringVisiting", "IterableBase__toStringVisiting", "get$IterableBase__toStringVisiting", function() {
  return [];
});
Isolate.$lazy($, "_smallA", "_smallA", "get$_smallA", function() {
  return ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];
});
Isolate.$lazy($, "_bigA", "_bigA", "get$_bigA", function() {
  return ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"];
});
Isolate.$lazy($, "registry", "Sparkflow_registry", "get$Sparkflow_registry", function() {
  var t1 = new S.SparkRegistryManager(H.setRuntimeTypeInfo(new N.MapDecorator(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [null, null]));
  t1.SparkRegistryManager$0();
  return t1;
});
// Native classes

init.functionAliases = {};
;
init.metadata = ["sender",
"e",
"event",
"uri",
"onError",
"closure",
"isolate",
"numberOfArguments",
"arg1",
"arg2",
"arg3",
"arg4",
{func: "void_", void: true},
{func: "void__void_", void: true, args: [{func: "void_", void: true}]},
{func: "void__dynamic", void: true, args: [null]},
"value",
{func: "void__dynamic__StackTrace", void: true, args: [null], opt: [P.StackTrace]},
,
"error",
"stackTrace",
{func: "bool__dynamic_dynamic", ret: P.bool, args: [null, null]},
{func: "int__dynamic", ret: P.$int, args: [null]},
"a",
{func: "int__Comparable_Comparable", ret: P.$int, args: [P.Comparable, P.Comparable]},
{func: "bool__Object_Object", ret: P.bool, args: [P.Object, P.Object]},
{func: "int__Object", ret: P.$int, args: [P.Object]},
{func: "void__Object", void: true, args: [P.Object]},
"object",
{func: "Function__dynamic_dynamic", ret: P.Function, args: [null, null]},
"t",
"s",
{func: "args1", args: [null]},
"n",
{func: "dynamic___String", opt: [P.String]},
"id",
{func: "void__String", void: true, args: [P.String]},
"returnValue",
"invocation",
{func: "args0"},
"msg",
"errorMessage",
{func: "dynamic__String", args: [P.String]},
"message",
{func: "args2", args: [null, null]},
{func: "dynamic__String_dynamic", args: [P.String, null]},
{func: "dynamic__dynamic_String", args: [null, P.String]},
"shell",
"theError",
"theStackTrace",
{func: "dynamic__Object", args: [P.Object]},
{func: "dynamic__dynamic__dynamic", args: [null], opt: [null]},
{func: "bool_", ret: P.bool},
"ignored",
"element",
"_",
{func: "Future_", ret: P.Future},
{func: "dynamic__dynamic_StackTrace", args: [null, P.StackTrace]},
"each",
"key",
{func: "dynamic__Symbol_dynamic", args: [P.Symbol, null]},
{func: "String__int", ret: P.String, args: [P.$int]},
{func: "void__dynamic__dynamic_dynamic", void: true, args: [null], opt: [null, null]},
{func: "dynamic__int", args: [P.$int]},
{func: "dynamic__int_dynamic", args: [P.$int, null]},
"err",
{func: "args4", args: [null, null, null, null]},
{func: "vid_"},
"k",
"v",
"b",
"c",
{func: "dynamic__dynamic__dynamic_dynamic", args: [null], opt: [null, null]},
"d",
{func: "dynamic__dynamic__dynamic_dynamic_dynamic", args: [null], opt: [null, null, null]},
{func: "dynamic__dynamic__dynamic_dynamic_dynamic_dynamic", args: [null], opt: [null, null, null, null]},
"f",
{func: "dynamic__dynamic__dynamic_dynamic_dynamic_dynamic_dynamic", args: [null], opt: [null, null, null, null, null]},
"h",
{func: "dynamic__dynamic__dynamic_dynamic_dynamic_dynamic_dynamic_dynamic", args: [null], opt: [null, null, null, null, null, null]},
"i",
{func: "dynamic__dynamic__dynamic_dynamic_dynamic_dynamic_dynamic_dynamic_dynamic", args: [null], opt: [null, null, null, null, null, null, null]},
"j",
{func: "dynamic__dynamic__dynamic_dynamic_dynamic_dynamic_dynamic_dynamic_dynamic_dynamic", args: [null], opt: [null, null, null, null, null, null, null, null]},
{func: "dynamic__dynamic__dynamic_dynamic_dynamic_dynamic_dynamic_dynamic_dynamic_dynamic_dynamic", args: [null], opt: [null, null, null, null, null, null, null, null, null]},
"data",
"packet",
{func: "void___dynamic", void: true, opt: [null]},
"p",
"node",
"arc",
{func: "args3", args: [null, null, null]},
"r",
"net",
"ops",
"named",
{func: "dynamic___List_Map", opt: [P.List, P.Map]},
"l",
"m",
{func: "dynamic___dynamic_dynamic", opt: [null, null]},
"target",
"control",
];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {
  }
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
;
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  function intern(s) {
    var o = {};
    o[s] = 1;
    return Object.keys(convertToFastObject(o))[0];
  }
  init.getIsolateTag = function(name) {
    return intern("___dart_" + name + init.isolateTag);
  };
  var tableProperty = "___dart_isolate_tags_";
  var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
  var rootProperty = "_ZxYxX";
  for (var i = 0;; i++) {
    var property = intern(rootProperty + "_" + i + "_");
    if (!(property in usedProperties)) {
      usedProperties[property] = 1;
      init.isolateTag = property;
      break;
    }
  }
}();
init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
// BEGIN invoke [main].
;(function(callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }
  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function(a) {
      H.startRootIsolate(A.main$closure(), a);
    }, []);
  } else {
    (function(a) {
      H.startRootIsolate(A.main$closure(), a);
    })([]);
  }
});
;
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(fieldDescriptor, accessors, cls) {
    var fieldInformation = fieldDescriptor.split("-");
    var field = fieldInformation[0];
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable;
    if (fieldInformation.length > 1)
      reflectable = true;
    else
      reflectable = false;
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc["^"], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        split = supr.split(":");
        if (split.length == 2) {
          supr = split[0];
          var functionSignature = split[1];
          if (functionSignature)
            desc.$signature = function(s) {
              return function() {
                return init.metadata[s];
              };
            }(functionSignature);
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = Object.create(null);
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined)
              if ($[fieldName] === sentinelInProgress)
                $[fieldName] = null;
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
})()

//# sourceMappingURL=canvas_basics.dart.js.map
//@ sourceMappingURL=canvas_basics.dart.js.map
